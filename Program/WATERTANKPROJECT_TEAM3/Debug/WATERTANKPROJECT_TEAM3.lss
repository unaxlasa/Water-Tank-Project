
WATERTANKPROJECT_TEAM3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  000011f4  00001288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080020e  0080020e  00001396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028f7  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8e  00000000  00000000  00003f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fa  00000000  00000000  00004e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00006290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070c  00000000  00000000  0000666c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109b  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007e13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ef       	ldi	r30, 0xF4	; 244
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 31       	cpi	r26, 0x17	; 23
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 19 02 	call	0x432	; 0x432 <main>
      9e:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PressureGetValue>:
#include "twi.h"			// Twi library. Needed for controlling i2c ram. Humidity and Preassure

/* Variables ----------------------------------------------------------*/
uint8_t repeatings =0;		// A variable for doing all measurement 20 times a display the 22th

uint16_t PressureGetValue(uint16_t data[],uint8_t FULL){
      a6:	cf 93       	push	r28
      a8:	fc 01       	movw	r30, r24
	uint8_t result;									// A variable for the result value
	//uint8_t result2;								// In case of Real Simulation we need to set another result for measured values as we have to measure adressses
	static uint8_t adress = 0x01;					// Adress for I2C RAM registers
	//static uint8_t cadress1 = 0xFD;				// In case of real simulation
	//static uint8_t adress2 = 0xFE;
	if (repeatings>20){									// If the repeat value is 21, enters the if
      aa:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__data_end>
      ae:	95 31       	cpi	r25, 0x15	; 21
      b0:	d0 f0       	brcs	.+52     	; 0xe6 <PressureGetValue+0x40>
															
		twi_start((preassure_addr<<1) + TWI_WRITE);		// Starts i2c with 1st addr-->wanting to write
      b2:	8e ee       	ldi	r24, 0xEE	; 238
      b4:	0e 94 2d 06 	call	0xc5a	; 0xc5a <twi_start>
		twi_write(adress);								// Writing 0x0 to the sensor with addr
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	0e 94 4a 06 	call	0xc94	; 0xc94 <twi_write>
		twi_stop();										// Nothing else has to be sent
      be:	0e 94 5e 06 	call	0xcbc	; 0xcbc <twi_stop>
		TIM2_overflow_16ms();							// A little delay
      c2:	e1 eb       	ldi	r30, 0xB1	; 177
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	87 60       	ori	r24, 0x07	; 7
      ca:	80 83       	st	Z, r24
		twi_start((preassure_addr<<1) + TWI_READ);		// After giving the	order to the slave we want to read
      cc:	8f ee       	ldi	r24, 0xEF	; 239
      ce:	0e 94 2d 06 	call	0xc5a	; 0xc5a <twi_start>
		result=twi_read_nack();							// Read the preassure intreger part
      d2:	0e 94 54 06 	call	0xca8	; 0xca8 <twi_read_nack>
      d6:	c8 2f       	mov	r28, r24
		twi_stop();										// We end the twi
      d8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <twi_stop>
		repeatings=0;									// Repeats is set to zero
      dc:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
		return result;									// Returns the result value
      e0:	8c 2f       	mov	r24, r28
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	05 c0       	rjmp	.+10     	; 0xf0 <PressureGetValue+0x4a>
		//return result1<<8&result2;					// In case of real simulation
	}
	else{
		repeatings++;									// Repeating is increased by one
      e6:	9f 5f       	subi	r25, 0xFF	; 255
      e8:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <__data_end>
	}

	return data[3];										// Without measuring sends the previous value
      ec:	86 81       	ldd	r24, Z+6	; 0x06
      ee:	97 81       	ldd	r25, Z+7	; 0x07
}
      f0:	cf 91       	pop	r28
      f2:	08 95       	ret

000000f4 <HumidGetValue>:
uint16_t HumidGetValue(uint16_t data[],uint8_t FULL){
      f4:	cf 93       	push	r28
      f6:	fc 01       	movw	r30, r24
	uint8_t result;										// A variable for the result value
	//uint8_t result2;									// In case of Real Simulation we need to set another result for measured values as we have to measure adressses
	static uint8_t adress = 0x00;						// Adress for I2C RAM registers
	//static uint8_t counter1 = 0xFD;					//Counter for real demostration
	//static uint8_t counter2 = 0xFE;
	if (repeatings>20){
      f8:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__data_end>
      fc:	95 31       	cpi	r25, 0x15	; 21
      fe:	d0 f0       	brcs	.+52     	; 0x134 <HumidGetValue+0x40>
		twi_start((humidity_addr<<1) + TWI_WRITE);		// Starts i2c with 1st addr-->wanting to write
     100:	8e ee       	ldi	r24, 0xEE	; 238
     102:	0e 94 2d 06 	call	0xc5a	; 0xc5a <twi_start>
		twi_write(adress);								// Writing 0x0 to the sensor with addr
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 4a 06 	call	0xc94	; 0xc94 <twi_write>
		twi_stop();										// Nothing else has to be sent
     10c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <twi_stop>
		TIM2_overflow_16ms();							// A little delay
     110:	e1 eb       	ldi	r30, 0xB1	; 177
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	87 60       	ori	r24, 0x07	; 7
     118:	80 83       	st	Z, r24
		twi_start((humidity_addr<<1) + TWI_READ);		// After giving the	order to the slave we want to read
     11a:	8f ee       	ldi	r24, 0xEF	; 239
     11c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <twi_start>
		result=twi_read_nack();							// Read the humidity integrer part
     120:	0e 94 54 06 	call	0xca8	; 0xca8 <twi_read_nack>
     124:	c8 2f       	mov	r28, r24
		twi_stop();										// We end the twi
     126:	0e 94 5e 06 	call	0xcbc	; 0xcbc <twi_stop>
		repeatings=0;									// Repeats is set to zero
     12a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
		return result;									// Returns the result value
     12e:	8c 2f       	mov	r24, r28
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	05 c0       	rjmp	.+10     	; 0x13e <HumidGetValue+0x4a>
		//return result1<<8&result2;					//Repeat the same to obtain two results and do a BitShift to sume them for Real Sensor and obtain 16bits
	}
	else{
		repeatings++;									// Repeating is increased by one
     134:	9f 5f       	subi	r25, 0xFF	; 255
     136:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <__data_end>
	}

	return data[4];										// Without measuring sends the previous value
     13a:	80 85       	ldd	r24, Z+8	; 0x08
     13c:	91 85       	ldd	r25, Z+9	; 0x09

}
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
     142:	fc 01       	movw	r30, r24
     144:	40 81       	ld	r20, Z
     146:	21 e0       	ldi	r18, 0x01	; 1
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	02 c0       	rjmp	.+4      	; 0x150 <GPIO_config_output+0xe>
     14c:	22 0f       	add	r18, r18
     14e:	33 1f       	adc	r19, r19
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <GPIO_config_output+0xa>
     154:	24 2b       	or	r18, r20
     156:	20 83       	st	Z, r18
     158:	08 95       	ret

0000015a <GPIO_config_input_nopull>:
     15a:	fc 01       	movw	r30, r24
     15c:	80 81       	ld	r24, Z
     15e:	21 e0       	ldi	r18, 0x01	; 1
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	02 c0       	rjmp	.+4      	; 0x168 <GPIO_config_input_nopull+0xe>
     164:	22 0f       	add	r18, r18
     166:	33 1f       	adc	r19, r19
     168:	6a 95       	dec	r22
     16a:	e2 f7       	brpl	.-8      	; 0x164 <GPIO_config_input_nopull+0xa>
     16c:	20 95       	com	r18
     16e:	82 23       	and	r24, r18
     170:	80 83       	st	Z, r24
     172:	81 81       	ldd	r24, Z+1	; 0x01
     174:	28 23       	and	r18, r24
     176:	21 83       	std	Z+1, r18	; 0x01
     178:	08 95       	ret

0000017a <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
     17a:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
     17c:	90 81       	ld	r25, Z
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <GPIO_write_low+0xe>
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	6a 95       	dec	r22
     18a:	e2 f7       	brpl	.-8      	; 0x184 <GPIO_write_low+0xa>
     18c:	20 95       	com	r18
     18e:	29 23       	and	r18, r25
     190:	20 83       	st	Z, r18
     192:	08 95       	ret

00000194 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
     194:	fc 01       	movw	r30, r24
     196:	40 81       	ld	r20, Z
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <GPIO_write_high+0xe>
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	6a 95       	dec	r22
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <GPIO_write_high+0xa>
     1a6:	24 2b       	or	r18, r20
     1a8:	20 83       	st	Z, r18
     1aa:	08 95       	ret

000001ac <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     1ac:	85 b1       	in	r24, 0x05	; 5
     1ae:	80 68       	ori	r24, 0x80	; 128
     1b0:	85 b9       	out	0x05, r24	; 5
     1b2:	85 e0       	ldi	r24, 0x05	; 5
     1b4:	8a 95       	dec	r24
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <toggle_e+0x8>
     1b8:	00 00       	nop
     1ba:	85 b1       	in	r24, 0x05	; 5
     1bc:	8f 77       	andi	r24, 0x7F	; 127
     1be:	85 b9       	out	0x05, r24	; 5
     1c0:	08 95       	ret

000001c2 <lcd_write>:
     1c2:	cf 93       	push	r28
     1c4:	c8 2f       	mov	r28, r24
     1c6:	66 23       	and	r22, r22
     1c8:	21 f0       	breq	.+8      	; 0x1d2 <lcd_write+0x10>
     1ca:	85 b1       	in	r24, 0x05	; 5
     1cc:	81 60       	ori	r24, 0x01	; 1
     1ce:	85 b9       	out	0x05, r24	; 5
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <lcd_write+0x16>
     1d2:	85 b1       	in	r24, 0x05	; 5
     1d4:	8e 7f       	andi	r24, 0xFE	; 254
     1d6:	85 b9       	out	0x05, r24	; 5
     1d8:	8a b1       	in	r24, 0x0a	; 10
     1da:	80 61       	ori	r24, 0x10	; 16
     1dc:	8a b9       	out	0x0a, r24	; 10
     1de:	8a b1       	in	r24, 0x0a	; 10
     1e0:	88 60       	ori	r24, 0x08	; 8
     1e2:	8a b9       	out	0x0a, r24	; 10
     1e4:	8a b1       	in	r24, 0x0a	; 10
     1e6:	80 64       	ori	r24, 0x40	; 64
     1e8:	8a b9       	out	0x0a, r24	; 10
     1ea:	8a b1       	in	r24, 0x0a	; 10
     1ec:	80 68       	ori	r24, 0x80	; 128
     1ee:	8a b9       	out	0x0a, r24	; 10
     1f0:	8b b1       	in	r24, 0x0b	; 11
     1f2:	8f 77       	andi	r24, 0x7F	; 127
     1f4:	8b b9       	out	0x0b, r24	; 11
     1f6:	8b b1       	in	r24, 0x0b	; 11
     1f8:	8f 7b       	andi	r24, 0xBF	; 191
     1fa:	8b b9       	out	0x0b, r24	; 11
     1fc:	8b b1       	in	r24, 0x0b	; 11
     1fe:	87 7f       	andi	r24, 0xF7	; 247
     200:	8b b9       	out	0x0b, r24	; 11
     202:	8b b1       	in	r24, 0x0b	; 11
     204:	8f 7e       	andi	r24, 0xEF	; 239
     206:	8b b9       	out	0x0b, r24	; 11
     208:	cc 23       	and	r28, r28
     20a:	1c f4       	brge	.+6      	; 0x212 <lcd_write+0x50>
     20c:	8b b1       	in	r24, 0x0b	; 11
     20e:	80 68       	ori	r24, 0x80	; 128
     210:	8b b9       	out	0x0b, r24	; 11
     212:	c6 ff       	sbrs	r28, 6
     214:	03 c0       	rjmp	.+6      	; 0x21c <lcd_write+0x5a>
     216:	8b b1       	in	r24, 0x0b	; 11
     218:	80 64       	ori	r24, 0x40	; 64
     21a:	8b b9       	out	0x0b, r24	; 11
     21c:	c5 ff       	sbrs	r28, 5
     21e:	03 c0       	rjmp	.+6      	; 0x226 <lcd_write+0x64>
     220:	8b b1       	in	r24, 0x0b	; 11
     222:	88 60       	ori	r24, 0x08	; 8
     224:	8b b9       	out	0x0b, r24	; 11
     226:	c4 ff       	sbrs	r28, 4
     228:	03 c0       	rjmp	.+6      	; 0x230 <lcd_write+0x6e>
     22a:	8b b1       	in	r24, 0x0b	; 11
     22c:	80 61       	ori	r24, 0x10	; 16
     22e:	8b b9       	out	0x0b, r24	; 11
     230:	0e 94 d6 00 	call	0x1ac	; 0x1ac <toggle_e>
     234:	8b b1       	in	r24, 0x0b	; 11
     236:	8f 77       	andi	r24, 0x7F	; 127
     238:	8b b9       	out	0x0b, r24	; 11
     23a:	8b b1       	in	r24, 0x0b	; 11
     23c:	8f 7b       	andi	r24, 0xBF	; 191
     23e:	8b b9       	out	0x0b, r24	; 11
     240:	8b b1       	in	r24, 0x0b	; 11
     242:	87 7f       	andi	r24, 0xF7	; 247
     244:	8b b9       	out	0x0b, r24	; 11
     246:	8b b1       	in	r24, 0x0b	; 11
     248:	8f 7e       	andi	r24, 0xEF	; 239
     24a:	8b b9       	out	0x0b, r24	; 11
     24c:	c3 ff       	sbrs	r28, 3
     24e:	03 c0       	rjmp	.+6      	; 0x256 <lcd_write+0x94>
     250:	8b b1       	in	r24, 0x0b	; 11
     252:	80 68       	ori	r24, 0x80	; 128
     254:	8b b9       	out	0x0b, r24	; 11
     256:	c2 ff       	sbrs	r28, 2
     258:	03 c0       	rjmp	.+6      	; 0x260 <lcd_write+0x9e>
     25a:	8b b1       	in	r24, 0x0b	; 11
     25c:	80 64       	ori	r24, 0x40	; 64
     25e:	8b b9       	out	0x0b, r24	; 11
     260:	c1 ff       	sbrs	r28, 1
     262:	03 c0       	rjmp	.+6      	; 0x26a <lcd_write+0xa8>
     264:	8b b1       	in	r24, 0x0b	; 11
     266:	88 60       	ori	r24, 0x08	; 8
     268:	8b b9       	out	0x0b, r24	; 11
     26a:	c0 ff       	sbrs	r28, 0
     26c:	03 c0       	rjmp	.+6      	; 0x274 <lcd_write+0xb2>
     26e:	8b b1       	in	r24, 0x0b	; 11
     270:	80 61       	ori	r24, 0x10	; 16
     272:	8b b9       	out	0x0b, r24	; 11
     274:	0e 94 d6 00 	call	0x1ac	; 0x1ac <toggle_e>
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	80 61       	ori	r24, 0x10	; 16
     27c:	8b b9       	out	0x0b, r24	; 11
     27e:	8b b1       	in	r24, 0x0b	; 11
     280:	88 60       	ori	r24, 0x08	; 8
     282:	8b b9       	out	0x0b, r24	; 11
     284:	8b b1       	in	r24, 0x0b	; 11
     286:	80 64       	ori	r24, 0x40	; 64
     288:	8b b9       	out	0x0b, r24	; 11
     28a:	8b b1       	in	r24, 0x0b	; 11
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	8b b9       	out	0x0b, r24	; 11
     290:	87 eb       	ldi	r24, 0xB7	; 183
     292:	9b e0       	ldi	r25, 0x0B	; 11
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	f1 f7       	brne	.-4      	; 0x294 <lcd_write+0xd2>
     298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_write+0xd8>
     29a:	00 00       	nop
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <lcd_command>:
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write>
     2a6:	08 95       	ret

000002a8 <lcd_gotoxy>:
     2a8:	61 11       	cpse	r22, r1
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <lcd_gotoxy+0xc>
     2ac:	80 58       	subi	r24, 0x80	; 128
     2ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
     2b2:	08 95       	ret
     2b4:	80 54       	subi	r24, 0x40	; 64
     2b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
     2ba:	08 95       	ret

000002bc <lcd_clrscr>:
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
     2c2:	08 95       	ret

000002c4 <lcd_putc>:
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write>
     2ca:	08 95       	ret

000002cc <lcd_puts>:
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	fc 01       	movw	r30, r24
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <lcd_puts+0xe>
     2d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
     2d8:	fe 01       	movw	r30, r28
     2da:	ef 01       	movw	r28, r30
     2dc:	21 96       	adiw	r28, 0x01	; 1
     2de:	80 81       	ld	r24, Z
     2e0:	81 11       	cpse	r24, r1
     2e2:	f8 cf       	rjmp	.-16     	; 0x2d4 <lcd_puts+0x8>
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     2ea:	cf 93       	push	r28
     2ec:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     2ee:	84 b1       	in	r24, 0x04	; 4
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     2f4:	8a b1       	in	r24, 0x0a	; 10
     2f6:	80 62       	ori	r24, 0x20	; 32
     2f8:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     2fa:	84 b1       	in	r24, 0x04	; 4
     2fc:	80 68       	ori	r24, 0x80	; 128
     2fe:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     300:	8a b1       	in	r24, 0x0a	; 10
     302:	80 61       	ori	r24, 0x10	; 16
     304:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     306:	8a b1       	in	r24, 0x0a	; 10
     308:	88 60       	ori	r24, 0x08	; 8
     30a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     30c:	8a b1       	in	r24, 0x0a	; 10
     30e:	80 64       	ori	r24, 0x40	; 64
     310:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     312:	8a b1       	in	r24, 0x0a	; 10
     314:	80 68       	ori	r24, 0x80	; 128
     316:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	99 ef       	ldi	r25, 0xF9	; 249
     31c:	01 97       	sbiw	r24, 0x01	; 1
     31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_init+0x32>
     320:	00 c0       	rjmp	.+0      	; 0x322 <lcd_init+0x38>
     322:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     324:	8b b1       	in	r24, 0x0b	; 11
     326:	88 60       	ori	r24, 0x08	; 8
     328:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     32a:	8b b1       	in	r24, 0x0b	; 11
     32c:	80 61       	ori	r24, 0x10	; 16
     32e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     330:	0e 94 d6 00 	call	0x1ac	; 0x1ac <toggle_e>
     334:	8f e1       	ldi	r24, 0x1F	; 31
     336:	9e e4       	ldi	r25, 0x4E	; 78
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_init+0x4e>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_init+0x54>
     33e:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     340:	0e 94 d6 00 	call	0x1ac	; 0x1ac <toggle_e>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_init+0x5e>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_init+0x64>
     34e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <toggle_e>
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x6e>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <lcd_init+0x74>
     35e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 7e       	andi	r24, 0xEF	; 239
     364:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
     366:	0e 94 d6 00 	call	0x1ac	; 0x1ac <toggle_e>
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <lcd_init+0x84>
     372:	00 c0       	rjmp	.+0      	; 0x374 <lcd_init+0x8a>
     374:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     376:	88 e2       	ldi	r24, 0x28	; 40
     378:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     37c:	88 e0       	ldi	r24, 0x08	; 8
     37e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     382:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     386:	86 e0       	ldi	r24, 0x06	; 6
     388:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     38c:	8c 2f       	mov	r24, r28
     38e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command>
}/* lcd_init */
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <DistanceValue>:


uint16_t DistanceValue(void)															
{
	
	EIMSK |= (1<<INT0);				// enable INT0
     396:	8d b3       	in	r24, 0x1d	; 29
     398:	81 60       	ori	r24, 0x01	; 1
     39a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);			// setting interrupt trigger on any change
     39c:	e9 e6       	ldi	r30, 0x69	; 105
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	80 81       	ld	r24, Z
     3a2:	81 60       	ori	r24, 0x01	; 1
     3a4:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);			
     3a6:	80 81       	ld	r24, Z
     3a8:	8d 7f       	andi	r24, 0xFD	; 253
     3aa:	80 83       	st	Z, r24
	
	TCCR2A = 0x00;					// Configure Timer0 for normal mode and no waveform generation
     3ac:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x05;					// Set prescaler value to clk/1024 and turn off forced output comparator
     3b0:	85 e0       	ldi	r24, 0x05	; 5
     3b2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	sei(); 
     3b6:	78 94       	sei
	pulse=1;						// To set a bucle while reading 5 times the distance value from the ISR
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <pulse>
	while(pulse){					// Send signal and receive signal
     3be:	16 c0       	rjmp	.+44     	; 0x3ec <DistanceValue+0x56>
		GPIO_write_high(&PORTB,5);			// Send signal
     3c0:	65 e0       	ldi	r22, 0x05	; 5
     3c2:	85 e2       	ldi	r24, 0x25	; 37
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 ca 00 	call	0x194	; 0x194 <GPIO_write_high>
     3ca:	20 e5       	ldi	r18, 0x50	; 80
     3cc:	2a 95       	dec	r18
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <DistanceValue+0x36>
		_delay_us(15);						// Trigger the ultrasonic module for 15usec
		GPIO_write_low(&PORTB,5);			// Receive signal
     3d0:	65 e0       	ldi	r22, 0x05	; 5
     3d2:	85 e2       	ldi	r24, 0x25	; 37
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 bd 00 	call	0x17a	; 0x17a <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	99 e6       	ldi	r25, 0x69	; 105
     3de:	28 e1       	ldi	r18, 0x18	; 24
     3e0:	81 50       	subi	r24, 0x01	; 1
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	20 40       	sbci	r18, 0x00	; 0
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <DistanceValue+0x4a>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <DistanceValue+0x54>
     3ea:	00 00       	nop
	
	TCCR2A = 0x00;					// Configure Timer0 for normal mode and no waveform generation
	TCCR2B = 0x05;					// Set prescaler value to clk/1024 and turn off forced output comparator
	sei(); 
	pulse=1;						// To set a bucle while reading 5 times the distance value from the ISR
	while(pulse){					// Send signal and receive signal
     3ec:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <pulse>
     3f0:	81 11       	cpse	r24, r1
     3f2:	e6 cf       	rjmp	.-52     	; 0x3c0 <DistanceValue+0x2a>
		GPIO_write_low(&PORTB,5);			// Receive signal
		_delay_ms(500);						// Trigger the ultrasonic module for 500ms
	}
	return distance;						// We return the measured distance value
	
}
     3f4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <distance>
     3f8:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <distance+0x1>
     3fc:	08 95       	ret

000003fe <DistanceSensorValue>:


uint16_t DistanceSensorValue(uint8_t FULL){		
     3fe:	cf 93       	push	r28
	if (repeat>20){										// If the repeat value is 21, enters the if
     400:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <repeat>
     404:	95 31       	cpi	r25, 0x15	; 21
     406:	60 f0       	brcs	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     408:	c8 2f       	mov	r28, r24
		repeat=0;										// Set the repeat to zero
     40a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <repeat>
		uint16_t distancevalue = DistanceValue();		// We get the distance value from the previous fuction
     40e:	0e 94 cb 01 	call	0x396	; 0x396 <DistanceValue>
		return FULL-distancevalue;						// We return the difference between the full tank  and the measured value
     412:	2c 2f       	mov	r18, r28
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	a9 01       	movw	r20, r18
     418:	48 1b       	sub	r20, r24
     41a:	59 0b       	sbc	r21, r25
     41c:	ca 01       	movw	r24, r20
     41e:	07 c0       	rjmp	.+14     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	}
	else{
		repeat++;										// If repeat value is less than 20, we increase repeat by one and we return the previous value
     420:	9f 5f       	subi	r25, 0xFF	; 255
     422:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <repeat>
	}
	return data[0];										
     426:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data>
     42a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <data+0x1>
}
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <main>:
 * Purpose:  Define the main function of the program
 * Returns:  none
 **********************************************************************/

int main(void){
	lcd_init(LCD_DISP_ON);									// We initialize the LCD display
     432:	8c e0       	ldi	r24, 0x0C	; 12
     434:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_init>
	GPIO_config_output(&DDRD, PUMP_PIN);					// We set the Pump pin as output in the PD!
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8a e2       	ldi	r24, 0x2A	; 42
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_config_output>
	GPIO_config_output(&DDRD, PB5);							// We configure the trigger pin in the PB% as output
     442:	65 e0       	ldi	r22, 0x05	; 5
     444:	8a e2       	ldi	r24, 0x2A	; 42
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 a1 00 	call	0x142	; 0x142 <GPIO_config_output>
	GPIO_config_input_nopull(&DDRD,ECHO_PIN);				// We set the echo pin as no pull input
     44c:	66 e0       	ldi	r22, 0x06	; 6
     44e:	8a e2       	ldi	r24, 0x2A	; 42
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_config_input_nopull>
	
	EIMSK |= (1<<INT0);										// enable INT0
     456:	8d b3       	in	r24, 0x1d	; 29
     458:	81 60       	ori	r24, 0x01	; 1
     45a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);									// setting interrupt trigger on any change
     45c:	e9 e6       	ldi	r30, 0x69	; 105
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	81 60       	ori	r24, 0x01	; 1
     464:	80 83       	st	Z, r24
															// Configure ADC to convert PC0[A0] analog value
	
															// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
     466:	ec e7       	ldi	r30, 0x7C	; 124
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	80 64       	ori	r24, 0x40	; 64
     46e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     470:	80 81       	ld	r24, Z
     472:	8f 77       	andi	r24, 0x7F	; 127
     474:	80 83       	st	Z, r24
															// Set input channel to ADC0
	ADMUX &= ~(1<<MUX3|1<<MUX2|1<<MUX1|1<<MUX0);
     476:	80 81       	ld	r24, Z
     478:	80 7f       	andi	r24, 0xF0	; 240
     47a:	80 83       	st	Z, r24
															// Enable ADC module
	ADCSRA |= (1<<ADEN);
     47c:	ea e7       	ldi	r30, 0x7A	; 122
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	80 68       	ori	r24, 0x80	; 128
     484:	80 83       	st	Z, r24
															// Enable conversion complete interrupt
	sei();
     486:	78 94       	sei
	twi_init();												// We initialize the twi for bme280
     488:	0e 94 1e 06 	call	0xc3c	; 0xc3c <twi_init>

	
	while(1){												// Infinite loop				
		
		ADCSRA |= (1<<ADSC);
     48c:	ea e7       	ldi	r30, 0x7A	; 122
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	80 64       	ori	r24, 0x40	; 64
     494:	80 83       	st	Z, r24
		setting=ReadKeys(setting, ADC, data);				// We set a new setting value for the menu
     496:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     49a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     49e:	42 e0       	ldi	r20, 0x02	; 2
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <setting>
     4a6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <ReadKeys>
     4aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <setting>
     4ae:	2f ef       	ldi	r18, 0xFF	; 255
     4b0:	83 ec       	ldi	r24, 0xC3	; 195
     4b2:	99 e0       	ldi	r25, 0x09	; 9
     4b4:	21 50       	subi	r18, 0x01	; 1
     4b6:	80 40       	sbci	r24, 0x00	; 0
     4b8:	90 40       	sbci	r25, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x82>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0x8c>
     4be:	00 00       	nop
		_delay_ms(200);										// A little delay of 200ms
		Display(setting, data, FULL);						// Update the display
     4c0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4c4:	62 e0       	ldi	r22, 0x02	; 2
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <setting>
     4cc:	0e 94 c8 02 	call	0x590	; 0x590 <Display>
		
		if(check_period > 6){								// Even if the setting is not meassure all values in backgraunds every 40 loops (6*20/3)
     4d0:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <check_period>
     4d4:	87 30       	cpi	r24, 0x07	; 7
     4d6:	c8 f0       	brcs	.+50     	; 0x50a <main+0xd8>
			data[0]=DistanceSensorValue(FULL);				// The distance
     4d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4dc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DistanceSensorValue>
     4e0:	c2 e0       	ldi	r28, 0x02	; 2
     4e2:	d1 e0       	ldi	r29, 0x01	; 1
     4e4:	99 83       	std	Y+1, r25	; 0x01
     4e6:	88 83       	st	Y, r24
			data[3]=PressureGetValue(data, FULL);			// The preassure
     4e8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4ec:	ce 01       	movw	r24, r28
     4ee:	0e 94 53 00 	call	0xa6	; 0xa6 <PressureGetValue>
     4f2:	9f 83       	std	Y+7, r25	; 0x07
     4f4:	8e 83       	std	Y+6, r24	; 0x06
			data[4]=HumidGetValue(data, FULL);				// The humidity
     4f6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4fa:	ce 01       	movw	r24, r28
     4fc:	0e 94 7a 00 	call	0xf4	; 0xf4 <HumidGetValue>
     500:	99 87       	std	Y+9, r25	; 0x09
     502:	88 87       	std	Y+8, r24	; 0x08
			check_period=0;									// The check period is set to zero
     504:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <check_period>
     508:	c1 cf       	rjmp	.-126    	; 0x48c <main+0x5a>
		}
		else{
			check_period++;									// We sume the check perio is summed by one
     50a:	8f 5f       	subi	r24, 0xFF	; 255
     50c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <check_period>
     510:	bd cf       	rjmp	.-134    	; 0x48c <main+0x5a>

00000512 <__vector_1>:
	}
}

/* This ISR is called automatically when a change on the INT0 pin happens due to the change of the echo pin from the ultrasonic module.............*/
ISR(INT0_vect)
{
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	8f 93       	push	r24
     51e:	9f 93       	push	r25
     520:	ef 93       	push	r30
     522:	ff 93       	push	r31
														//if the flag is 0, start timer2 with no pre-scaler
	if(echoFlag == 0) {
     524:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <echoFlag>
     528:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <echoFlag+0x1>
     52c:	89 2b       	or	r24, r25
     52e:	61 f4       	brne	.+24     	; 0x548 <__vector_1+0x36>
		TCCR2B |= (1<<CS20);
     530:	e1 eb       	ldi	r30, 0xB1	; 177
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	81 60       	ori	r24, 0x01	; 1
     538:	80 83       	st	Z, r24
		echoFlag = 1;									// Set flag to 1
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <echoFlag+0x1>
     542:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <echoFlag>
     546:	1b c0       	rjmp	.+54     	; 0x57e <__vector_1+0x6c>
	}
	else {
		distance = TCNT2;								// Pulse takes values of counter
     548:	e2 eb       	ldi	r30, 0xB2	; 178
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <distance+0x1>
     554:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <distance>
		TCCR2B = 0;										// Stop timer
     558:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
		TCNT2 = 0;										// Reset counter
     55c:	10 82       	st	Z, r1
		echoFlag = 0;									// Reset flag
     55e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <echoFlag+0x1>
     562:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <echoFlag>
		loop++;
     566:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <loop>
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <loop>
		if (loop>5){
     570:	86 30       	cpi	r24, 0x06	; 6
     572:	28 f0       	brcs	.+10     	; 0x57e <__vector_1+0x6c>
			EIMSK  &= ~(1<<INT0);						// Disable INT0
     574:	8d b3       	in	r24, 0x1d	; 29
     576:	8e 7f       	andi	r24, 0xFE	; 254
     578:	8d bb       	out	0x1d, r24	; 29
			pulse=0;
     57a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pulse>
		}
	}
	
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <Display>:



/*Fuction definition.............................................................................................................*/

void Display(uint8_t setting, uint16_t data[], uint8_t FULL){
     590:	8f 92       	push	r8
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <Display+0x18>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	d8 2e       	mov	r13, r24
     5ae:	8b 01       	movw	r16, r22
     5b0:	e4 2e       	mov	r14, r20
	
	char lcd_string[2] = " ";						// Creates a string
     5b2:	80 e2       	ldi	r24, 0x20	; 32
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	89 83       	std	Y+1, r24	; 0x01
	lcd_gotoxy(0,1);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
	
	switch (setting)								// Defines the display of each setting
     5c6:	22 e0       	ldi	r18, 0x02	; 2
     5c8:	d2 16       	cp	r13, r18
     5ca:	09 f4       	brne	.+2      	; 0x5ce <Display+0x3e>
     5cc:	db c0       	rjmp	.+438    	; 0x784 <Display+0x1f4>
     5ce:	2d 15       	cp	r18, r13
     5d0:	38 f0       	brcs	.+14     	; 0x5e0 <Display+0x50>
     5d2:	dd 20       	and	r13, r13
     5d4:	89 f0       	breq	.+34     	; 0x5f8 <Display+0x68>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	d8 16       	cp	r13, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <Display+0x4e>
     5dc:	8c c0       	rjmp	.+280    	; 0x6f6 <Display+0x166>
     5de:	53 c2       	rjmp	.+1190   	; 0xa86 <__stack+0x187>
     5e0:	e4 e0       	ldi	r30, 0x04	; 4
     5e2:	de 16       	cp	r13, r30
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <Display+0x58>
     5e6:	55 c1       	rjmp	.+682    	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     5e8:	de 16       	cp	r13, r30
     5ea:	08 f4       	brcc	.+2      	; 0x5ee <Display+0x5e>
     5ec:	f3 c0       	rjmp	.+486    	; 0x7d4 <Display+0x244>
     5ee:	f5 e0       	ldi	r31, 0x05	; 5
     5f0:	df 16       	cp	r13, r31
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <Display+0x66>
     5f4:	c5 c1       	rjmp	.+906    	; 0x980 <__stack+0x81>
     5f6:	47 c2       	rjmp	.+1166   	; 0xa86 <__stack+0x187>
	{
		case 0:										// Depth
		data[0] = DistanceSensorValue(FULL);		// Update the water level
     5f8:	f1 2c       	mov	r15, r1
     5fa:	c7 01       	movw	r24, r14
     5fc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DistanceSensorValue>
     600:	f8 01       	movw	r30, r16
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	80 83       	st	Z, r24
		lcd_gotoxy(0,0);							// We got to the 0,0
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("Depth:");							// We write the text, in this case is Depth
     612:	8c e0       	ldi	r24, 0x0C	; 12
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[0]>=FULL){							// If the depth is the same as the full tank we write a message of FULL
     61a:	f8 01       	movw	r30, r16
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	8e 15       	cp	r24, r14
     622:	9f 05       	cpc	r25, r15
     624:	58 f0       	brcs	.+22     	; 0x63c <Display+0xac>
				lcd_gotoxy(0,1);					// We move to the 0,1 position and we write the message
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
				lcd_puts("FULL");
     632:	83 e1       	ldi	r24, 0x13	; 19
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
     63a:	25 c2       	rjmp	.+1098   	; 0xa86 <__stack+0x187>
		}else{
		lcd_gotoxy(0,1);							// If the value is not the same as the full tank, we write the depht in the 0,1 position
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		itoa(data[setting],lcd_string,10);			// We transform the value from the data matrix into a string
     648:	8d 2d       	mov	r24, r13
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	08 0f       	add	r16, r24
     652:	19 1f       	adc	r17, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     654:	4a e0       	ldi	r20, 0x0A	; 10
     656:	be 01       	movw	r22, r28
     658:	6f 5f       	subi	r22, 0xFF	; 255
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	f8 01       	movw	r30, r16
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	0e 94 c3 08 	call	0x1186	; 0x1186 <__itoa_ncheck>
		lcd_puts(lcd_string);						// We write the string
     666:	ce 01       	movw	r24, r28
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		lcd_gotoxy(3,1);							// As the value in real simulation is always going to be less or same as 400 is going to the 3 digits so we clean the 4th
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts(" ");								// We write an space in the 3,1 position
     67a:	8c e0       	ldi	r24, 0x0C	; 12
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[setting]<=999){						// We need to do some corrections, depending of the digits
     682:	f8 01       	movw	r30, r16
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	88 3e       	cpi	r24, 0xE8	; 232
     68a:	93 40       	sbci	r25, 0x03	; 3
     68c:	50 f4       	brcc	.+20     	; 0x6a2 <Display+0x112>
			lcd_gotoxy(3,1);						// If the value is 3 digits we clean the 4th with a space
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     69a:	8c e0       	ldi	r24, 0x0C	; 12
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=99){
     6a2:	f8 01       	movw	r30, r16
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	84 36       	cpi	r24, 0x64	; 100
     6aa:	91 05       	cpc	r25, r1
     6ac:	50 f4       	brcc	.+20     	; 0x6c2 <Display+0x132>
			lcd_gotoxy(2,1);						// If the value is 2 digits we clean the 3th with a space too
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     6ba:	8c e0       	ldi	r24, 0x0C	; 12
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=9){
     6c2:	f8 01       	movw	r30, r16
     6c4:	80 81       	ld	r24, Z
     6c6:	91 81       	ldd	r25, Z+1	; 0x01
     6c8:	0a 97       	sbiw	r24, 0x0a	; 10
     6ca:	50 f4       	brcc	.+20     	; 0x6e0 <Display+0x150>
			lcd_gotoxy(1,1);						// If the value is 1 digit we clean the 2nd with a space too
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     6d8:	8c e0       	ldi	r24, 0x0C	; 12
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		lcd_gotoxy(5,1);
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	85 e0       	ldi	r24, 0x05	; 5
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("cm");								// We put the unit
     6ec:	88 e1       	ldi	r24, 0x18	; 24
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
     6f4:	c8 c1       	rjmp	.+912    	; 0xa86 <__stack+0x187>
		}
		break;
		
		case 1:										// Valve open ratio
		itoa(data[setting],lcd_string,10);			// The open percentage is stored in the data matrix, so we need to convert it into a string
     6f6:	8d 2d       	mov	r24, r13
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	08 0f       	add	r16, r24
     700:	19 1f       	adc	r17, r25
     702:	4a e0       	ldi	r20, 0x0A	; 10
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	f8 01       	movw	r30, r16
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	0e 94 c3 08 	call	0x1186	; 0x1186 <__itoa_ncheck>
		lcd_puts(lcd_string);						// Write the string
     714:	ce 01       	movw	r24, r28
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[setting]<=95){						// As the value increases from 5 to 5, if the value is higher than 95 we clean the 3th digit
     71c:	f8 01       	movw	r30, r16
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	80 36       	cpi	r24, 0x60	; 96
     724:	91 05       	cpc	r25, r1
     726:	50 f4       	brcc	.+20     	; 0x73c <Display+0x1ac>
			lcd_gotoxy(2,1);						// We put an space in the 2,1 position
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	82 e0       	ldi	r24, 0x02	; 2
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     734:	8c e0       	ldi	r24, 0x0C	; 12
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]==5){						// If its 5 so its 1 digit, so we clean
     73c:	f8 01       	movw	r30, r16
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	05 97       	sbiw	r24, 0x05	; 5
     744:	51 f4       	brne	.+20     	; 0x75a <Display+0x1ca>
			lcd_gotoxy(1,1);						// We put an space at 1,1 position
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     752:	8c e0       	ldi	r24, 0x0C	; 12
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		lcd_gotoxy(0,0);							// We write Valve in the 0,0 position
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("Valve:");
     766:	8b e1       	ldi	r24, 0x1B	; 27
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		lcd_gotoxy(5,1);							// We write the unit in the 5,1 position
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	85 e0       	ldi	r24, 0x05	; 5
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("%");
     77a:	82 e2       	ldi	r24, 0x22	; 34
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		break;
     782:	81 c1       	rjmp	.+770    	; 0xa86 <__stack+0x187>
		
		case 2:										// Pump state
		itoa(data[setting],lcd_string,10);			// The pump state is stored in the data matrix, so we need to convert it into a string
     784:	8d 2d       	mov	r24, r13
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	08 0f       	add	r16, r24
     78e:	19 1f       	adc	r17, r25
     790:	4a e0       	ldi	r20, 0x0A	; 10
     792:	be 01       	movw	r22, r28
     794:	6f 5f       	subi	r22, 0xFF	; 255
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	f8 01       	movw	r30, r16
     79a:	80 81       	ld	r24, Z
     79c:	91 81       	ldd	r25, Z+1	; 0x01
     79e:	0e 94 c3 08 	call	0x1186	; 0x1186 <__itoa_ncheck>
		if(data[setting]==1){						// If it is 1, the pump is On, so we write On in the display
     7a2:	f8 01       	movw	r30, r16
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	29 f4       	brne	.+10     	; 0x7b6 <Display+0x226>
			lcd_puts("On ");
     7ac:	84 e2       	ldi	r24, 0x24	; 36
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
     7b4:	04 c0       	rjmp	.+8      	; 0x7be <Display+0x22e>

		}
		else{										// If it is 0, the pump is Off, so we write Off in the display
			lcd_puts("Off");
     7b6:	88 e2       	ldi	r24, 0x28	; 40
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		lcd_gotoxy(0,0);							// We go to the 0,0 position
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("Pump:");							// And we write Pump in that position
     7ca:	8c e2       	ldi	r24, 0x2C	; 44
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		break;
     7d2:	59 c1       	rjmp	.+690    	; 0xa86 <__stack+0x187>
		
		case 3:										// Atmosphere Pressure
		data[3] = PressureGetValue(data, FULL);		// Update the pressure at the bottom of the tank
     7d4:	6e 2d       	mov	r22, r14
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	c8 01       	movw	r24, r16
     7da:	0e 94 53 00 	call	0xa6	; 0xa6 <PressureGetValue>
     7de:	f8 01       	movw	r30, r16
     7e0:	97 83       	std	Z+7, r25	; 0x07
     7e2:	86 83       	std	Z+6, r24	; 0x06
		itoa(data[setting],lcd_string,10);			// We convert it into a string
     7e4:	8d 2d       	mov	r24, r13
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	08 0f       	add	r16, r24
     7ee:	19 1f       	adc	r17, r25
     7f0:	4a e0       	ldi	r20, 0x0A	; 10
     7f2:	be 01       	movw	r22, r28
     7f4:	6f 5f       	subi	r22, 0xFF	; 255
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	f8 01       	movw	r30, r16
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	0e 94 c3 08 	call	0x1186	; 0x1186 <__itoa_ncheck>
		lcd_puts(lcd_string);						// We write this string
     802:	ce 01       	movw	r24, r28
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[setting]<=999){						// If the value is 3 digits we clean the 4th one
     80a:	f8 01       	movw	r30, r16
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	88 3e       	cpi	r24, 0xE8	; 232
     812:	93 40       	sbci	r25, 0x03	; 3
     814:	50 f4       	brcc	.+20     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
			lcd_gotoxy(3,1);						// By putting a space at 3,1 position
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     822:	8c e0       	ldi	r24, 0x0C	; 12
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=99){						// If the value is 2 digits we clean the 3th one
     82a:	f8 01       	movw	r30, r16
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01
     830:	84 36       	cpi	r24, 0x64	; 100
     832:	91 05       	cpc	r25, r1
     834:	50 f4       	brcc	.+20     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			lcd_gotoxy(2,1);						// By putting a space at 2,1 position
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     842:	8c e0       	ldi	r24, 0x0C	; 12
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=9){						// If the value is 1 digit we clean the 2nd one
     84a:	f8 01       	movw	r30, r16
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	0a 97       	sbiw	r24, 0x0a	; 10
     852:	50 f4       	brcc	.+20     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			lcd_gotoxy(1,1);						// By putting a space at 1,1 position
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     860:	8c e0       	ldi	r24, 0x0C	; 12
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		lcd_gotoxy(0,0);							// We got to the 0,0 position
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("Atmos Pressure:");				// We write the text
     874:	82 e3       	ldi	r24, 0x32	; 50
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		lcd_gotoxy(5,1);							// We write the unit in the 5,1 position
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	85 e0       	ldi	r24, 0x05	; 5
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("KPa");
     888:	82 e4       	ldi	r24, 0x42	; 66
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		break;
     890:	fa c0       	rjmp	.+500    	; 0xa86 <__stack+0x187>
		
		case 4:										// Humidity
		data[4] = HumidGetValue(data, FULL);		// Update the humidity calling to the function
     892:	6e 2d       	mov	r22, r14
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	c8 01       	movw	r24, r16
     898:	0e 94 7a 00 	call	0xf4	; 0xf4 <HumidGetValue>
     89c:	f8 01       	movw	r30, r16
     89e:	91 87       	std	Z+9, r25	; 0x09
     8a0:	80 87       	std	Z+8, r24	; 0x08
		lcd_gotoxy(0,0);							// We go to 0,0
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("Humid:");							// We write Humidity in that position
     8ae:	86 e4       	ldi	r24, 0x46	; 70
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[setting]>=100){						// If the value is higher than 100% is going to RAIN
     8b6:	8d 2d       	mov	r24, r13
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	08 0f       	add	r16, r24
     8c0:	19 1f       	adc	r17, r25
     8c2:	f8 01       	movw	r30, r16
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	84 36       	cpi	r24, 0x64	; 100
     8ca:	91 05       	cpc	r25, r1
     8cc:	a8 f0       	brcs	.+42     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
			lcd_gotoxy(0,1);						// We write a message in the 0,1 position
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts("RAIN");
     8da:	8d e4       	ldi	r24, 0x4D	; 77
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
			lcd_gotoxy(5,1);						// We clean the unit
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     8ee:	8c e0       	ldi	r24, 0x0C	; 12
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
     8f6:	c7 c0       	rjmp	.+398    	; 0xa86 <__stack+0x187>
     8f8:	4a e0       	ldi	r20, 0x0A	; 10
     8fa:	be 01       	movw	r22, r28
     8fc:	6f 5f       	subi	r22, 0xFF	; 255
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	0e 94 c3 08 	call	0x1186	; 0x1186 <__itoa_ncheck>
		}else{										// If not we write that value
		itoa(data[setting],lcd_string,10);			// We convert the value into a string
		lcd_gotoxy(3,1);							// As the value is always gong to be less than 3 digits we clean that digit
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts(" ");								// We use a space
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		lcd_gotoxy(0,1);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts(lcd_string);						// We write the string in the 0,1 position
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[setting]<=99){						// If the humidity is less than 99%
     92c:	f8 01       	movw	r30, r16
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	84 36       	cpi	r24, 0x64	; 100
     934:	91 05       	cpc	r25, r1
     936:	50 f4       	brcc	.+20     	; 0x94c <__stack+0x4d>
		lcd_gotoxy(2,1);							// We clean the 2,1 position with a space
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts(" ");
     944:	8c e0       	ldi	r24, 0x0C	; 12
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=9){						// If the humidity is less than 9%
     94c:	f8 01       	movw	r30, r16
     94e:	80 81       	ld	r24, Z
     950:	91 81       	ldd	r25, Z+1	; 0x01
     952:	0a 97       	sbiw	r24, 0x0a	; 10
     954:	50 f4       	brcc	.+20     	; 0x96a <__stack+0x6b>
		lcd_gotoxy(1,1);							// We clean the 1,1 position with a space
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts(" ");
     962:	8c e0       	ldi	r24, 0x0C	; 12
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		lcd_gotoxy(5,1);							// We got to the position 5,1
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("%");								// We write the unit
     976:	82 e2       	ldi	r24, 0x22	; 34
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
     97e:	83 c0       	rjmp	.+262    	; 0xa86 <__stack+0x187>
		}
		break;
		
		case 5:												// Pressure tank
		data[3] = PressureGetValue(data, FULL);				// Update the pressure of the atmosphere
     980:	f1 2c       	mov	r15, r1
     982:	b7 01       	movw	r22, r14
     984:	c8 01       	movw	r24, r16
     986:	0e 94 53 00 	call	0xa6	; 0xa6 <PressureGetValue>
     98a:	f8 01       	movw	r30, r16
     98c:	97 83       	std	Z+7, r25	; 0x07
     98e:	86 83       	std	Z+6, r24	; 0x06
		data[0] = DistanceSensorValue(FULL);				// Update the distance
     990:	c7 01       	movw	r24, r14
     992:	0e 94 ff 01 	call	0x3fe	; 0x3fe <DistanceSensorValue>
     996:	f8 01       	movw	r30, r16
     998:	91 83       	std	Z+1, r25	; 0x01
     99a:	80 83       	st	Z, r24
		uint16_t relative = data[3]+(data[0]*9.8/100000);	// By using Bernoulli we calculate the pressure of the bottom of the tank
     99c:	e6 80       	ldd	r14, Z+6	; 0x06
     99e:	f7 80       	ldd	r15, Z+7	; 0x07
     9a0:	bc 01       	movw	r22, r24
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 7b 07 	call	0xef6	; 0xef6 <__floatunsisf>
     9aa:	2d ec       	ldi	r18, 0xCD	; 205
     9ac:	3c ec       	ldi	r19, 0xCC	; 204
     9ae:	4c e1       	ldi	r20, 0x1C	; 28
     9b0:	51 e4       	ldi	r21, 0x41	; 65
     9b2:	0e 94 09 08 	call	0x1012	; 0x1012 <__mulsf3>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e5       	ldi	r19, 0x50	; 80
     9ba:	43 ec       	ldi	r20, 0xC3	; 195
     9bc:	57 e4       	ldi	r21, 0x47	; 71
     9be:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__divsf3>
     9c2:	4b 01       	movw	r8, r22
     9c4:	5c 01       	movw	r10, r24
     9c6:	b7 01       	movw	r22, r14
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 7b 07 	call	0xef6	; 0xef6 <__floatunsisf>
     9d0:	a5 01       	movw	r20, r10
     9d2:	94 01       	movw	r18, r8
     9d4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__addsf3>
     9d8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fixunssfsi>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	4a e0       	ldi	r20, 0x0A	; 10
     9e2:	be 01       	movw	r22, r28
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	0e 94 c3 08 	call	0x1186	; 0x1186 <__itoa_ncheck>
		itoa(relative,lcd_string,10);						// We convert it into a string
		lcd_puts(lcd_string);								// We write it in the 0,1 position
     9ec:	ce 01       	movw	r24, r28
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		if(data[setting]<=999){								// Like previously done we clean the digits depending on the values
     9f4:	8d 2d       	mov	r24, r13
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	08 0f       	add	r16, r24
     9fe:	19 1f       	adc	r17, r25
     a00:	f8 01       	movw	r30, r16
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	88 3e       	cpi	r24, 0xE8	; 232
     a08:	93 40       	sbci	r25, 0x03	; 3
     a0a:	50 f4       	brcc	.+20     	; 0xa20 <__stack+0x121>
			lcd_gotoxy(3,1);
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     a18:	8c e0       	ldi	r24, 0x0C	; 12
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=99){
     a20:	f8 01       	movw	r30, r16
     a22:	80 81       	ld	r24, Z
     a24:	91 81       	ldd	r25, Z+1	; 0x01
     a26:	84 36       	cpi	r24, 0x64	; 100
     a28:	91 05       	cpc	r25, r1
     a2a:	50 f4       	brcc	.+20     	; 0xa40 <__stack+0x141>
			lcd_gotoxy(2,1);
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     a38:	8c e0       	ldi	r24, 0x0C	; 12
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		if(data[setting]<=9){
     a40:	f8 01       	movw	r30, r16
     a42:	80 81       	ld	r24, Z
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	0a 97       	sbiw	r24, 0x0a	; 10
     a48:	50 f4       	brcc	.+20     	; 0xa5e <__stack+0x15f>
			lcd_gotoxy(1,1);
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
			lcd_puts(" ");
     a56:	8c e0       	ldi	r24, 0x0C	; 12
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		}
		lcd_gotoxy(0,0);
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("Tank Pressure:");							// We write the text in the 0,0 position
     a6a:	82 e5       	ldi	r24, 0x52	; 82
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		lcd_gotoxy(5,1);									// We go to the 5,1 position
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	85 e0       	ldi	r24, 0x05	; 5
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("KPa");									// We write the unit
     a7e:	82 e4       	ldi	r24, 0x42	; 66
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
		
	}
}
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	ff 90       	pop	r15
     a94:	ef 90       	pop	r14
     a96:	df 90       	pop	r13
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	9f 90       	pop	r9
     a9e:	8f 90       	pop	r8
     aa0:	08 95       	ret

00000aa2 <ReadKeys>:
/*Fuction definition.............................................................................................................*/

uint8_t ReadKeys( uint8_t setting, int value, uint16_t data[]){
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	c8 2f       	mov	r28, r24
     ab0:	8b 01       	movw	r16, r22
     ab2:	7a 01       	movw	r14, r20
	
	uint8_t newset = setting;									// We set a new variable called newsetting with will take the setting value

	if(value>80 && value<120){									// Up
     ab4:	cb 01       	movw	r24, r22
     ab6:	81 55       	subi	r24, 0x51	; 81
     ab8:	91 09       	sbc	r25, r1
     aba:	87 97       	sbiw	r24, 0x27	; 39
     abc:	80 f4       	brcc	.+32     	; 0xade <ReadKeys+0x3c>
		if(newset<1||newset>50){								// If the setting is zero and we push the up button, we return to setting 5
     abe:	df ef       	ldi	r29, 0xFF	; 255
     ac0:	dc 0f       	add	r29, r28
     ac2:	d2 33       	cpi	r29, 0x32	; 50
     ac4:	08 f0       	brcs	.+2      	; 0xac8 <ReadKeys+0x26>
			newset= 5;
     ac6:	d5 e0       	ldi	r29, 0x05	; 5
		}
		else{													// If not we decrease the value by one
			newset = newset -1;									//UP is pressed 120. Change the display setting.
		}
		lcd_gotoxy(0,0);										// We go to 0,0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("                                                                                                       "); //Resets screen
     ad4:	81 e6       	ldi	r24, 0x61	; 97
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <ReadKeys+0x3e>
}
/*Fuction definition.............................................................................................................*/

uint8_t ReadKeys( uint8_t setting, int value, uint16_t data[]){
	
	uint8_t newset = setting;									// We set a new variable called newsetting with will take the setting value
     ade:	dc 2f       	mov	r29, r28
		}
		lcd_gotoxy(0,0);										// We go to 0,0
		lcd_puts("                                                                                                       "); //Resets screen
	}
	
	if(value>200 && value< 300){								// DOWN
     ae0:	c8 01       	movw	r24, r16
     ae2:	89 5c       	subi	r24, 0xC9	; 201
     ae4:	91 09       	sbc	r25, r1
     ae6:	83 36       	cpi	r24, 0x63	; 99
     ae8:	91 05       	cpc	r25, r1
     aea:	80 f4       	brcc	.+32     	; 0xb0c <ReadKeys+0x6a>
		if(newset>5){											// If newset is 5 and we push the button the value will increase by one, and enter
     aec:	d6 30       	cpi	r29, 0x06	; 6
     aee:	18 f4       	brcc	.+6      	; 0xaf6 <ReadKeys+0x54>
			newset = 0;											// The newset will be 0
		}
		else{													// If not we increase the value by one
			newset= setting + 1;
     af0:	d1 e0       	ldi	r29, 0x01	; 1
     af2:	dc 0f       	add	r29, r28
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <ReadKeys+0x56>
		lcd_puts("                                                                                                       "); //Resets screen
	}
	
	if(value>200 && value< 300){								// DOWN
		if(newset>5){											// If newset is 5 and we push the button the value will increase by one, and enter
			newset = 0;											// The newset will be 0
     af6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else{													// If not we increase the value by one
			newset= setting + 1;
		}
		lcd_gotoxy(0,0);										// We go to 0,0 position
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_gotoxy>
		lcd_puts("												                                                        "); //Resets screen
     b04:	89 ec       	ldi	r24, 0xC9	; 201
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_puts>
	}
	
	if(value>390 && value<430){									// LEFT, When left button is pressed 410.
     b0c:	c8 01       	movw	r24, r16
     b0e:	87 58       	subi	r24, 0x87	; 135
     b10:	91 40       	sbci	r25, 0x01	; 1
     b12:	87 97       	sbiw	r24, 0x27	; 39
     b14:	b0 f4       	brcc	.+44     	; 0xb42 <ReadKeys+0xa0>
		if (setting==1 && data[setting] != 0 ){					// If we are in the setting 1 and the value is not zero
     b16:	c1 30       	cpi	r28, 0x01	; 1
     b18:	79 f4       	brne	.+30     	; 0xb38 <ReadKeys+0x96>
     b1a:	ec 2f       	mov	r30, r28
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ee 0d       	add	r30, r14
     b24:	ff 1d       	adc	r31, r15
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	29 f0       	breq	.+10     	; 0xb38 <ReadKeys+0x96>
			data[setting]=data[setting]-5;						// Decrease the value in jumps of 5
     b2e:	05 97       	sbiw	r24, 0x05	; 5
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	80 83       	st	Z, r24
			ValveSet(data[setting]);							// Set the value
     b34:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ValveSet>
		}
		if(setting==2){											// If we are in the setting 2, pump state, we toggle the pump
     b38:	c2 30       	cpi	r28, 0x02	; 2
     b3a:	19 f4       	brne	.+6      	; 0xb42 <ReadKeys+0xa0>
			PumpToggle(data);
     b3c:	c7 01       	movw	r24, r14
     b3e:	0e 94 c3 05 	call	0xb86	; 0xb86 <PumpToggle>
		}
	}
	
	if(value < 80){												// Right
     b42:	00 35       	cpi	r16, 0x50	; 80
     b44:	11 05       	cpc	r17, r1
     b46:	bc f4       	brge	.+46     	; 0xb76 <ReadKeys+0xd4>
		if(data[setting] != 100 && setting==1){					// If we are in setting 2, the valve state, and the value is not 100
     b48:	ec 2f       	mov	r30, r28
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	ee 0d       	add	r30, r14
     b52:	ff 1d       	adc	r31, r15
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	84 36       	cpi	r24, 0x64	; 100
     b5a:	91 05       	cpc	r25, r1
     b5c:	39 f0       	breq	.+14     	; 0xb6c <ReadKeys+0xca>
     b5e:	c1 30       	cpi	r28, 0x01	; 1
     b60:	29 f4       	brne	.+10     	; 0xb6c <ReadKeys+0xca>
			data[setting]=data[setting]+5;						// If it is possible to edit increase the value
     b62:	05 96       	adiw	r24, 0x05	; 5
     b64:	91 83       	std	Z+1, r25	; 0x01
     b66:	80 83       	st	Z, r24
			ValveSet(data[setting]);							// We set the valve
     b68:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ValveSet>
		}
		if(setting==2){											// If we are in the pump set
     b6c:	c2 30       	cpi	r28, 0x02	; 2
     b6e:	19 f4       	brne	.+6      	; 0xb76 <ReadKeys+0xd4>
			PumpToggle(data);									// We set the pump
     b70:	c7 01       	movw	r24, r14
     b72:	0e 94 c3 05 	call	0xb86	; 0xb86 <PumpToggle>
		}
	}
	return newset;												// We return the new setting
	
     b76:	8d 2f       	mov	r24, r29
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <PumpToggle>:
#include <math.h>			// Math library. For calculations like round
#include <stdio.h>			// Include std. library file
#include "gpio.h"			// GPIO library from class.	

void PumpToggle(uint16_t data[]){
	data[2]=!data[2];						// We toggle the value of the data matrix form setting 2
     b86:	fc 01       	movw	r30, r24
     b88:	44 81       	ldd	r20, Z+4	; 0x04
     b8a:	55 81       	ldd	r21, Z+5	; 0x05
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	45 2b       	or	r20, r21
     b92:	11 f0       	breq	.+4      	; 0xb98 <PumpToggle+0x12>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	35 83       	std	Z+5, r19	; 0x05
     b9c:	24 83       	std	Z+4, r18	; 0x04
	if(data[2]==1){							// If it is equal to 1
     b9e:	21 30       	cpi	r18, 0x01	; 1
     ba0:	31 05       	cpc	r19, r1
     ba2:	31 f4       	brne	.+12     	; 0xbb0 <PumpToggle+0x2a>
		GPIO_write_high(&PORTD,1);			// We activate the pump
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	8b e2       	ldi	r24, 0x2B	; 43
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 ca 00 	call	0x194	; 0x194 <GPIO_write_high>
     bae:	08 95       	ret
	}
	else{									// if it is not 1
		GPIO_write_low(&PORTD,1);			// We deactivate the pump
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	8b e2       	ldi	r24, 0x2B	; 43
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 bd 00 	call	0x17a	; 0x17a <GPIO_write_low>
     bba:	08 95       	ret

00000bbc <setupServo>:




void setupServo( uint8_t porcentage)
{
     bbc:	cf 93       	push	r28
     bbe:	c8 2f       	mov	r28, r24
	lcd_init(LCD_DISP_OFF);															// We initialize the lcd value
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_init>
	DDRD |= (1<<PD5);																// Fast PWM output at OC0B pin
     bc6:	8a b1       	in	r24, 0x0a	; 10
     bc8:	80 62       	ori	r24, 0x20	; 32
     bca:	8a b9       	out	0x0a, r24	; 10
	
	OCR0A  = 255;																	// Frequency 1 kHz
     bcc:	8f ef       	ldi	r24, 0xFF	; 255
     bce:	87 bd       	out	0x27, r24	; 39
																					// Top Value of 200(must be equal or greater than Duty Cycle)
	OCR0B = round(255-256*(0.030517*porcentage+9.15527)/100);						// Duty cycle of 75%
     bd0:	6c 2f       	mov	r22, r28
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 7d 07 	call	0xefa	; 0xefa <__floatsisf>
     bdc:	2a ec       	ldi	r18, 0xCA	; 202
     bde:	3e ef       	ldi	r19, 0xFE	; 254
     be0:	49 ef       	ldi	r20, 0xF9	; 249
     be2:	5c e3       	ldi	r21, 0x3C	; 60
     be4:	0e 94 09 08 	call	0x1012	; 0x1012 <__mulsf3>
     be8:	2c ef       	ldi	r18, 0xFC	; 252
     bea:	3b e7       	ldi	r19, 0x7B	; 123
     bec:	42 e1       	ldi	r20, 0x12	; 18
     bee:	51 e4       	ldi	r21, 0x41	; 65
     bf0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__addsf3>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	53 e4       	ldi	r21, 0x43	; 67
     bfc:	0e 94 09 08 	call	0x1012	; 0x1012 <__mulsf3>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	48 ec       	ldi	r20, 0xC8	; 200
     c06:	52 e4       	ldi	r21, 0x42	; 66
     c08:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__divsf3>
     c0c:	9b 01       	movw	r18, r22
     c0e:	ac 01       	movw	r20, r24
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	8f e7       	ldi	r24, 0x7F	; 127
     c16:	93 e4       	ldi	r25, 0x43	; 67
     c18:	0e 94 6d 06 	call	0xcda	; 0xcda <__subsf3>
     c1c:	0e 94 76 08 	call	0x10ec	; 0x10ec <round>
     c20:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fixunssfsi>
     c24:	68 bd       	out	0x28, r22	; 40
	TCCR0A |= (1<<COM0B1) | (1<<COM0B0) | (1<<WGM01) | (1<<WGM00);					// Inverting Fast PWM mode 7
     c26:	84 b5       	in	r24, 0x24	; 36
     c28:	83 63       	ori	r24, 0x33	; 51
     c2a:	84 bd       	out	0x24, r24	; 36
	//TCCR0A |= (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);	//Non-Inverting Fast PWM mode 7
	TCCR0B |= (1<<WGM02) | (1<<CS00);
     c2c:	85 b5       	in	r24, 0x25	; 37
     c2e:	89 60       	ori	r24, 0x09	; 9
     c30:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<WGM02) | (1<<CS02);												// No-Prescalar
     c32:	85 b5       	in	r24, 0x25	; 37
     c34:	8c 60       	ori	r24, 0x0C	; 12
     c36:	85 bd       	out	0x25, r24	; 37

}
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
     c3c:	87 b1       	in	r24, 0x07	; 7
     c3e:	8f 7c       	andi	r24, 0xCF	; 207
     c40:	87 b9       	out	0x07, r24	; 7
     c42:	88 b1       	in	r24, 0x08	; 8
     c44:	80 63       	ori	r24, 0x30	; 48
     c46:	88 b9       	out	0x08, r24	; 8
     c48:	e9 eb       	ldi	r30, 0xB9	; 185
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8c 7f       	andi	r24, 0xFC	; 252
     c50:	80 83       	st	Z, r24
     c52:	88 e9       	ldi	r24, 0x98	; 152
     c54:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     c58:	08 95       	ret

00000c5a <twi_start>:
     c5a:	94 ea       	ldi	r25, 0xA4	; 164
     c5c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c60:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c64:	99 23       	and	r25, r25
     c66:	e4 f7       	brge	.-8      	; 0xc60 <twi_start+0x6>
     c68:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     c6c:	84 e8       	ldi	r24, 0x84	; 132
     c6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c72:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c76:	88 23       	and	r24, r24
     c78:	e4 f7       	brge	.-8      	; 0xc72 <twi_start+0x18>
     c7a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c7e:	88 7f       	andi	r24, 0xF8	; 248
     c80:	88 31       	cpi	r24, 0x18	; 24
     c82:	21 f0       	breq	.+8      	; 0xc8c <twi_start+0x32>
     c84:	80 34       	cpi	r24, 0x40	; 64
     c86:	21 f4       	brne	.+8      	; 0xc90 <twi_start+0x36>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	08 95       	ret
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	08 95       	ret

00000c94 <twi_write>:
     c94:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     c98:	84 e8       	ldi	r24, 0x84	; 132
     c9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c9e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ca2:	88 23       	and	r24, r24
     ca4:	e4 f7       	brge	.-8      	; 0xc9e <twi_write+0xa>
     ca6:	08 95       	ret

00000ca8 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
     ca8:	84 e8       	ldi	r24, 0x84	; 132
     caa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
     cae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cb2:	88 23       	and	r24, r24
     cb4:	e4 f7       	brge	.-8      	; 0xcae <twi_read_nack+0x6>
    return (TWDR);
     cb6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     cba:	08 95       	ret

00000cbc <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     cbc:	84 e9       	ldi	r24, 0x94	; 148
     cbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cc2:	08 95       	ret

00000cc4 <ValveSet>:
#include <stdlib.h>         // C library. Needed for conversion function
#include <math.h>			// Math library. For calculations like round
#include "servo.h"			// Library for controlling the servo

void ValveSet(uint8_t openper){						// Set the opening range of valve % form
	TIM1_stop();									// We stop TIM1
     cc4:	e1 e8       	ldi	r30, 0x81	; 129
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	90 81       	ld	r25, Z
     cca:	98 7f       	andi	r25, 0xF8	; 248
     ccc:	90 83       	st	Z, r25
	setupServo(openper);							// We set up the servo
     cce:	0e 94 de 05 	call	0xbbc	; 0xbbc <setupServo>
	lcd_init(LCD_DISP_ON);							// We initalize again the lcd
     cd2:	8c e0       	ldi	r24, 0x0C	; 12
     cd4:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_init>
     cd8:	08 95       	ret

00000cda <__subsf3>:
     cda:	50 58       	subi	r21, 0x80	; 128

00000cdc <__addsf3>:
     cdc:	bb 27       	eor	r27, r27
     cde:	aa 27       	eor	r26, r26
     ce0:	0e 94 85 06 	call	0xd0a	; 0xd0a <__addsf3x>
     ce4:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_round>
     ce8:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_pscA>
     cec:	38 f0       	brcs	.+14     	; 0xcfc <__addsf3+0x20>
     cee:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_pscB>
     cf2:	20 f0       	brcs	.+8      	; 0xcfc <__addsf3+0x20>
     cf4:	39 f4       	brne	.+14     	; 0xd04 <__addsf3+0x28>
     cf6:	9f 3f       	cpi	r25, 0xFF	; 255
     cf8:	19 f4       	brne	.+6      	; 0xd00 <__addsf3+0x24>
     cfa:	26 f4       	brtc	.+8      	; 0xd04 <__addsf3+0x28>
     cfc:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>
     d00:	0e f4       	brtc	.+2      	; 0xd04 <__addsf3+0x28>
     d02:	e0 95       	com	r30
     d04:	e7 fb       	bst	r30, 7
     d06:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>

00000d0a <__addsf3x>:
     d0a:	e9 2f       	mov	r30, r25
     d0c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_split3>
     d10:	58 f3       	brcs	.-42     	; 0xce8 <__addsf3+0xc>
     d12:	ba 17       	cp	r27, r26
     d14:	62 07       	cpc	r22, r18
     d16:	73 07       	cpc	r23, r19
     d18:	84 07       	cpc	r24, r20
     d1a:	95 07       	cpc	r25, r21
     d1c:	20 f0       	brcs	.+8      	; 0xd26 <__addsf3x+0x1c>
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__addsf3x+0x34>
     d20:	a6 f5       	brtc	.+104    	; 0xd8a <__addsf3x+0x80>
     d22:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_zero>
     d26:	0e f4       	brtc	.+2      	; 0xd2a <__addsf3x+0x20>
     d28:	e0 95       	com	r30
     d2a:	0b 2e       	mov	r0, r27
     d2c:	ba 2f       	mov	r27, r26
     d2e:	a0 2d       	mov	r26, r0
     d30:	0b 01       	movw	r0, r22
     d32:	b9 01       	movw	r22, r18
     d34:	90 01       	movw	r18, r0
     d36:	0c 01       	movw	r0, r24
     d38:	ca 01       	movw	r24, r20
     d3a:	a0 01       	movw	r20, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	ff 27       	eor	r31, r31
     d40:	59 1b       	sub	r21, r25
     d42:	99 f0       	breq	.+38     	; 0xd6a <__addsf3x+0x60>
     d44:	59 3f       	cpi	r21, 0xF9	; 249
     d46:	50 f4       	brcc	.+20     	; 0xd5c <__addsf3x+0x52>
     d48:	50 3e       	cpi	r21, 0xE0	; 224
     d4a:	68 f1       	brcs	.+90     	; 0xda6 <__addsf3x+0x9c>
     d4c:	1a 16       	cp	r1, r26
     d4e:	f0 40       	sbci	r31, 0x00	; 0
     d50:	a2 2f       	mov	r26, r18
     d52:	23 2f       	mov	r18, r19
     d54:	34 2f       	mov	r19, r20
     d56:	44 27       	eor	r20, r20
     d58:	58 5f       	subi	r21, 0xF8	; 248
     d5a:	f3 cf       	rjmp	.-26     	; 0xd42 <__addsf3x+0x38>
     d5c:	46 95       	lsr	r20
     d5e:	37 95       	ror	r19
     d60:	27 95       	ror	r18
     d62:	a7 95       	ror	r26
     d64:	f0 40       	sbci	r31, 0x00	; 0
     d66:	53 95       	inc	r21
     d68:	c9 f7       	brne	.-14     	; 0xd5c <__addsf3x+0x52>
     d6a:	7e f4       	brtc	.+30     	; 0xd8a <__addsf3x+0x80>
     d6c:	1f 16       	cp	r1, r31
     d6e:	ba 0b       	sbc	r27, r26
     d70:	62 0b       	sbc	r22, r18
     d72:	73 0b       	sbc	r23, r19
     d74:	84 0b       	sbc	r24, r20
     d76:	ba f0       	brmi	.+46     	; 0xda6 <__addsf3x+0x9c>
     d78:	91 50       	subi	r25, 0x01	; 1
     d7a:	a1 f0       	breq	.+40     	; 0xda4 <__addsf3x+0x9a>
     d7c:	ff 0f       	add	r31, r31
     d7e:	bb 1f       	adc	r27, r27
     d80:	66 1f       	adc	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	c2 f7       	brpl	.-16     	; 0xd78 <__addsf3x+0x6e>
     d88:	0e c0       	rjmp	.+28     	; 0xda6 <__addsf3x+0x9c>
     d8a:	ba 0f       	add	r27, r26
     d8c:	62 1f       	adc	r22, r18
     d8e:	73 1f       	adc	r23, r19
     d90:	84 1f       	adc	r24, r20
     d92:	48 f4       	brcc	.+18     	; 0xda6 <__addsf3x+0x9c>
     d94:	87 95       	ror	r24
     d96:	77 95       	ror	r23
     d98:	67 95       	ror	r22
     d9a:	b7 95       	ror	r27
     d9c:	f7 95       	ror	r31
     d9e:	9e 3f       	cpi	r25, 0xFE	; 254
     da0:	08 f0       	brcs	.+2      	; 0xda4 <__addsf3x+0x9a>
     da2:	b0 cf       	rjmp	.-160    	; 0xd04 <__addsf3+0x28>
     da4:	93 95       	inc	r25
     da6:	88 0f       	add	r24, r24
     da8:	08 f0       	brcs	.+2      	; 0xdac <__addsf3x+0xa2>
     daa:	99 27       	eor	r25, r25
     dac:	ee 0f       	add	r30, r30
     dae:	97 95       	ror	r25
     db0:	87 95       	ror	r24
     db2:	08 95       	ret

00000db4 <__divsf3>:
     db4:	0e 94 ee 06 	call	0xddc	; 0xddc <__divsf3x>
     db8:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_round>
     dbc:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_pscB>
     dc0:	58 f0       	brcs	.+22     	; 0xdd8 <__divsf3+0x24>
     dc2:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_pscA>
     dc6:	40 f0       	brcs	.+16     	; 0xdd8 <__divsf3+0x24>
     dc8:	29 f4       	brne	.+10     	; 0xdd4 <__divsf3+0x20>
     dca:	5f 3f       	cpi	r21, 0xFF	; 255
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <__divsf3+0x24>
     dce:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
     dd2:	51 11       	cpse	r21, r1
     dd4:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>
     dd8:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>

00000ddc <__divsf3x>:
     ddc:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_split3>
     de0:	68 f3       	brcs	.-38     	; 0xdbc <__divsf3+0x8>

00000de2 <__divsf3_pse>:
     de2:	99 23       	and	r25, r25
     de4:	b1 f3       	breq	.-20     	; 0xdd2 <__divsf3+0x1e>
     de6:	55 23       	and	r21, r21
     de8:	91 f3       	breq	.-28     	; 0xdce <__divsf3+0x1a>
     dea:	95 1b       	sub	r25, r21
     dec:	55 0b       	sbc	r21, r21
     dee:	bb 27       	eor	r27, r27
     df0:	aa 27       	eor	r26, r26
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	38 f0       	brcs	.+14     	; 0xe08 <__divsf3_pse+0x26>
     dfa:	9f 5f       	subi	r25, 0xFF	; 255
     dfc:	5f 4f       	sbci	r21, 0xFF	; 255
     dfe:	22 0f       	add	r18, r18
     e00:	33 1f       	adc	r19, r19
     e02:	44 1f       	adc	r20, r20
     e04:	aa 1f       	adc	r26, r26
     e06:	a9 f3       	breq	.-22     	; 0xdf2 <__divsf3_pse+0x10>
     e08:	35 d0       	rcall	.+106    	; 0xe74 <__divsf3_pse+0x92>
     e0a:	0e 2e       	mov	r0, r30
     e0c:	3a f0       	brmi	.+14     	; 0xe1c <__divsf3_pse+0x3a>
     e0e:	e0 e8       	ldi	r30, 0x80	; 128
     e10:	32 d0       	rcall	.+100    	; 0xe76 <__divsf3_pse+0x94>
     e12:	91 50       	subi	r25, 0x01	; 1
     e14:	50 40       	sbci	r21, 0x00	; 0
     e16:	e6 95       	lsr	r30
     e18:	00 1c       	adc	r0, r0
     e1a:	ca f7       	brpl	.-14     	; 0xe0e <__divsf3_pse+0x2c>
     e1c:	2b d0       	rcall	.+86     	; 0xe74 <__divsf3_pse+0x92>
     e1e:	fe 2f       	mov	r31, r30
     e20:	29 d0       	rcall	.+82     	; 0xe74 <__divsf3_pse+0x92>
     e22:	66 0f       	add	r22, r22
     e24:	77 1f       	adc	r23, r23
     e26:	88 1f       	adc	r24, r24
     e28:	bb 1f       	adc	r27, r27
     e2a:	26 17       	cp	r18, r22
     e2c:	37 07       	cpc	r19, r23
     e2e:	48 07       	cpc	r20, r24
     e30:	ab 07       	cpc	r26, r27
     e32:	b0 e8       	ldi	r27, 0x80	; 128
     e34:	09 f0       	breq	.+2      	; 0xe38 <__divsf3_pse+0x56>
     e36:	bb 0b       	sbc	r27, r27
     e38:	80 2d       	mov	r24, r0
     e3a:	bf 01       	movw	r22, r30
     e3c:	ff 27       	eor	r31, r31
     e3e:	93 58       	subi	r25, 0x83	; 131
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	3a f0       	brmi	.+14     	; 0xe52 <__divsf3_pse+0x70>
     e44:	9e 3f       	cpi	r25, 0xFE	; 254
     e46:	51 05       	cpc	r21, r1
     e48:	78 f0       	brcs	.+30     	; 0xe68 <__divsf3_pse+0x86>
     e4a:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
     e4e:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>
     e52:	5f 3f       	cpi	r21, 0xFF	; 255
     e54:	e4 f3       	brlt	.-8      	; 0xe4e <__divsf3_pse+0x6c>
     e56:	98 3e       	cpi	r25, 0xE8	; 232
     e58:	d4 f3       	brlt	.-12     	; 0xe4e <__divsf3_pse+0x6c>
     e5a:	86 95       	lsr	r24
     e5c:	77 95       	ror	r23
     e5e:	67 95       	ror	r22
     e60:	b7 95       	ror	r27
     e62:	f7 95       	ror	r31
     e64:	9f 5f       	subi	r25, 0xFF	; 255
     e66:	c9 f7       	brne	.-14     	; 0xe5a <__divsf3_pse+0x78>
     e68:	88 0f       	add	r24, r24
     e6a:	91 1d       	adc	r25, r1
     e6c:	96 95       	lsr	r25
     e6e:	87 95       	ror	r24
     e70:	97 f9       	bld	r25, 7
     e72:	08 95       	ret
     e74:	e1 e0       	ldi	r30, 0x01	; 1
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	bb 1f       	adc	r27, r27
     e7e:	62 17       	cp	r22, r18
     e80:	73 07       	cpc	r23, r19
     e82:	84 07       	cpc	r24, r20
     e84:	ba 07       	cpc	r27, r26
     e86:	20 f0       	brcs	.+8      	; 0xe90 <__divsf3_pse+0xae>
     e88:	62 1b       	sub	r22, r18
     e8a:	73 0b       	sbc	r23, r19
     e8c:	84 0b       	sbc	r24, r20
     e8e:	ba 0b       	sbc	r27, r26
     e90:	ee 1f       	adc	r30, r30
     e92:	88 f7       	brcc	.-30     	; 0xe76 <__divsf3_pse+0x94>
     e94:	e0 95       	com	r30
     e96:	08 95       	ret

00000e98 <__fixunssfsi>:
     e98:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_splitA>
     e9c:	88 f0       	brcs	.+34     	; 0xec0 <__fixunssfsi+0x28>
     e9e:	9f 57       	subi	r25, 0x7F	; 127
     ea0:	98 f0       	brcs	.+38     	; 0xec8 <__fixunssfsi+0x30>
     ea2:	b9 2f       	mov	r27, r25
     ea4:	99 27       	eor	r25, r25
     ea6:	b7 51       	subi	r27, 0x17	; 23
     ea8:	b0 f0       	brcs	.+44     	; 0xed6 <__fixunssfsi+0x3e>
     eaa:	e1 f0       	breq	.+56     	; 0xee4 <__fixunssfsi+0x4c>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	1a f0       	brmi	.+6      	; 0xebc <__fixunssfsi+0x24>
     eb6:	ba 95       	dec	r27
     eb8:	c9 f7       	brne	.-14     	; 0xeac <__fixunssfsi+0x14>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <__fixunssfsi+0x4c>
     ebc:	b1 30       	cpi	r27, 0x01	; 1
     ebe:	91 f0       	breq	.+36     	; 0xee4 <__fixunssfsi+0x4c>
     ec0:	0e 94 02 08 	call	0x1004	; 0x1004 <__fp_zero>
     ec4:	b1 e0       	ldi	r27, 0x01	; 1
     ec6:	08 95       	ret
     ec8:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__fp_zero>
     ecc:	67 2f       	mov	r22, r23
     ece:	78 2f       	mov	r23, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	b8 5f       	subi	r27, 0xF8	; 248
     ed4:	39 f0       	breq	.+14     	; 0xee4 <__fixunssfsi+0x4c>
     ed6:	b9 3f       	cpi	r27, 0xF9	; 249
     ed8:	cc f3       	brlt	.-14     	; 0xecc <__fixunssfsi+0x34>
     eda:	86 95       	lsr	r24
     edc:	77 95       	ror	r23
     ede:	67 95       	ror	r22
     ee0:	b3 95       	inc	r27
     ee2:	d9 f7       	brne	.-10     	; 0xeda <__fixunssfsi+0x42>
     ee4:	3e f4       	brtc	.+14     	; 0xef4 <__fixunssfsi+0x5c>
     ee6:	90 95       	com	r25
     ee8:	80 95       	com	r24
     eea:	70 95       	com	r23
     eec:	61 95       	neg	r22
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	08 95       	ret

00000ef6 <__floatunsisf>:
     ef6:	e8 94       	clt
     ef8:	09 c0       	rjmp	.+18     	; 0xf0c <__floatsisf+0x12>

00000efa <__floatsisf>:
     efa:	97 fb       	bst	r25, 7
     efc:	3e f4       	brtc	.+14     	; 0xf0c <__floatsisf+0x12>
     efe:	90 95       	com	r25
     f00:	80 95       	com	r24
     f02:	70 95       	com	r23
     f04:	61 95       	neg	r22
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	8f 4f       	sbci	r24, 0xFF	; 255
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	99 23       	and	r25, r25
     f0e:	a9 f0       	breq	.+42     	; 0xf3a <__floatsisf+0x40>
     f10:	f9 2f       	mov	r31, r25
     f12:	96 e9       	ldi	r25, 0x96	; 150
     f14:	bb 27       	eor	r27, r27
     f16:	93 95       	inc	r25
     f18:	f6 95       	lsr	r31
     f1a:	87 95       	ror	r24
     f1c:	77 95       	ror	r23
     f1e:	67 95       	ror	r22
     f20:	b7 95       	ror	r27
     f22:	f1 11       	cpse	r31, r1
     f24:	f8 cf       	rjmp	.-16     	; 0xf16 <__floatsisf+0x1c>
     f26:	fa f4       	brpl	.+62     	; 0xf66 <__floatsisf+0x6c>
     f28:	bb 0f       	add	r27, r27
     f2a:	11 f4       	brne	.+4      	; 0xf30 <__floatsisf+0x36>
     f2c:	60 ff       	sbrs	r22, 0
     f2e:	1b c0       	rjmp	.+54     	; 0xf66 <__floatsisf+0x6c>
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	8f 4f       	sbci	r24, 0xFF	; 255
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	16 c0       	rjmp	.+44     	; 0xf66 <__floatsisf+0x6c>
     f3a:	88 23       	and	r24, r24
     f3c:	11 f0       	breq	.+4      	; 0xf42 <__floatsisf+0x48>
     f3e:	96 e9       	ldi	r25, 0x96	; 150
     f40:	11 c0       	rjmp	.+34     	; 0xf64 <__floatsisf+0x6a>
     f42:	77 23       	and	r23, r23
     f44:	21 f0       	breq	.+8      	; 0xf4e <__floatsisf+0x54>
     f46:	9e e8       	ldi	r25, 0x8E	; 142
     f48:	87 2f       	mov	r24, r23
     f4a:	76 2f       	mov	r23, r22
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <__floatsisf+0x5e>
     f4e:	66 23       	and	r22, r22
     f50:	71 f0       	breq	.+28     	; 0xf6e <__floatsisf+0x74>
     f52:	96 e8       	ldi	r25, 0x86	; 134
     f54:	86 2f       	mov	r24, r22
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	2a f0       	brmi	.+10     	; 0xf66 <__floatsisf+0x6c>
     f5c:	9a 95       	dec	r25
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	da f7       	brpl	.-10     	; 0xf5c <__floatsisf+0x62>
     f66:	88 0f       	add	r24, r24
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret

00000f70 <__fp_inf>:
     f70:	97 f9       	bld	r25, 7
     f72:	9f 67       	ori	r25, 0x7F	; 127
     f74:	80 e8       	ldi	r24, 0x80	; 128
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	08 95       	ret

00000f7c <__fp_nan>:
     f7c:	9f ef       	ldi	r25, 0xFF	; 255
     f7e:	80 ec       	ldi	r24, 0xC0	; 192
     f80:	08 95       	ret

00000f82 <__fp_pscA>:
     f82:	00 24       	eor	r0, r0
     f84:	0a 94       	dec	r0
     f86:	16 16       	cp	r1, r22
     f88:	17 06       	cpc	r1, r23
     f8a:	18 06       	cpc	r1, r24
     f8c:	09 06       	cpc	r0, r25
     f8e:	08 95       	ret

00000f90 <__fp_pscB>:
     f90:	00 24       	eor	r0, r0
     f92:	0a 94       	dec	r0
     f94:	12 16       	cp	r1, r18
     f96:	13 06       	cpc	r1, r19
     f98:	14 06       	cpc	r1, r20
     f9a:	05 06       	cpc	r0, r21
     f9c:	08 95       	ret

00000f9e <__fp_round>:
     f9e:	09 2e       	mov	r0, r25
     fa0:	03 94       	inc	r0
     fa2:	00 0c       	add	r0, r0
     fa4:	11 f4       	brne	.+4      	; 0xfaa <__fp_round+0xc>
     fa6:	88 23       	and	r24, r24
     fa8:	52 f0       	brmi	.+20     	; 0xfbe <__fp_round+0x20>
     faa:	bb 0f       	add	r27, r27
     fac:	40 f4       	brcc	.+16     	; 0xfbe <__fp_round+0x20>
     fae:	bf 2b       	or	r27, r31
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <__fp_round+0x18>
     fb2:	60 ff       	sbrs	r22, 0
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <__fp_round+0x20>
     fb6:	6f 5f       	subi	r22, 0xFF	; 255
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	8f 4f       	sbci	r24, 0xFF	; 255
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__fp_split3>:
     fc0:	57 fd       	sbrc	r21, 7
     fc2:	90 58       	subi	r25, 0x80	; 128
     fc4:	44 0f       	add	r20, r20
     fc6:	55 1f       	adc	r21, r21
     fc8:	59 f0       	breq	.+22     	; 0xfe0 <__fp_splitA+0x10>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	71 f0       	breq	.+28     	; 0xfea <__fp_splitA+0x1a>
     fce:	47 95       	ror	r20

00000fd0 <__fp_splitA>:
     fd0:	88 0f       	add	r24, r24
     fd2:	97 fb       	bst	r25, 7
     fd4:	99 1f       	adc	r25, r25
     fd6:	61 f0       	breq	.+24     	; 0xff0 <__fp_splitA+0x20>
     fd8:	9f 3f       	cpi	r25, 0xFF	; 255
     fda:	79 f0       	breq	.+30     	; 0xffa <__fp_splitA+0x2a>
     fdc:	87 95       	ror	r24
     fde:	08 95       	ret
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	14 06       	cpc	r1, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	f2 cf       	rjmp	.-28     	; 0xfce <__fp_split3+0xe>
     fea:	46 95       	lsr	r20
     fec:	f1 df       	rcall	.-30     	; 0xfd0 <__fp_splitA>
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <__fp_splitA+0x30>
     ff0:	16 16       	cp	r1, r22
     ff2:	17 06       	cpc	r1, r23
     ff4:	18 06       	cpc	r1, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	f1 cf       	rjmp	.-30     	; 0xfdc <__fp_splitA+0xc>
     ffa:	86 95       	lsr	r24
     ffc:	71 05       	cpc	r23, r1
     ffe:	61 05       	cpc	r22, r1
    1000:	08 94       	sec
    1002:	08 95       	ret

00001004 <__fp_zero>:
    1004:	e8 94       	clt

00001006 <__fp_szero>:
    1006:	bb 27       	eor	r27, r27
    1008:	66 27       	eor	r22, r22
    100a:	77 27       	eor	r23, r23
    100c:	cb 01       	movw	r24, r22
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <__mulsf3>:
    1012:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3x>
    1016:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__fp_round>
    101a:	0e 94 c1 07 	call	0xf82	; 0xf82 <__fp_pscA>
    101e:	38 f0       	brcs	.+14     	; 0x102e <__mulsf3+0x1c>
    1020:	0e 94 c8 07 	call	0xf90	; 0xf90 <__fp_pscB>
    1024:	20 f0       	brcs	.+8      	; 0x102e <__mulsf3+0x1c>
    1026:	95 23       	and	r25, r21
    1028:	11 f0       	breq	.+4      	; 0x102e <__mulsf3+0x1c>
    102a:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
    102e:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_nan>
    1032:	11 24       	eor	r1, r1
    1034:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>

00001038 <__mulsf3x>:
    1038:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__fp_split3>
    103c:	70 f3       	brcs	.-36     	; 0x101a <__mulsf3+0x8>

0000103e <__mulsf3_pse>:
    103e:	95 9f       	mul	r25, r21
    1040:	c1 f3       	breq	.-16     	; 0x1032 <__mulsf3+0x20>
    1042:	95 0f       	add	r25, r21
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	55 1f       	adc	r21, r21
    1048:	62 9f       	mul	r22, r18
    104a:	f0 01       	movw	r30, r0
    104c:	72 9f       	mul	r23, r18
    104e:	bb 27       	eor	r27, r27
    1050:	f0 0d       	add	r31, r0
    1052:	b1 1d       	adc	r27, r1
    1054:	63 9f       	mul	r22, r19
    1056:	aa 27       	eor	r26, r26
    1058:	f0 0d       	add	r31, r0
    105a:	b1 1d       	adc	r27, r1
    105c:	aa 1f       	adc	r26, r26
    105e:	64 9f       	mul	r22, r20
    1060:	66 27       	eor	r22, r22
    1062:	b0 0d       	add	r27, r0
    1064:	a1 1d       	adc	r26, r1
    1066:	66 1f       	adc	r22, r22
    1068:	82 9f       	mul	r24, r18
    106a:	22 27       	eor	r18, r18
    106c:	b0 0d       	add	r27, r0
    106e:	a1 1d       	adc	r26, r1
    1070:	62 1f       	adc	r22, r18
    1072:	73 9f       	mul	r23, r19
    1074:	b0 0d       	add	r27, r0
    1076:	a1 1d       	adc	r26, r1
    1078:	62 1f       	adc	r22, r18
    107a:	83 9f       	mul	r24, r19
    107c:	a0 0d       	add	r26, r0
    107e:	61 1d       	adc	r22, r1
    1080:	22 1f       	adc	r18, r18
    1082:	74 9f       	mul	r23, r20
    1084:	33 27       	eor	r19, r19
    1086:	a0 0d       	add	r26, r0
    1088:	61 1d       	adc	r22, r1
    108a:	23 1f       	adc	r18, r19
    108c:	84 9f       	mul	r24, r20
    108e:	60 0d       	add	r22, r0
    1090:	21 1d       	adc	r18, r1
    1092:	82 2f       	mov	r24, r18
    1094:	76 2f       	mov	r23, r22
    1096:	6a 2f       	mov	r22, r26
    1098:	11 24       	eor	r1, r1
    109a:	9f 57       	subi	r25, 0x7F	; 127
    109c:	50 40       	sbci	r21, 0x00	; 0
    109e:	9a f0       	brmi	.+38     	; 0x10c6 <__mulsf3_pse+0x88>
    10a0:	f1 f0       	breq	.+60     	; 0x10de <__mulsf3_pse+0xa0>
    10a2:	88 23       	and	r24, r24
    10a4:	4a f0       	brmi	.+18     	; 0x10b8 <__mulsf3_pse+0x7a>
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	bb 1f       	adc	r27, r27
    10ac:	66 1f       	adc	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	91 50       	subi	r25, 0x01	; 1
    10b4:	50 40       	sbci	r21, 0x00	; 0
    10b6:	a9 f7       	brne	.-22     	; 0x10a2 <__mulsf3_pse+0x64>
    10b8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ba:	51 05       	cpc	r21, r1
    10bc:	80 f0       	brcs	.+32     	; 0x10de <__mulsf3_pse+0xa0>
    10be:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <__fp_inf>
    10c2:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>
    10c6:	5f 3f       	cpi	r21, 0xFF	; 255
    10c8:	e4 f3       	brlt	.-8      	; 0x10c2 <__mulsf3_pse+0x84>
    10ca:	98 3e       	cpi	r25, 0xE8	; 232
    10cc:	d4 f3       	brlt	.-12     	; 0x10c2 <__mulsf3_pse+0x84>
    10ce:	86 95       	lsr	r24
    10d0:	77 95       	ror	r23
    10d2:	67 95       	ror	r22
    10d4:	b7 95       	ror	r27
    10d6:	f7 95       	ror	r31
    10d8:	e7 95       	ror	r30
    10da:	9f 5f       	subi	r25, 0xFF	; 255
    10dc:	c1 f7       	brne	.-16     	; 0x10ce <__mulsf3_pse+0x90>
    10de:	fe 2b       	or	r31, r30
    10e0:	88 0f       	add	r24, r24
    10e2:	91 1d       	adc	r25, r1
    10e4:	96 95       	lsr	r25
    10e6:	87 95       	ror	r24
    10e8:	97 f9       	bld	r25, 7
    10ea:	08 95       	ret

000010ec <round>:
    10ec:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__fp_splitA>
    10f0:	e8 f0       	brcs	.+58     	; 0x112c <round+0x40>
    10f2:	9e 37       	cpi	r25, 0x7E	; 126
    10f4:	e8 f0       	brcs	.+58     	; 0x1130 <round+0x44>
    10f6:	96 39       	cpi	r25, 0x96	; 150
    10f8:	b8 f4       	brcc	.+46     	; 0x1128 <round+0x3c>
    10fa:	9e 38       	cpi	r25, 0x8E	; 142
    10fc:	48 f4       	brcc	.+18     	; 0x1110 <round+0x24>
    10fe:	67 2f       	mov	r22, r23
    1100:	78 2f       	mov	r23, r24
    1102:	88 27       	eor	r24, r24
    1104:	98 5f       	subi	r25, 0xF8	; 248
    1106:	f9 cf       	rjmp	.-14     	; 0x10fa <round+0xe>
    1108:	86 95       	lsr	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	93 95       	inc	r25
    1110:	95 39       	cpi	r25, 0x95	; 149
    1112:	d0 f3       	brcs	.-12     	; 0x1108 <round+0x1c>
    1114:	b6 2f       	mov	r27, r22
    1116:	b1 70       	andi	r27, 0x01	; 1
    1118:	6b 0f       	add	r22, r27
    111a:	71 1d       	adc	r23, r1
    111c:	81 1d       	adc	r24, r1
    111e:	20 f4       	brcc	.+8      	; 0x1128 <round+0x3c>
    1120:	87 95       	ror	r24
    1122:	77 95       	ror	r23
    1124:	67 95       	ror	r22
    1126:	93 95       	inc	r25
    1128:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__fp_mintl>
    112c:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__fp_mpack>
    1130:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_szero>

00001134 <__fp_mintl>:
    1134:	88 23       	and	r24, r24
    1136:	71 f4       	brne	.+28     	; 0x1154 <__fp_mintl+0x20>
    1138:	77 23       	and	r23, r23
    113a:	21 f0       	breq	.+8      	; 0x1144 <__fp_mintl+0x10>
    113c:	98 50       	subi	r25, 0x08	; 8
    113e:	87 2b       	or	r24, r23
    1140:	76 2f       	mov	r23, r22
    1142:	07 c0       	rjmp	.+14     	; 0x1152 <__fp_mintl+0x1e>
    1144:	66 23       	and	r22, r22
    1146:	11 f4       	brne	.+4      	; 0x114c <__fp_mintl+0x18>
    1148:	99 27       	eor	r25, r25
    114a:	0d c0       	rjmp	.+26     	; 0x1166 <__fp_mintl+0x32>
    114c:	90 51       	subi	r25, 0x10	; 16
    114e:	86 2b       	or	r24, r22
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	2a f0       	brmi	.+10     	; 0x1160 <__fp_mintl+0x2c>
    1156:	9a 95       	dec	r25
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	da f7       	brpl	.-10     	; 0x1156 <__fp_mintl+0x22>
    1160:	88 0f       	add	r24, r24
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	97 f9       	bld	r25, 7
    1168:	08 95       	ret

0000116a <__fp_mpack>:
    116a:	9f 3f       	cpi	r25, 0xFF	; 255
    116c:	31 f0       	breq	.+12     	; 0x117a <__fp_mpack_finite+0xc>

0000116e <__fp_mpack_finite>:
    116e:	91 50       	subi	r25, 0x01	; 1
    1170:	20 f4       	brcc	.+8      	; 0x117a <__fp_mpack_finite+0xc>
    1172:	87 95       	ror	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	b7 95       	ror	r27
    117a:	88 0f       	add	r24, r24
    117c:	91 1d       	adc	r25, r1
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	97 f9       	bld	r25, 7
    1184:	08 95       	ret

00001186 <__itoa_ncheck>:
    1186:	bb 27       	eor	r27, r27
    1188:	4a 30       	cpi	r20, 0x0A	; 10
    118a:	31 f4       	brne	.+12     	; 0x1198 <__itoa_ncheck+0x12>
    118c:	99 23       	and	r25, r25
    118e:	22 f4       	brpl	.+8      	; 0x1198 <__itoa_ncheck+0x12>
    1190:	bd e2       	ldi	r27, 0x2D	; 45
    1192:	90 95       	com	r25
    1194:	81 95       	neg	r24
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__utoa_common>

0000119c <__utoa_ncheck>:
    119c:	bb 27       	eor	r27, r27

0000119e <__utoa_common>:
    119e:	fb 01       	movw	r30, r22
    11a0:	55 27       	eor	r21, r21
    11a2:	aa 27       	eor	r26, r26
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	aa 1f       	adc	r26, r26
    11aa:	a4 17       	cp	r26, r20
    11ac:	10 f0       	brcs	.+4      	; 0x11b2 <__utoa_common+0x14>
    11ae:	a4 1b       	sub	r26, r20
    11b0:	83 95       	inc	r24
    11b2:	50 51       	subi	r21, 0x10	; 16
    11b4:	b9 f7       	brne	.-18     	; 0x11a4 <__utoa_common+0x6>
    11b6:	a0 5d       	subi	r26, 0xD0	; 208
    11b8:	aa 33       	cpi	r26, 0x3A	; 58
    11ba:	08 f0       	brcs	.+2      	; 0x11be <__utoa_common+0x20>
    11bc:	a9 5d       	subi	r26, 0xD9	; 217
    11be:	a1 93       	st	Z+, r26
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	79 f7       	brne	.-34     	; 0x11a2 <__utoa_common+0x4>
    11c4:	b1 11       	cpse	r27, r1
    11c6:	b1 93       	st	Z+, r27
    11c8:	11 92       	st	Z+, r1
    11ca:	cb 01       	movw	r24, r22
    11cc:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <strrev>

000011d0 <strrev>:
    11d0:	dc 01       	movw	r26, r24
    11d2:	fc 01       	movw	r30, r24
    11d4:	67 2f       	mov	r22, r23
    11d6:	71 91       	ld	r23, Z+
    11d8:	77 23       	and	r23, r23
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <strrev+0x4>
    11dc:	32 97       	sbiw	r30, 0x02	; 2
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <strrev+0x18>
    11e0:	7c 91       	ld	r23, X
    11e2:	6d 93       	st	X+, r22
    11e4:	70 83       	st	Z, r23
    11e6:	62 91       	ld	r22, -Z
    11e8:	ae 17       	cp	r26, r30
    11ea:	bf 07       	cpc	r27, r31
    11ec:	c8 f3       	brcs	.-14     	; 0x11e0 <strrev+0x10>
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
