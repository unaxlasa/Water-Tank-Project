
WaterTankTrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00000f64  00000ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001aa  008001aa  000010a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fc0  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e37  00000000  00000000  00003294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c2  00000000  00000000  000040cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00005190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071a  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3f  00000000  00000000  00005c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006a89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3a       	cpi	r26, 0xAE	; 174
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 04 	call	0x86c	; 0x86c <main>
  9e:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <DistanceValue>:
static volatile int pulse_time = 0;


uint16_t DistanceValue(void)
{
	uint8_t distance= 0;
  f0:	60 e0       	ldi	r22, 0x00	; 0


	while(distance==0){
  f2:	30 c0       	rjmp	.+96     	; 0x154 <DistanceValue+0x64>
		GPIO_write_high(&PORTD,PD0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	8b e2       	ldi	r24, 0x2B	; 43
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <DistanceValue+0x12>
 106:	00 c0       	rjmp	.+0      	; 0x108 <DistanceValue+0x18>
		_delay_us(20);						// trigger the ultrasonic module for 15usec
		GPIO_write_low(&PORTD,PD0);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	8b e2       	ldi	r24, 0x2B	; 43
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <DistanceValue+0x28>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <DistanceValue+0x2e>
 11e:	00 00       	nop
		_delay_ms(10);
		distance = round(pulse_time * 0.0343 / 2);	// calculate the distance
 120:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <__data_end>
 124:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <__data_end+0x1>
 128:	07 2e       	mov	r0, r23
 12a:	00 0c       	add	r0, r0
 12c:	88 0b       	sbc	r24, r24
 12e:	99 0b       	sbc	r25, r25
 130:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 134:	28 e2       	ldi	r18, 0x28	; 40
 136:	3e e7       	ldi	r19, 0x7E	; 126
 138:	4c e0       	ldi	r20, 0x0C	; 12
 13a:	5d e3       	ldi	r21, 0x3D	; 61
 13c:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	5f e3       	ldi	r21, 0x3F	; 63
 148:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 14c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <round>
 150:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
uint16_t DistanceValue(void)
{
	uint8_t distance= 0;


	while(distance==0){
 154:	66 23       	and	r22, r22
 156:	71 f2       	breq	.-100    	; 0xf4 <DistanceValue+0x4>
		_delay_ms(10);
		distance = round(pulse_time * 0.0343 / 2);	// calculate the distance
	}
	return distance;
	
}
 158:	86 2f       	mov	r24, r22
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

0000015e <__vector_1>:

// This ISR is called automatically when a change on the INT0 pin happens due to the change of the echo pin from the ultrasonic module
ISR(INT0_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	if ((ECHO_IN & (1<<ECHO_PIN)) == 0)
 170:	4a 99       	sbic	0x09, 2	; 9
 172:	0d c0       	rjmp	.+26     	; 0x18e <__vector_1+0x30>
	{
		// echo changed from HIGH to LOW
		TCCR1B = 0;		//disabling counter
 174:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		pulse_time = TCNT1;	//count memory is updated to integer
 178:	e4 e8       	ldi	r30, 0x84	; 132
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 184:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
		TCNT1 = 0;		//resetting the counter memory
 188:	11 82       	std	Z+1, r1	; 0x01
 18a:	10 82       	st	Z, r1
 18c:	05 c0       	rjmp	.+10     	; 0x198 <__vector_1+0x3a>
	} else {
		// echo changed change from LOW to HIGH
		TCCR1B |= (1<<CS10);//enabling counter
 18e:	e1 e8       	ldi	r30, 0x81	; 129
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24
	}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 1aa:	85 b1       	in	r24, 0x05	; 5
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <toggle_e+0x8>
 1b6:	00 00       	nop
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8f 77       	andi	r24, 0x7F	; 127
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret

000001c0 <lcd_write>:
 1c0:	cf 93       	push	r28
 1c2:	c8 2f       	mov	r28, r24
 1c4:	66 23       	and	r22, r22
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <lcd_write+0x10>
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <lcd_write+0x16>
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	8a b1       	in	r24, 0x0a	; 10
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	8a b9       	out	0x0a, r24	; 10
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	8a b9       	out	0x0a, r24	; 10
 1e2:	8a b1       	in	r24, 0x0a	; 10
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	8a b1       	in	r24, 0x0a	; 10
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	8a b9       	out	0x0a, r24	; 10
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 77       	andi	r24, 0x7F	; 127
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 7b       	andi	r24, 0xBF	; 191
 1f8:	8b b9       	out	0x0b, r24	; 11
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	87 7f       	andi	r24, 0xF7	; 247
 1fe:	8b b9       	out	0x0b, r24	; 11
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8f 7e       	andi	r24, 0xEF	; 239
 204:	8b b9       	out	0x0b, r24	; 11
 206:	cc 23       	and	r28, r28
 208:	1c f4       	brge	.+6      	; 0x210 <lcd_write+0x50>
 20a:	8b b1       	in	r24, 0x0b	; 11
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	8b b9       	out	0x0b, r24	; 11
 210:	c6 ff       	sbrs	r28, 6
 212:	03 c0       	rjmp	.+6      	; 0x21a <lcd_write+0x5a>
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	80 64       	ori	r24, 0x40	; 64
 218:	8b b9       	out	0x0b, r24	; 11
 21a:	c5 ff       	sbrs	r28, 5
 21c:	03 c0       	rjmp	.+6      	; 0x224 <lcd_write+0x64>
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	88 60       	ori	r24, 0x08	; 8
 222:	8b b9       	out	0x0b, r24	; 11
 224:	c4 ff       	sbrs	r28, 4
 226:	03 c0       	rjmp	.+6      	; 0x22e <lcd_write+0x6e>
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <toggle_e>
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	8f 77       	andi	r24, 0x7F	; 127
 236:	8b b9       	out	0x0b, r24	; 11
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	8f 7b       	andi	r24, 0xBF	; 191
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	8b b1       	in	r24, 0x0b	; 11
 240:	87 7f       	andi	r24, 0xF7	; 247
 242:	8b b9       	out	0x0b, r24	; 11
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	8b b9       	out	0x0b, r24	; 11
 24a:	c3 ff       	sbrs	r28, 3
 24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_write+0x94>
 24e:	8b b1       	in	r24, 0x0b	; 11
 250:	80 68       	ori	r24, 0x80	; 128
 252:	8b b9       	out	0x0b, r24	; 11
 254:	c2 ff       	sbrs	r28, 2
 256:	03 c0       	rjmp	.+6      	; 0x25e <lcd_write+0x9e>
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	c1 ff       	sbrs	r28, 1
 260:	03 c0       	rjmp	.+6      	; 0x268 <lcd_write+0xa8>
 262:	8b b1       	in	r24, 0x0b	; 11
 264:	88 60       	ori	r24, 0x08	; 8
 266:	8b b9       	out	0x0b, r24	; 11
 268:	c0 ff       	sbrs	r28, 0
 26a:	03 c0       	rjmp	.+6      	; 0x272 <lcd_write+0xb2>
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	80 61       	ori	r24, 0x10	; 16
 270:	8b b9       	out	0x0b, r24	; 11
 272:	0e 94 d5 00 	call	0x1aa	; 0x1aa <toggle_e>
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 61       	ori	r24, 0x10	; 16
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	8b b9       	out	0x0b, r24	; 11
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	80 64       	ori	r24, 0x40	; 64
 286:	8b b9       	out	0x0b, r24	; 11
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	80 68       	ori	r24, 0x80	; 128
 28c:	8b b9       	out	0x0b, r24	; 11
 28e:	87 eb       	ldi	r24, 0xB7	; 183
 290:	9b e0       	ldi	r25, 0x0B	; 11
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_write+0xd2>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_write+0xd8>
 298:	00 00       	nop
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <lcd_command>:
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_write>
 2a4:	08 95       	ret

000002a6 <lcd_gotoxy>:
 2a6:	61 11       	cpse	r22, r1
 2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <lcd_gotoxy+0xc>
 2aa:	80 58       	subi	r24, 0x80	; 128
 2ac:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
 2b0:	08 95       	ret
 2b2:	80 54       	subi	r24, 0x40	; 64
 2b4:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
 2b8:	08 95       	ret

000002ba <lcd_clrscr>:
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
 2c0:	08 95       	ret

000002c2 <lcd_putc>:
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_write>
 2c8:	08 95       	ret

000002ca <lcd_puts>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	fc 01       	movw	r30, r24
 2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <lcd_puts+0xe>
 2d2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_putc>
 2d6:	fe 01       	movw	r30, r28
 2d8:	ef 01       	movw	r28, r30
 2da:	21 96       	adiw	r28, 0x01	; 1
 2dc:	80 81       	ld	r24, Z
 2de:	81 11       	cpse	r24, r1
 2e0:	f8 cf       	rjmp	.-16     	; 0x2d2 <lcd_puts+0x8>
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2ec:	84 b1       	in	r24, 0x04	; 4
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2f2:	8a b1       	in	r24, 0x0a	; 10
 2f4:	80 62       	ori	r24, 0x20	; 32
 2f6:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2f8:	84 b1       	in	r24, 0x04	; 4
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2fe:	8a b1       	in	r24, 0x0a	; 10
 300:	80 61       	ori	r24, 0x10	; 16
 302:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 304:	8a b1       	in	r24, 0x0a	; 10
 306:	88 60       	ori	r24, 0x08	; 8
 308:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 30a:	8a b1       	in	r24, 0x0a	; 10
 30c:	80 64       	ori	r24, 0x40	; 64
 30e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 310:	8a b1       	in	r24, 0x0a	; 10
 312:	80 68       	ori	r24, 0x80	; 128
 314:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	99 ef       	ldi	r25, 0xF9	; 249
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <lcd_init+0x32>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_init+0x38>
 320:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 322:	8b b1       	in	r24, 0x0b	; 11
 324:	88 60       	ori	r24, 0x08	; 8
 326:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 328:	8b b1       	in	r24, 0x0b	; 11
 32a:	80 61       	ori	r24, 0x10	; 16
 32c:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 32e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <toggle_e>
 332:	8f e1       	ldi	r24, 0x1F	; 31
 334:	9e e4       	ldi	r25, 0x4E	; 78
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <lcd_init+0x4e>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_init+0x54>
 33c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 33e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <toggle_e>
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <lcd_init+0x5e>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <lcd_init+0x64>
 34c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 34e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <toggle_e>
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <lcd_init+0x6e>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <lcd_init+0x74>
 35c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 35e:	8b b1       	in	r24, 0x0b	; 11
 360:	8f 7e       	andi	r24, 0xEF	; 239
 362:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 364:	0e 94 d5 00 	call	0x1aa	; 0x1aa <toggle_e>
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x84>
 370:	00 c0       	rjmp	.+0      	; 0x372 <lcd_init+0x8a>
 372:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 374:	88 e2       	ldi	r24, 0x28	; 40
 376:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 37a:	88 e0       	ldi	r24, 0x08	; 8
 37c:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
    lcd_clrscr();                  /* display clear                */
 380:	0e 94 5d 01 	call	0x2ba	; 0x2ba <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 384:	86 e0       	ldi	r24, 0x06	; 6
 386:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 38a:	8c 2f       	mov	r24, r28
 38c:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_command>
}/* lcd_init */
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <HumidGetValue>:

	return data[3];
}


uint16_t HumidGetValue(){
 394:	cf 93       	push	r28
	uint8_t result;
	//uint8_t result2;
	static uint8_t counter = 0x00;
	//static uint8_t counter1 = 0xFD;			 //Counter for real demostration
	//static uint8_t counter2 = 0xFE;
	GPIO_write_high(&PORTC,PC3);
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	88 e2       	ldi	r24, 0x28	; 40
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	if (repeat>20){
 3a0:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <repeat>
 3a4:	85 31       	cpi	r24, 0x15	; 21
 3a6:	d0 f0       	brcs	.+52     	; 0x3dc <HumidGetValue+0x48>
		//Starts i2c with 1st addr-->wanting to write
		twi_start((humidity_addr<<1) + TWI_WRITE);
 3a8:	8e ee       	ldi	r24, 0xEE	; 238
 3aa:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <twi_start>
		//Writing 0x0 to the sensor with addr
		twi_write(counter);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 06 05 	call	0xa0c	; 0xa0c <twi_write>
		//Nothing else has to be sent
		twi_stop();
 3b4:	0e 94 1a 05 	call	0xa34	; 0xa34 <twi_stop>
		TIM2_overflow_16ms();
 3b8:	e1 eb       	ldi	r30, 0xB1	; 177
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	87 60       	ori	r24, 0x07	; 7
 3c0:	80 83       	st	Z, r24
		//After giving the	order to the slave we want to read
		twi_start((humidity_addr<<1) + TWI_READ);
 3c2:	8f ee       	ldi	r24, 0xEF	; 239
 3c4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <twi_start>
		//Read the temperature integer part
		result=twi_read_nack();
 3c8:	0e 94 10 05 	call	0xa20	; 0xa20 <twi_read_nack>
 3cc:	c8 2f       	mov	r28, r24
		twi_stop();
 3ce:	0e 94 1a 05 	call	0xa34	; 0xa34 <twi_stop>
		repeat=0;
 3d2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <repeat>
		return result;
 3d6:	8c 2f       	mov	r24, r28
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <HumidGetValue+0x56>
		//return result1<<8&result2;				Repeat the same to obtain two results and do a BitShift to sume them for Real Sensor
	}
	else{
		repeat++;
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <repeat>
	}

	return data[4];
 3e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <data+0x8>
 3e6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <data+0x9>

}
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <PumpToggle>:
 * Purpose:  Update the values of distance and pressure.
 * Returns:  none
 **********************************************************************/

void PumpToggle(){
	data[2]=!data[2];
 3ee:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <data+0x4>
 3f2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <data+0x5>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	23 2b       	or	r18, r19
 3fc:	11 f0       	breq	.+4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <data+0x5>
 406:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <data+0x4>
	if(data[2]==1){
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	31 f4       	brne	.+12     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		GPIO_write_high(&PORTD,1);
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	8b e2       	ldi	r24, 0x2B	; 43
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 418:	08 95       	ret
	}
	else{
		GPIO_write_low(&PORTD,1);
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	8b e2       	ldi	r24, 0x2B	; 43
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 424:	08 95       	ret

00000426 <ValveSet>:
	}
}

void ValveSet(uint8_t openper){ //Set the opening range of valve % form
	TIM1_stop();
 426:	e1 e8       	ldi	r30, 0x81	; 129
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	90 81       	ld	r25, Z
 42c:	98 7f       	andi	r25, 0xF8	; 248
 42e:	90 83       	st	Z, r25
	setupServo(openper);
 430:	0e 94 9a 04 	call	0x934	; 0x934 <setupServo>
	lcd_init(LCD_DISP_ON);
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_init>
 43a:	08 95       	ret

0000043c <ReadKeys>:
 * Function: Read biutton state
 * Purpose:  Proccess the press of the button, by changing the data when is posible.
 * Returns:  The setting value the user wants to see.
 **********************************************************************/

uint8_t ReadKeys( uint8_t setting, int value){
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	c8 2f       	mov	r28, r24
 446:	8b 01       	movw	r16, r22
	 
	uint8_t newset = setting;	

	if(value>80 && value<120){ //Up
 448:	cb 01       	movw	r24, r22
 44a:	81 55       	subi	r24, 0x51	; 81
 44c:	91 09       	sbc	r25, r1
 44e:	87 97       	sbiw	r24, 0x27	; 39
 450:	70 f4       	brcc	.+28     	; 0x46e <ReadKeys+0x32>
		if(newset<1||newset>50){
 452:	df ef       	ldi	r29, 0xFF	; 255
 454:	dc 0f       	add	r29, r28
 456:	d2 33       	cpi	r29, 0x32	; 50
 458:	08 f0       	brcs	.+2      	; 0x45c <ReadKeys+0x20>
			newset= 4;
 45a:	d4 e0       	ldi	r29, 0x04	; 4
		}
		else{
			newset = newset -1;		//UP is pressed 120. Change the display setting.
		}
		lcd_gotoxy(0,0);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
		lcd_puts("                                                                                                       "); //Resets screen
 464:	8c e0       	ldi	r24, 0x0C	; 12
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
 46c:	01 c0       	rjmp	.+2      	; 0x470 <ReadKeys+0x34>
 * Returns:  The setting value the user wants to see.
 **********************************************************************/

uint8_t ReadKeys( uint8_t setting, int value){
	 
	uint8_t newset = setting;	
 46e:	dc 2f       	mov	r29, r28
		}
		lcd_gotoxy(0,0);
		lcd_puts("                                                                                                       "); //Resets screen
	}
	
	if(value>200 && value< 300){ //DOWN
 470:	c8 01       	movw	r24, r16
 472:	89 5c       	subi	r24, 0xC9	; 201
 474:	91 09       	sbc	r25, r1
 476:	83 36       	cpi	r24, 0x63	; 99
 478:	91 05       	cpc	r25, r1
 47a:	70 f4       	brcc	.+28     	; 0x498 <ReadKeys+0x5c>
		if(newset>3){
 47c:	d4 30       	cpi	r29, 0x04	; 4
 47e:	18 f4       	brcc	.+6      	; 0x486 <ReadKeys+0x4a>
			newset = 0;
		}
		else{
			newset= setting + 1;
 480:	d1 e0       	ldi	r29, 0x01	; 1
 482:	dc 0f       	add	r29, r28
 484:	01 c0       	rjmp	.+2      	; 0x488 <ReadKeys+0x4c>
		lcd_puts("                                                                                                       "); //Resets screen
	}
	
	if(value>200 && value< 300){ //DOWN
		if(newset>3){
			newset = 0;
 486:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else{
			newset= setting + 1;
		}
		lcd_gotoxy(0,0);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
		lcd_puts("                                                                                                       "); //Resets screen
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
	}
	
	if(value>390 && value<430){ //LEFT //When left button is pressed 410.
 498:	c8 01       	movw	r24, r16
 49a:	87 58       	subi	r24, 0x87	; 135
 49c:	91 40       	sbci	r25, 0x01	; 1
 49e:	87 97       	sbiw	r24, 0x27	; 39
 4a0:	d8 f4       	brcc	.+54     	; 0x4d8 <ReadKeys+0x9c>
		if (setting==1 && data[setting] != 0 ){
 4a2:	c1 30       	cpi	r28, 0x01	; 1
 4a4:	a9 f4       	brne	.+42     	; 0x4d0 <ReadKeys+0x94>
 4a6:	2c 2f       	mov	r18, r28
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	f9 01       	movw	r30, r18
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ee 5f       	subi	r30, 0xFE	; 254
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	80 81       	ld	r24, Z
 4b6:	91 81       	ldd	r25, Z+1	; 0x01
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	51 f0       	breq	.+20     	; 0x4d0 <ReadKeys+0x94>
			data[setting]=data[setting]-5;	//If it is possible to effit the number is bigger than 5 decrease the value in jumps of 5
 4bc:	05 97       	sbiw	r24, 0x05	; 5
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	f9 01       	movw	r30, r18
 4c4:	ee 5f       	subi	r30, 0xFE	; 254
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
			ValveSet(data[setting]);
 4cc:	0e 94 13 02 	call	0x426	; 0x426 <ValveSet>
		}
		if(setting==2){
 4d0:	c2 30       	cpi	r28, 0x02	; 2
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <ReadKeys+0x9c>
			PumpToggle();
 4d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <PumpToggle>
		}
	}
	
	if(value < 80){ //Right
 4d8:	00 35       	cpi	r16, 0x50	; 80
 4da:	11 05       	cpc	r17, r1
 4dc:	e4 f4       	brge	.+56     	; 0x516 <ReadKeys+0xda>
		if(data[setting] != 100 && setting==1){
 4de:	2c 2f       	mov	r18, r28
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	ee 5f       	subi	r30, 0xFE	; 254
 4ea:	fe 4f       	sbci	r31, 0xFE	; 254
 4ec:	80 81       	ld	r24, Z
 4ee:	91 81       	ldd	r25, Z+1	; 0x01
 4f0:	84 36       	cpi	r24, 0x64	; 100
 4f2:	91 05       	cpc	r25, r1
 4f4:	61 f0       	breq	.+24     	; 0x50e <ReadKeys+0xd2>
 4f6:	c1 30       	cpi	r28, 0x01	; 1
 4f8:	51 f4       	brne	.+20     	; 0x50e <ReadKeys+0xd2>
			data[setting]=data[setting]+5;	//If it is possible to edit increase the value
 4fa:	05 96       	adiw	r24, 0x05	; 5
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	f9 01       	movw	r30, r18
 502:	ee 5f       	subi	r30, 0xFE	; 254
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	80 83       	st	Z, r24
			ValveSet(data[setting]);
 50a:	0e 94 13 02 	call	0x426	; 0x426 <ValveSet>
		}
		if(setting==2){
 50e:	c2 30       	cpi	r28, 0x02	; 2
 510:	11 f4       	brne	.+4      	; 0x516 <ReadKeys+0xda>
			PumpToggle();
 512:	0e 94 f7 01 	call	0x3ee	; 0x3ee <PumpToggle>
		}
	}
	return newset;
	
}
 516:	8d 2f       	mov	r24, r29
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <DistanceSensorValue>:
 * Purpose:  Update the values of distance and pressure.
 * Returns:  none
 **********************************************************************/


int8_t DistanceSensorValue(uint8_t FULL){
 522:	cf 92       	push	r12
 524:	df 92       	push	r13
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	cf 93       	push	r28
	if (repeat>10){
 52c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <repeat>
 530:	9b 30       	cpi	r25, 0x0B	; 11
 532:	f8 f0       	brcs	.+62     	; 0x572 <DistanceSensorValue+0x50>
 534:	c8 2f       	mov	r28, r24
		repeat=0;
 536:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <repeat>
		float distance = DistanceValue();
 53a:	0e 94 78 00 	call	0xf0	; 0xf0 <DistanceValue>
 53e:	bc 01       	movw	r22, r24
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 33 06 	call	0xc66	; 0xc66 <__floatunsisf>
 548:	6b 01       	movw	r12, r22
 54a:	7c 01       	movw	r14, r24
		lcd_init(LCD_DISP_ON);
 54c:	8c e0       	ldi	r24, 0x0C	; 12
 54e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_init>
		return round(FULL - distance);
 552:	6c 2f       	mov	r22, r28
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 55e:	a7 01       	movw	r20, r14
 560:	96 01       	movw	r18, r12
 562:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__subsf3>
 566:	0e 94 2e 07 	call	0xe5c	; 0xe5c <round>
 56a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixsfsi>
 56e:	86 2f       	mov	r24, r22
 570:	05 c0       	rjmp	.+10     	; 0x57c <DistanceSensorValue+0x5a>
	
	}
	else{
		repeat++;
 572:	9f 5f       	subi	r25, 0xFF	; 255
 574:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <repeat>
	}
	return data[0];
 578:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data>
}
 57c:	cf 91       	pop	r28
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	df 90       	pop	r13
 584:	cf 90       	pop	r12
 586:	08 95       	ret

00000588 <PressureGetValue>:
 * Function: Get the value of the Pressure
 * Purpose:  Read the pressure at the bottom of the tank. Taking into account the water level
 * Returns:  The pressure at the bottom of the tank
 **********************************************************************/

uint16_t PressureGetValue(){
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	cf 93       	push	r28
	uint8_t result;
	//uint8_t result2;
	static uint8_t adress = 0x01;
	//static uint8_t counter1 = 0xFD;			 //Counter for moving through I2C RAM registers
	//static uint8_t counter2 = 0xFE;
	if (repeat>20){
 592:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <repeat>
 596:	85 31       	cpi	r24, 0x15	; 21
 598:	08 f4       	brcc	.+2      	; 0x59c <PressureGetValue+0x14>
 59a:	3f c0       	rjmp	.+126    	; 0x61a <PressureGetValue+0x92>
		//Starts i2c with 1st addr-->wanting to write
		twi_start((preassure_addr<<1) + TWI_WRITE);
 59c:	8e ee       	ldi	r24, 0xEE	; 238
 59e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <twi_start>
		//Writing 0x0 to the sensor with addr
		twi_write(adress);
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 06 05 	call	0xa0c	; 0xa0c <twi_write>
		//Nothing else has to be sent
		twi_stop();
 5a8:	0e 94 1a 05 	call	0xa34	; 0xa34 <twi_stop>
		TIM2_overflow_16ms();
 5ac:	e1 eb       	ldi	r30, 0xB1	; 177
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	87 60       	ori	r24, 0x07	; 7
 5b4:	80 83       	st	Z, r24
		//After giving the	order to the slave we want to read
		twi_start((preassure_addr<<1) + TWI_READ);
 5b6:	8f ee       	ldi	r24, 0xEF	; 239
 5b8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <twi_start>
		//Read the temperature integer part
		result=twi_read_nack();
 5bc:	0e 94 10 05 	call	0xa20	; 0xa20 <twi_read_nack>
 5c0:	c8 2f       	mov	r28, r24
		twi_stop();
 5c2:	0e 94 1a 05 	call	0xa34	; 0xa34 <twi_stop>
		repeat=0;
 5c6:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <repeat>
		uint8_t distance = DistanceSensorValue(FULL);
 5ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ce:	0e 94 91 02 	call	0x522	; 0x522 <DistanceSensorValue>
		return round(result+distance*9.8/100);
 5d2:	68 2f       	mov	r22, r24
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 5de:	2d ec       	ldi	r18, 0xCD	; 205
 5e0:	3c ec       	ldi	r19, 0xCC	; 204
 5e2:	4c e1       	ldi	r20, 0x1C	; 28
 5e4:	51 e4       	ldi	r21, 0x41	; 65
 5e6:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	48 ec       	ldi	r20, 0xC8	; 200
 5f0:	52 e4       	ldi	r21, 0x42	; 66
 5f2:	0e 94 8b 05 	call	0xb16	; 0xb16 <__divsf3>
 5f6:	6b 01       	movw	r12, r22
 5f8:	7c 01       	movw	r14, r24
 5fa:	6c 2f       	mov	r22, r28
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 606:	a7 01       	movw	r20, r14
 608:	96 01       	movw	r18, r12
 60a:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__addsf3>
 60e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <round>
 612:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 616:	cb 01       	movw	r24, r22
 618:	07 c0       	rjmp	.+14     	; 0x628 <PressureGetValue+0xa0>
		//return result1<<8&result2;
	}
	else{
		repeat++;
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <repeat>
	}

	return data[3];
 620:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <data+0x6>
 624:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <data+0x7>
}
 628:	cf 91       	pop	r28
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	cf 90       	pop	r12
 632:	08 95       	ret

00000634 <Display>:
/**********************************************************************
 * Function: LCD Display
 * Purpose:  Shows the data the user wants.
 * Returns:  none
 **********************************************************************/
 void Display(uint8_t setting){
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	00 d0       	rcall	.+0      	; 0x642 <Display+0xe>
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	08 2f       	mov	r16, r24
 
	 char lcd_string[2] = " ";
 648:	80 e2       	ldi	r24, 0x20	; 32
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
	 lcd_gotoxy(0,1);
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
	 
	 switch (setting)					//Defines the display of each setting
 658:	02 30       	cpi	r16, 0x02	; 2
 65a:	09 f4       	brne	.+2      	; 0x65e <Display+0x2a>
 65c:	80 c0       	rjmp	.+256    	; 0x75e <Display+0x12a>
 65e:	28 f4       	brcc	.+10     	; 0x66a <Display+0x36>
 660:	00 23       	and	r16, r16
 662:	51 f0       	breq	.+20     	; 0x678 <Display+0x44>
 664:	01 30       	cpi	r16, 0x01	; 1
 666:	b1 f1       	breq	.+108    	; 0x6d4 <Display+0xa0>
 668:	f8 c0       	rjmp	.+496    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 66a:	03 30       	cpi	r16, 0x03	; 3
 66c:	09 f4       	brne	.+2      	; 0x670 <Display+0x3c>
 66e:	9c c0       	rjmp	.+312    	; 0x7a8 <Display+0x174>
 670:	04 30       	cpi	r16, 0x04	; 4
 672:	09 f4       	brne	.+2      	; 0x676 <Display+0x42>
 674:	c2 c0       	rjmp	.+388    	; 0x7fa <Display+0x1c6>
 676:	f1 c0       	rjmp	.+482    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
	 {
		 case 0:		//Depth
			 data[0] = DistanceSensorValue(FULL);		//Update the water level
 678:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 67c:	0e 94 91 02 	call	0x522	; 0x522 <DistanceSensorValue>
 680:	08 2e       	mov	r0, r24
 682:	00 0c       	add	r0, r0
 684:	99 0b       	sbc	r25, r25
 686:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <data+0x1>
 68a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <data>
			 itoa(data[setting],lcd_string,10);
 68e:	e0 2f       	mov	r30, r16
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	ee 5f       	subi	r30, 0xFE	; 254
 698:	fe 4f       	sbci	r31, 0xFE	; 254
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 69a:	4a e0       	ldi	r20, 0x0A	; 10
 69c:	be 01       	movw	r22, r28
 69e:	6f 5f       	subi	r22, 0xFF	; 255
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	80 81       	ld	r24, Z
 6a4:	91 81       	ldd	r25, Z+1	; 0x01
 6a6:	0e 94 7b 07 	call	0xef6	; 0xef6 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(0,0);
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("Depth:");
 6ba:	84 e7       	ldi	r24, 0x74	; 116
 6bc:	91 e0       	ldi	r25, 0x01	; 1
 6be:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(5,1);
 6c2:	61 e0       	ldi	r22, 0x01	; 1
 6c4:	85 e0       	ldi	r24, 0x05	; 5
 6c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("cm");
 6ca:	8b e7       	ldi	r24, 0x7B	; 123
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 break;
 6d2:	c3 c0       	rjmp	.+390    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		 case 1:		//Valve open ratio
			 itoa(data[setting],lcd_string,10);
 6d4:	10 e0       	ldi	r17, 0x00	; 0
 6d6:	c8 01       	movw	r24, r16
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	9c 01       	movw	r18, r24
 6de:	2e 5f       	subi	r18, 0xFE	; 254
 6e0:	3e 4f       	sbci	r19, 0xFE	; 254
 6e2:	79 01       	movw	r14, r18
 6e4:	4a e0       	ldi	r20, 0x0A	; 10
 6e6:	be 01       	movw	r22, r28
 6e8:	6f 5f       	subi	r22, 0xFF	; 255
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	f9 01       	movw	r30, r18
 6ee:	80 81       	ld	r24, Z
 6f0:	91 81       	ldd	r25, Z+1	; 0x01
 6f2:	0e 94 7b 07 	call	0xef6	; 0xef6 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 6f6:	ce 01       	movw	r24, r28
 6f8:	01 96       	adiw	r24, 0x01	; 1
 6fa:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 if(data[setting]==95){
 6fe:	f7 01       	movw	r30, r14
 700:	80 81       	ld	r24, Z
 702:	91 81       	ldd	r25, Z+1	; 0x01
 704:	8f 35       	cpi	r24, 0x5F	; 95
 706:	91 05       	cpc	r25, r1
 708:	41 f4       	brne	.+16     	; 0x71a <Display+0xe6>
				lcd_gotoxy(2,1);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
				lcd_puts(" "); 
 712:	82 e7       	ldi	r24, 0x72	; 114
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 }
			 if(data[setting]==5){
 71a:	00 0f       	add	r16, r16
 71c:	11 1f       	adc	r17, r17
 71e:	f8 01       	movw	r30, r16
 720:	ee 5f       	subi	r30, 0xFE	; 254
 722:	fe 4f       	sbci	r31, 0xFE	; 254
 724:	80 81       	ld	r24, Z
 726:	91 81       	ldd	r25, Z+1	; 0x01
 728:	05 97       	sbiw	r24, 0x05	; 5
 72a:	41 f4       	brne	.+16     	; 0x73c <Display+0x108>
				 lcd_gotoxy(1,1);
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
				 lcd_puts(" ");
 734:	82 e7       	ldi	r24, 0x72	; 114
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 }
			 lcd_gotoxy(0,0);
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("Valve:");
 744:	8e e7       	ldi	r24, 0x7E	; 126
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(5,1);
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	85 e0       	ldi	r24, 0x05	; 5
 750:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("%");
 754:	85 e8       	ldi	r24, 0x85	; 133
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 break;
 75c:	7e c0       	rjmp	.+252    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		 case 2:		//Pump state
			 itoa(data[setting],lcd_string,10);
 75e:	10 e0       	ldi	r17, 0x00	; 0
 760:	00 0f       	add	r16, r16
 762:	11 1f       	adc	r17, r17
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1e 4f       	sbci	r17, 0xFE	; 254
 768:	4a e0       	ldi	r20, 0x0A	; 10
 76a:	be 01       	movw	r22, r28
 76c:	6f 5f       	subi	r22, 0xFF	; 255
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	f8 01       	movw	r30, r16
 772:	80 81       	ld	r24, Z
 774:	91 81       	ldd	r25, Z+1	; 0x01
 776:	0e 94 7b 07 	call	0xef6	; 0xef6 <__itoa_ncheck>
			 if(data[setting]==1){
 77a:	f8 01       	movw	r30, r16
 77c:	80 81       	ld	r24, Z
 77e:	91 81       	ldd	r25, Z+1	; 0x01
 780:	01 97       	sbiw	r24, 0x01	; 1
 782:	29 f4       	brne	.+10     	; 0x78e <Display+0x15a>
				 lcd_puts("On ");
 784:	87 e8       	ldi	r24, 0x87	; 135
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
 78c:	04 c0       	rjmp	.+8      	; 0x796 <Display+0x162>

			 }
			 else{
				 lcd_puts("Off");
 78e:	8b e8       	ldi	r24, 0x8B	; 139
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 }
			 lcd_gotoxy(0,0);
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("Pump:");
 79e:	8f e8       	ldi	r24, 0x8F	; 143
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 break;
 7a6:	59 c0       	rjmp	.+178    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		 case 3:		//Pressure
			 data[3] = PressureGetValue();		//Update the pressure at the bottom of the tank
 7a8:	0e 94 c4 02 	call	0x588	; 0x588 <PressureGetValue>
 7ac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <data+0x7>
 7b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <data+0x6>
			 itoa(data[setting],lcd_string,10);
 7b4:	e0 2f       	mov	r30, r16
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	ee 0f       	add	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	ee 5f       	subi	r30, 0xFE	; 254
 7be:	fe 4f       	sbci	r31, 0xFE	; 254
 7c0:	4a e0       	ldi	r20, 0x0A	; 10
 7c2:	be 01       	movw	r22, r28
 7c4:	6f 5f       	subi	r22, 0xFF	; 255
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	80 81       	ld	r24, Z
 7ca:	91 81       	ldd	r25, Z+1	; 0x01
 7cc:	0e 94 7b 07 	call	0xef6	; 0xef6 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(0,0);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("Pressure:");
 7e0:	85 e9       	ldi	r24, 0x95	; 149
 7e2:	91 e0       	ldi	r25, 0x01	; 1
 7e4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(5,1);
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	85 e0       	ldi	r24, 0x05	; 5
 7ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("Pa");
 7f0:	8f e9       	ldi	r24, 0x9F	; 159
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 break;
 7f8:	30 c0       	rjmp	.+96     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
		 case 4:
			 data[4] = HumidGetValue();
 7fa:	0e 94 ca 01 	call	0x394	; 0x394 <HumidGetValue>
 7fe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <data+0x9>
 802:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <data+0x8>
			 itoa(data[setting],lcd_string,10);
 806:	e0 2f       	mov	r30, r16
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	ee 5f       	subi	r30, 0xFE	; 254
 810:	fe 4f       	sbci	r31, 0xFE	; 254
 812:	4a e0       	ldi	r20, 0x0A	; 10
 814:	be 01       	movw	r22, r28
 816:	6f 5f       	subi	r22, 0xFF	; 255
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	80 81       	ld	r24, Z
 81c:	91 81       	ldd	r25, Z+1	; 0x01
 81e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(2,1);
 82a:	61 e0       	ldi	r22, 0x01	; 1
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts(" ");
 832:	82 e7       	ldi	r24, 0x72	; 114
 834:	91 e0       	ldi	r25, 0x01	; 1
 836:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(0,0);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("Humid:");
 842:	82 ea       	ldi	r24, 0xA2	; 162
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 lcd_gotoxy(5,1);
 84a:	61 e0       	ldi	r22, 0x01	; 1
 84c:	85 e0       	ldi	r24, 0x05	; 5
 84e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_gotoxy>
			 lcd_puts("%");
 852:	85 e8       	ldi	r24, 0x85	; 133
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_puts>
			 break;
		 
	 } 
 }
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	ef 90       	pop	r14
 86a:	08 95       	ret

0000086c <main>:
 * Function: Main function where the program execution begins
 * Purpose:  Update the values of distance and pressure.
 * Returns:  none
 **********************************************************************/
void main(void){
	lcd_init(LCD_DISP_ON);	
 86c:	8c e0       	ldi	r24, 0x0C	; 12
 86e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_init>
	GPIO_config_output(&DDRD, PUMP_PIN);
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	8a e2       	ldi	r24, 0x2A	; 42
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD0);
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	8a e2       	ldi	r24, 0x2A	; 42
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	EIMSK |= (1<<INT0);	// enable INT0
 886:	8d b3       	in	r24, 0x1d	; 29
 888:	81 60       	ori	r24, 0x01	; 1
 88a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC00);// setting interrupt trigger on any change
 88c:	e9 e6       	ldi	r30, 0x69	; 105
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	81 60       	ori	r24, 0x01	; 1
 894:	80 83       	st	Z, r24
	// Configure ADC to convert PC0[A0] analog value
	
	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
 896:	ec e7       	ldi	r30, 0x7C	; 124
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	80 64       	ori	r24, 0x40	; 64
 89e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 8a0:	80 81       	ld	r24, Z
 8a2:	8f 77       	andi	r24, 0x7F	; 127
 8a4:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~(1<<MUX3|1<<MUX2|1<<MUX1|1<<MUX0);
 8a6:	80 81       	ld	r24, Z
 8a8:	80 7f       	andi	r24, 0xF0	; 240
 8aa:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
 8ac:	ea e7       	ldi	r30, 0x7A	; 122
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 68       	ori	r24, 0x80	; 128
 8b4:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	sei();
 8b6:	78 94       	sei
	twi_init();
 8b8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <twi_init>

	
	while(1){
		
		ADCSRA |= (1<<ADSC);
 8bc:	ea e7       	ldi	r30, 0x7A	; 122
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	80 64       	ori	r24, 0x40	; 64
 8c4:	80 83       	st	Z, r24
		setting=ReadKeys(setting, ADC);
 8c6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 8ca:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 8ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <setting>
 8d2:	0e 94 1e 02 	call	0x43c	; 0x43c <ReadKeys>
 8d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <setting>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8da:	2f ef       	ldi	r18, 0xFF	; 255
 8dc:	83 ec       	ldi	r24, 0xC3	; 195
 8de:	99 e0       	ldi	r25, 0x09	; 9
 8e0:	21 50       	subi	r18, 0x01	; 1
 8e2:	80 40       	sbci	r24, 0x00	; 0
 8e4:	90 40       	sbci	r25, 0x00	; 0
 8e6:	e1 f7       	brne	.-8      	; 0x8e0 <main+0x74>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <main+0x7e>
 8ea:	00 00       	nop
		_delay_ms(200);
		Display(setting);			//Update the displayz
 8ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <setting>
 8f0:	0e 94 1a 03 	call	0x634	; 0x634 <Display>
		
		if(check_period > 6){					//Even if the setting is not meassure all values in backgraunds every 40 loops (6*20/3)
 8f4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <check_period>
 8f8:	87 30       	cpi	r24, 0x07	; 7
 8fa:	c8 f0       	brcs	.+50     	; 0x92e <__stack+0x2f>
			data[0]= DistanceSensorValue(FULL);
 8fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 900:	0e 94 91 02 	call	0x522	; 0x522 <DistanceSensorValue>
 904:	c2 e0       	ldi	r28, 0x02	; 2
 906:	d1 e0       	ldi	r29, 0x01	; 1
 908:	08 2e       	mov	r0, r24
 90a:	00 0c       	add	r0, r0
 90c:	99 0b       	sbc	r25, r25
 90e:	99 83       	std	Y+1, r25	; 0x01
 910:	88 83       	st	Y, r24
			data[3]=PressureGetValue();
 912:	0e 94 c4 02 	call	0x588	; 0x588 <PressureGetValue>
 916:	9f 83       	std	Y+7, r25	; 0x07
 918:	8e 83       	std	Y+6, r24	; 0x06
			data[4]=HumidGetValue();
 91a:	0e 94 ca 01 	call	0x394	; 0x394 <HumidGetValue>
 91e:	99 87       	std	Y+9, r25	; 0x09
 920:	88 87       	std	Y+8, r24	; 0x08
			check_period++;
 922:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <check_period>
 926:	8f 5f       	subi	r24, 0xFF	; 255
 928:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <check_period>
 92c:	c7 cf       	rjmp	.-114    	; 0x8bc <main+0x50>
		}
		else{
			check_period=0;
 92e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <check_period>
 932:	c4 cf       	rjmp	.-120    	; 0x8bc <main+0x50>

00000934 <setupServo>:
#include "lcd.h"



void setupServo( uint8_t porcentage)
{
 934:	cf 93       	push	r28
 936:	c8 2f       	mov	r28, r24
	lcd_init(LCD_DISP_OFF);
 938:	88 e0       	ldi	r24, 0x08	; 8
 93a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_init>
	DDRD |= (1<<PD5);    //Fast PWM output at OC0B pin
 93e:	8a b1       	in	r24, 0x0a	; 10
 940:	80 62       	ori	r24, 0x20	; 32
 942:	8a b9       	out	0x0a, r24	; 10
	
	OCR0A  = 255;   // Frequncy 1 kHz
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	87 bd       	out	0x27, r24	; 39
		// Top Value of 200(must be equal or greater than Duty Cycle)
	OCR0B = round(255-256*(0.030517*porcentage+9.15527)/100);	// Duty cycle of 75%
 948:	6c 2f       	mov	r22, r28
 94a:	70 e0       	ldi	r23, 0x00	; 0
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 35 06 	call	0xc6a	; 0xc6a <__floatsisf>
 954:	2a ec       	ldi	r18, 0xCA	; 202
 956:	3e ef       	ldi	r19, 0xFE	; 254
 958:	49 ef       	ldi	r20, 0xF9	; 249
 95a:	5c e3       	ldi	r21, 0x3C	; 60
 95c:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 960:	2c ef       	ldi	r18, 0xFC	; 252
 962:	3b e7       	ldi	r19, 0x7B	; 123
 964:	42 e1       	ldi	r20, 0x12	; 18
 966:	51 e4       	ldi	r21, 0x41	; 65
 968:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__addsf3>
 96c:	20 e0       	ldi	r18, 0x00	; 0
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	40 e8       	ldi	r20, 0x80	; 128
 972:	53 e4       	ldi	r21, 0x43	; 67
 974:	0e 94 c1 06 	call	0xd82	; 0xd82 <__mulsf3>
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	48 ec       	ldi	r20, 0xC8	; 200
 97e:	52 e4       	ldi	r21, 0x42	; 66
 980:	0e 94 8b 05 	call	0xb16	; 0xb16 <__divsf3>
 984:	9b 01       	movw	r18, r22
 986:	ac 01       	movw	r20, r24
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	8f e7       	ldi	r24, 0x7F	; 127
 98e:	93 e4       	ldi	r25, 0x43	; 67
 990:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__subsf3>
 994:	0e 94 2e 07 	call	0xe5c	; 0xe5c <round>
 998:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 99c:	68 bd       	out	0x28, r22	; 40
	TCCR0A |= (1<<COM0B1) | (1<<COM0B0) | (1<<WGM01) | (1<<WGM00);	//Inverting Fast PWM mode 7
 99e:	84 b5       	in	r24, 0x24	; 36
 9a0:	83 63       	ori	r24, 0x33	; 51
 9a2:	84 bd       	out	0x24, r24	; 36
	//TCCR0A |= (1<<COM0B1) | (1<<WGM01) | (1<<WGM00);	//Non-Inverting Fast PWM mode 7
	TCCR0B |= (1<<WGM02) | (1<<CS00);
 9a4:	85 b5       	in	r24, 0x25	; 37
 9a6:	89 60       	ori	r24, 0x09	; 9
 9a8:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<WGM02) | (1<<CS02);	//No-Prescalar
 9aa:	85 b5       	in	r24, 0x25	; 37
 9ac:	8c 60       	ori	r24, 0x0C	; 12
 9ae:	85 bd       	out	0x25, r24	; 37

}
 9b0:	cf 91       	pop	r28
 9b2:	08 95       	ret

000009b4 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 9b4:	87 b1       	in	r24, 0x07	; 7
 9b6:	8f 7c       	andi	r24, 0xCF	; 207
 9b8:	87 b9       	out	0x07, r24	; 7
 9ba:	88 b1       	in	r24, 0x08	; 8
 9bc:	80 63       	ori	r24, 0x30	; 48
 9be:	88 b9       	out	0x08, r24	; 8
 9c0:	e9 eb       	ldi	r30, 0xB9	; 185
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	8c 7f       	andi	r24, 0xFC	; 252
 9c8:	80 83       	st	Z, r24
 9ca:	88 e9       	ldi	r24, 0x98	; 152
 9cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 9d0:	08 95       	ret

000009d2 <twi_start>:
 9d2:	94 ea       	ldi	r25, 0xA4	; 164
 9d4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9d8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9dc:	99 23       	and	r25, r25
 9de:	e4 f7       	brge	.-8      	; 0x9d8 <twi_start+0x6>
 9e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 9e4:	84 e8       	ldi	r24, 0x84	; 132
 9e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 9ee:	88 23       	and	r24, r24
 9f0:	e4 f7       	brge	.-8      	; 0x9ea <twi_start+0x18>
 9f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 9f6:	88 7f       	andi	r24, 0xF8	; 248
 9f8:	88 31       	cpi	r24, 0x18	; 24
 9fa:	21 f0       	breq	.+8      	; 0xa04 <twi_start+0x32>
 9fc:	80 34       	cpi	r24, 0x40	; 64
 9fe:	21 f4       	brne	.+8      	; 0xa08 <twi_start+0x36>
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	08 95       	ret
 a04:	80 e0       	ldi	r24, 0x00	; 0
 a06:	08 95       	ret
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	08 95       	ret

00000a0c <twi_write>:
 a0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 a10:	84 e8       	ldi	r24, 0x84	; 132
 a12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a16:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a1a:	88 23       	and	r24, r24
 a1c:	e4 f7       	brge	.-8      	; 0xa16 <twi_write+0xa>
 a1e:	08 95       	ret

00000a20 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 a20:	84 e8       	ldi	r24, 0x84	; 132
 a22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 a26:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a2a:	88 23       	and	r24, r24
 a2c:	e4 f7       	brge	.-8      	; 0xa26 <twi_read_nack+0x6>
    return (TWDR);
 a2e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 a32:	08 95       	ret

00000a34 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 a34:	84 e9       	ldi	r24, 0x94	; 148
 a36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a3a:	08 95       	ret

00000a3c <__subsf3>:
 a3c:	50 58       	subi	r21, 0x80	; 128

00000a3e <__addsf3>:
 a3e:	bb 27       	eor	r27, r27
 a40:	aa 27       	eor	r26, r26
 a42:	0e 94 36 05 	call	0xa6c	; 0xa6c <__addsf3x>
 a46:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
 a4a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
 a4e:	38 f0       	brcs	.+14     	; 0xa5e <__addsf3+0x20>
 a50:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
 a54:	20 f0       	brcs	.+8      	; 0xa5e <__addsf3+0x20>
 a56:	39 f4       	brne	.+14     	; 0xa66 <__addsf3+0x28>
 a58:	9f 3f       	cpi	r25, 0xFF	; 255
 a5a:	19 f4       	brne	.+6      	; 0xa62 <__addsf3+0x24>
 a5c:	26 f4       	brtc	.+8      	; 0xa66 <__addsf3+0x28>
 a5e:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>
 a62:	0e f4       	brtc	.+2      	; 0xa66 <__addsf3+0x28>
 a64:	e0 95       	com	r30
 a66:	e7 fb       	bst	r30, 7
 a68:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>

00000a6c <__addsf3x>:
 a6c:	e9 2f       	mov	r30, r25
 a6e:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 a72:	58 f3       	brcs	.-42     	; 0xa4a <__addsf3+0xc>
 a74:	ba 17       	cp	r27, r26
 a76:	62 07       	cpc	r22, r18
 a78:	73 07       	cpc	r23, r19
 a7a:	84 07       	cpc	r24, r20
 a7c:	95 07       	cpc	r25, r21
 a7e:	20 f0       	brcs	.+8      	; 0xa88 <__addsf3x+0x1c>
 a80:	79 f4       	brne	.+30     	; 0xaa0 <__addsf3x+0x34>
 a82:	a6 f5       	brtc	.+104    	; 0xaec <__addsf3x+0x80>
 a84:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_zero>
 a88:	0e f4       	brtc	.+2      	; 0xa8c <__addsf3x+0x20>
 a8a:	e0 95       	com	r30
 a8c:	0b 2e       	mov	r0, r27
 a8e:	ba 2f       	mov	r27, r26
 a90:	a0 2d       	mov	r26, r0
 a92:	0b 01       	movw	r0, r22
 a94:	b9 01       	movw	r22, r18
 a96:	90 01       	movw	r18, r0
 a98:	0c 01       	movw	r0, r24
 a9a:	ca 01       	movw	r24, r20
 a9c:	a0 01       	movw	r20, r0
 a9e:	11 24       	eor	r1, r1
 aa0:	ff 27       	eor	r31, r31
 aa2:	59 1b       	sub	r21, r25
 aa4:	99 f0       	breq	.+38     	; 0xacc <__addsf3x+0x60>
 aa6:	59 3f       	cpi	r21, 0xF9	; 249
 aa8:	50 f4       	brcc	.+20     	; 0xabe <__addsf3x+0x52>
 aaa:	50 3e       	cpi	r21, 0xE0	; 224
 aac:	68 f1       	brcs	.+90     	; 0xb08 <__addsf3x+0x9c>
 aae:	1a 16       	cp	r1, r26
 ab0:	f0 40       	sbci	r31, 0x00	; 0
 ab2:	a2 2f       	mov	r26, r18
 ab4:	23 2f       	mov	r18, r19
 ab6:	34 2f       	mov	r19, r20
 ab8:	44 27       	eor	r20, r20
 aba:	58 5f       	subi	r21, 0xF8	; 248
 abc:	f3 cf       	rjmp	.-26     	; 0xaa4 <__addsf3x+0x38>
 abe:	46 95       	lsr	r20
 ac0:	37 95       	ror	r19
 ac2:	27 95       	ror	r18
 ac4:	a7 95       	ror	r26
 ac6:	f0 40       	sbci	r31, 0x00	; 0
 ac8:	53 95       	inc	r21
 aca:	c9 f7       	brne	.-14     	; 0xabe <__addsf3x+0x52>
 acc:	7e f4       	brtc	.+30     	; 0xaec <__addsf3x+0x80>
 ace:	1f 16       	cp	r1, r31
 ad0:	ba 0b       	sbc	r27, r26
 ad2:	62 0b       	sbc	r22, r18
 ad4:	73 0b       	sbc	r23, r19
 ad6:	84 0b       	sbc	r24, r20
 ad8:	ba f0       	brmi	.+46     	; 0xb08 <__addsf3x+0x9c>
 ada:	91 50       	subi	r25, 0x01	; 1
 adc:	a1 f0       	breq	.+40     	; 0xb06 <__addsf3x+0x9a>
 ade:	ff 0f       	add	r31, r31
 ae0:	bb 1f       	adc	r27, r27
 ae2:	66 1f       	adc	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	c2 f7       	brpl	.-16     	; 0xada <__addsf3x+0x6e>
 aea:	0e c0       	rjmp	.+28     	; 0xb08 <__addsf3x+0x9c>
 aec:	ba 0f       	add	r27, r26
 aee:	62 1f       	adc	r22, r18
 af0:	73 1f       	adc	r23, r19
 af2:	84 1f       	adc	r24, r20
 af4:	48 f4       	brcc	.+18     	; 0xb08 <__addsf3x+0x9c>
 af6:	87 95       	ror	r24
 af8:	77 95       	ror	r23
 afa:	67 95       	ror	r22
 afc:	b7 95       	ror	r27
 afe:	f7 95       	ror	r31
 b00:	9e 3f       	cpi	r25, 0xFE	; 254
 b02:	08 f0       	brcs	.+2      	; 0xb06 <__addsf3x+0x9a>
 b04:	b0 cf       	rjmp	.-160    	; 0xa66 <__addsf3+0x28>
 b06:	93 95       	inc	r25
 b08:	88 0f       	add	r24, r24
 b0a:	08 f0       	brcs	.+2      	; 0xb0e <__addsf3x+0xa2>
 b0c:	99 27       	eor	r25, r25
 b0e:	ee 0f       	add	r30, r30
 b10:	97 95       	ror	r25
 b12:	87 95       	ror	r24
 b14:	08 95       	ret

00000b16 <__divsf3>:
 b16:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__divsf3x>
 b1a:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
 b1e:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
 b22:	58 f0       	brcs	.+22     	; 0xb3a <__divsf3+0x24>
 b24:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
 b28:	40 f0       	brcs	.+16     	; 0xb3a <__divsf3+0x24>
 b2a:	29 f4       	brne	.+10     	; 0xb36 <__divsf3+0x20>
 b2c:	5f 3f       	cpi	r21, 0xFF	; 255
 b2e:	29 f0       	breq	.+10     	; 0xb3a <__divsf3+0x24>
 b30:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 b34:	51 11       	cpse	r21, r1
 b36:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 b3a:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>

00000b3e <__divsf3x>:
 b3e:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 b42:	68 f3       	brcs	.-38     	; 0xb1e <__divsf3+0x8>

00000b44 <__divsf3_pse>:
 b44:	99 23       	and	r25, r25
 b46:	b1 f3       	breq	.-20     	; 0xb34 <__divsf3+0x1e>
 b48:	55 23       	and	r21, r21
 b4a:	91 f3       	breq	.-28     	; 0xb30 <__divsf3+0x1a>
 b4c:	95 1b       	sub	r25, r21
 b4e:	55 0b       	sbc	r21, r21
 b50:	bb 27       	eor	r27, r27
 b52:	aa 27       	eor	r26, r26
 b54:	62 17       	cp	r22, r18
 b56:	73 07       	cpc	r23, r19
 b58:	84 07       	cpc	r24, r20
 b5a:	38 f0       	brcs	.+14     	; 0xb6a <__divsf3_pse+0x26>
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
 b5e:	5f 4f       	sbci	r21, 0xFF	; 255
 b60:	22 0f       	add	r18, r18
 b62:	33 1f       	adc	r19, r19
 b64:	44 1f       	adc	r20, r20
 b66:	aa 1f       	adc	r26, r26
 b68:	a9 f3       	breq	.-22     	; 0xb54 <__divsf3_pse+0x10>
 b6a:	35 d0       	rcall	.+106    	; 0xbd6 <__divsf3_pse+0x92>
 b6c:	0e 2e       	mov	r0, r30
 b6e:	3a f0       	brmi	.+14     	; 0xb7e <__divsf3_pse+0x3a>
 b70:	e0 e8       	ldi	r30, 0x80	; 128
 b72:	32 d0       	rcall	.+100    	; 0xbd8 <__divsf3_pse+0x94>
 b74:	91 50       	subi	r25, 0x01	; 1
 b76:	50 40       	sbci	r21, 0x00	; 0
 b78:	e6 95       	lsr	r30
 b7a:	00 1c       	adc	r0, r0
 b7c:	ca f7       	brpl	.-14     	; 0xb70 <__divsf3_pse+0x2c>
 b7e:	2b d0       	rcall	.+86     	; 0xbd6 <__divsf3_pse+0x92>
 b80:	fe 2f       	mov	r31, r30
 b82:	29 d0       	rcall	.+82     	; 0xbd6 <__divsf3_pse+0x92>
 b84:	66 0f       	add	r22, r22
 b86:	77 1f       	adc	r23, r23
 b88:	88 1f       	adc	r24, r24
 b8a:	bb 1f       	adc	r27, r27
 b8c:	26 17       	cp	r18, r22
 b8e:	37 07       	cpc	r19, r23
 b90:	48 07       	cpc	r20, r24
 b92:	ab 07       	cpc	r26, r27
 b94:	b0 e8       	ldi	r27, 0x80	; 128
 b96:	09 f0       	breq	.+2      	; 0xb9a <__divsf3_pse+0x56>
 b98:	bb 0b       	sbc	r27, r27
 b9a:	80 2d       	mov	r24, r0
 b9c:	bf 01       	movw	r22, r30
 b9e:	ff 27       	eor	r31, r31
 ba0:	93 58       	subi	r25, 0x83	; 131
 ba2:	5f 4f       	sbci	r21, 0xFF	; 255
 ba4:	3a f0       	brmi	.+14     	; 0xbb4 <__divsf3_pse+0x70>
 ba6:	9e 3f       	cpi	r25, 0xFE	; 254
 ba8:	51 05       	cpc	r21, r1
 baa:	78 f0       	brcs	.+30     	; 0xbca <__divsf3_pse+0x86>
 bac:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 bb0:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 bb4:	5f 3f       	cpi	r21, 0xFF	; 255
 bb6:	e4 f3       	brlt	.-8      	; 0xbb0 <__divsf3_pse+0x6c>
 bb8:	98 3e       	cpi	r25, 0xE8	; 232
 bba:	d4 f3       	brlt	.-12     	; 0xbb0 <__divsf3_pse+0x6c>
 bbc:	86 95       	lsr	r24
 bbe:	77 95       	ror	r23
 bc0:	67 95       	ror	r22
 bc2:	b7 95       	ror	r27
 bc4:	f7 95       	ror	r31
 bc6:	9f 5f       	subi	r25, 0xFF	; 255
 bc8:	c9 f7       	brne	.-14     	; 0xbbc <__divsf3_pse+0x78>
 bca:	88 0f       	add	r24, r24
 bcc:	91 1d       	adc	r25, r1
 bce:	96 95       	lsr	r25
 bd0:	87 95       	ror	r24
 bd2:	97 f9       	bld	r25, 7
 bd4:	08 95       	ret
 bd6:	e1 e0       	ldi	r30, 0x01	; 1
 bd8:	66 0f       	add	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	bb 1f       	adc	r27, r27
 be0:	62 17       	cp	r22, r18
 be2:	73 07       	cpc	r23, r19
 be4:	84 07       	cpc	r24, r20
 be6:	ba 07       	cpc	r27, r26
 be8:	20 f0       	brcs	.+8      	; 0xbf2 <__divsf3_pse+0xae>
 bea:	62 1b       	sub	r22, r18
 bec:	73 0b       	sbc	r23, r19
 bee:	84 0b       	sbc	r24, r20
 bf0:	ba 0b       	sbc	r27, r26
 bf2:	ee 1f       	adc	r30, r30
 bf4:	88 f7       	brcc	.-30     	; 0xbd8 <__divsf3_pse+0x94>
 bf6:	e0 95       	com	r30
 bf8:	08 95       	ret

00000bfa <__fixsfsi>:
 bfa:	0e 94 04 06 	call	0xc08	; 0xc08 <__fixunssfsi>
 bfe:	68 94       	set
 c00:	b1 11       	cpse	r27, r1
 c02:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 c06:	08 95       	ret

00000c08 <__fixunssfsi>:
 c08:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_splitA>
 c0c:	88 f0       	brcs	.+34     	; 0xc30 <__fixunssfsi+0x28>
 c0e:	9f 57       	subi	r25, 0x7F	; 127
 c10:	98 f0       	brcs	.+38     	; 0xc38 <__fixunssfsi+0x30>
 c12:	b9 2f       	mov	r27, r25
 c14:	99 27       	eor	r25, r25
 c16:	b7 51       	subi	r27, 0x17	; 23
 c18:	b0 f0       	brcs	.+44     	; 0xc46 <__fixunssfsi+0x3e>
 c1a:	e1 f0       	breq	.+56     	; 0xc54 <__fixunssfsi+0x4c>
 c1c:	66 0f       	add	r22, r22
 c1e:	77 1f       	adc	r23, r23
 c20:	88 1f       	adc	r24, r24
 c22:	99 1f       	adc	r25, r25
 c24:	1a f0       	brmi	.+6      	; 0xc2c <__fixunssfsi+0x24>
 c26:	ba 95       	dec	r27
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__fixunssfsi+0x14>
 c2a:	14 c0       	rjmp	.+40     	; 0xc54 <__fixunssfsi+0x4c>
 c2c:	b1 30       	cpi	r27, 0x01	; 1
 c2e:	91 f0       	breq	.+36     	; 0xc54 <__fixunssfsi+0x4c>
 c30:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_zero>
 c34:	b1 e0       	ldi	r27, 0x01	; 1
 c36:	08 95       	ret
 c38:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_zero>
 c3c:	67 2f       	mov	r22, r23
 c3e:	78 2f       	mov	r23, r24
 c40:	88 27       	eor	r24, r24
 c42:	b8 5f       	subi	r27, 0xF8	; 248
 c44:	39 f0       	breq	.+14     	; 0xc54 <__fixunssfsi+0x4c>
 c46:	b9 3f       	cpi	r27, 0xF9	; 249
 c48:	cc f3       	brlt	.-14     	; 0xc3c <__fixunssfsi+0x34>
 c4a:	86 95       	lsr	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b3 95       	inc	r27
 c52:	d9 f7       	brne	.-10     	; 0xc4a <__fixunssfsi+0x42>
 c54:	3e f4       	brtc	.+14     	; 0xc64 <__fixunssfsi+0x5c>
 c56:	90 95       	com	r25
 c58:	80 95       	com	r24
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	08 95       	ret

00000c66 <__floatunsisf>:
 c66:	e8 94       	clt
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <__floatsisf+0x12>

00000c6a <__floatsisf>:
 c6a:	97 fb       	bst	r25, 7
 c6c:	3e f4       	brtc	.+14     	; 0xc7c <__floatsisf+0x12>
 c6e:	90 95       	com	r25
 c70:	80 95       	com	r24
 c72:	70 95       	com	r23
 c74:	61 95       	neg	r22
 c76:	7f 4f       	sbci	r23, 0xFF	; 255
 c78:	8f 4f       	sbci	r24, 0xFF	; 255
 c7a:	9f 4f       	sbci	r25, 0xFF	; 255
 c7c:	99 23       	and	r25, r25
 c7e:	a9 f0       	breq	.+42     	; 0xcaa <__floatsisf+0x40>
 c80:	f9 2f       	mov	r31, r25
 c82:	96 e9       	ldi	r25, 0x96	; 150
 c84:	bb 27       	eor	r27, r27
 c86:	93 95       	inc	r25
 c88:	f6 95       	lsr	r31
 c8a:	87 95       	ror	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	b7 95       	ror	r27
 c92:	f1 11       	cpse	r31, r1
 c94:	f8 cf       	rjmp	.-16     	; 0xc86 <__floatsisf+0x1c>
 c96:	fa f4       	brpl	.+62     	; 0xcd6 <__floatsisf+0x6c>
 c98:	bb 0f       	add	r27, r27
 c9a:	11 f4       	brne	.+4      	; 0xca0 <__floatsisf+0x36>
 c9c:	60 ff       	sbrs	r22, 0
 c9e:	1b c0       	rjmp	.+54     	; 0xcd6 <__floatsisf+0x6c>
 ca0:	6f 5f       	subi	r22, 0xFF	; 255
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	16 c0       	rjmp	.+44     	; 0xcd6 <__floatsisf+0x6c>
 caa:	88 23       	and	r24, r24
 cac:	11 f0       	breq	.+4      	; 0xcb2 <__floatsisf+0x48>
 cae:	96 e9       	ldi	r25, 0x96	; 150
 cb0:	11 c0       	rjmp	.+34     	; 0xcd4 <__floatsisf+0x6a>
 cb2:	77 23       	and	r23, r23
 cb4:	21 f0       	breq	.+8      	; 0xcbe <__floatsisf+0x54>
 cb6:	9e e8       	ldi	r25, 0x8E	; 142
 cb8:	87 2f       	mov	r24, r23
 cba:	76 2f       	mov	r23, r22
 cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <__floatsisf+0x5e>
 cbe:	66 23       	and	r22, r22
 cc0:	71 f0       	breq	.+28     	; 0xcde <__floatsisf+0x74>
 cc2:	96 e8       	ldi	r25, 0x86	; 134
 cc4:	86 2f       	mov	r24, r22
 cc6:	70 e0       	ldi	r23, 0x00	; 0
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	2a f0       	brmi	.+10     	; 0xcd6 <__floatsisf+0x6c>
 ccc:	9a 95       	dec	r25
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	da f7       	brpl	.-10     	; 0xccc <__floatsisf+0x62>
 cd6:	88 0f       	add	r24, r24
 cd8:	96 95       	lsr	r25
 cda:	87 95       	ror	r24
 cdc:	97 f9       	bld	r25, 7
 cde:	08 95       	ret

00000ce0 <__fp_inf>:
 ce0:	97 f9       	bld	r25, 7
 ce2:	9f 67       	ori	r25, 0x7F	; 127
 ce4:	80 e8       	ldi	r24, 0x80	; 128
 ce6:	70 e0       	ldi	r23, 0x00	; 0
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	08 95       	ret

00000cec <__fp_nan>:
 cec:	9f ef       	ldi	r25, 0xFF	; 255
 cee:	80 ec       	ldi	r24, 0xC0	; 192
 cf0:	08 95       	ret

00000cf2 <__fp_pscA>:
 cf2:	00 24       	eor	r0, r0
 cf4:	0a 94       	dec	r0
 cf6:	16 16       	cp	r1, r22
 cf8:	17 06       	cpc	r1, r23
 cfa:	18 06       	cpc	r1, r24
 cfc:	09 06       	cpc	r0, r25
 cfe:	08 95       	ret

00000d00 <__fp_pscB>:
 d00:	00 24       	eor	r0, r0
 d02:	0a 94       	dec	r0
 d04:	12 16       	cp	r1, r18
 d06:	13 06       	cpc	r1, r19
 d08:	14 06       	cpc	r1, r20
 d0a:	05 06       	cpc	r0, r21
 d0c:	08 95       	ret

00000d0e <__fp_round>:
 d0e:	09 2e       	mov	r0, r25
 d10:	03 94       	inc	r0
 d12:	00 0c       	add	r0, r0
 d14:	11 f4       	brne	.+4      	; 0xd1a <__fp_round+0xc>
 d16:	88 23       	and	r24, r24
 d18:	52 f0       	brmi	.+20     	; 0xd2e <__fp_round+0x20>
 d1a:	bb 0f       	add	r27, r27
 d1c:	40 f4       	brcc	.+16     	; 0xd2e <__fp_round+0x20>
 d1e:	bf 2b       	or	r27, r31
 d20:	11 f4       	brne	.+4      	; 0xd26 <__fp_round+0x18>
 d22:	60 ff       	sbrs	r22, 0
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <__fp_round+0x20>
 d26:	6f 5f       	subi	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	08 95       	ret

00000d30 <__fp_split3>:
 d30:	57 fd       	sbrc	r21, 7
 d32:	90 58       	subi	r25, 0x80	; 128
 d34:	44 0f       	add	r20, r20
 d36:	55 1f       	adc	r21, r21
 d38:	59 f0       	breq	.+22     	; 0xd50 <__fp_splitA+0x10>
 d3a:	5f 3f       	cpi	r21, 0xFF	; 255
 d3c:	71 f0       	breq	.+28     	; 0xd5a <__fp_splitA+0x1a>
 d3e:	47 95       	ror	r20

00000d40 <__fp_splitA>:
 d40:	88 0f       	add	r24, r24
 d42:	97 fb       	bst	r25, 7
 d44:	99 1f       	adc	r25, r25
 d46:	61 f0       	breq	.+24     	; 0xd60 <__fp_splitA+0x20>
 d48:	9f 3f       	cpi	r25, 0xFF	; 255
 d4a:	79 f0       	breq	.+30     	; 0xd6a <__fp_splitA+0x2a>
 d4c:	87 95       	ror	r24
 d4e:	08 95       	ret
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	55 1f       	adc	r21, r21
 d58:	f2 cf       	rjmp	.-28     	; 0xd3e <__fp_split3+0xe>
 d5a:	46 95       	lsr	r20
 d5c:	f1 df       	rcall	.-30     	; 0xd40 <__fp_splitA>
 d5e:	08 c0       	rjmp	.+16     	; 0xd70 <__fp_splitA+0x30>
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	99 1f       	adc	r25, r25
 d68:	f1 cf       	rjmp	.-30     	; 0xd4c <__fp_splitA+0xc>
 d6a:	86 95       	lsr	r24
 d6c:	71 05       	cpc	r23, r1
 d6e:	61 05       	cpc	r22, r1
 d70:	08 94       	sec
 d72:	08 95       	ret

00000d74 <__fp_zero>:
 d74:	e8 94       	clt

00000d76 <__fp_szero>:
 d76:	bb 27       	eor	r27, r27
 d78:	66 27       	eor	r22, r22
 d7a:	77 27       	eor	r23, r23
 d7c:	cb 01       	movw	r24, r22
 d7e:	97 f9       	bld	r25, 7
 d80:	08 95       	ret

00000d82 <__mulsf3>:
 d82:	0e 94 d4 06 	call	0xda8	; 0xda8 <__mulsf3x>
 d86:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_round>
 d8a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscA>
 d8e:	38 f0       	brcs	.+14     	; 0xd9e <__mulsf3+0x1c>
 d90:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_pscB>
 d94:	20 f0       	brcs	.+8      	; 0xd9e <__mulsf3+0x1c>
 d96:	95 23       	and	r25, r21
 d98:	11 f0       	breq	.+4      	; 0xd9e <__mulsf3+0x1c>
 d9a:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 d9e:	0c 94 76 06 	jmp	0xcec	; 0xcec <__fp_nan>
 da2:	11 24       	eor	r1, r1
 da4:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>

00000da8 <__mulsf3x>:
 da8:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 dac:	70 f3       	brcs	.-36     	; 0xd8a <__mulsf3+0x8>

00000dae <__mulsf3_pse>:
 dae:	95 9f       	mul	r25, r21
 db0:	c1 f3       	breq	.-16     	; 0xda2 <__mulsf3+0x20>
 db2:	95 0f       	add	r25, r21
 db4:	50 e0       	ldi	r21, 0x00	; 0
 db6:	55 1f       	adc	r21, r21
 db8:	62 9f       	mul	r22, r18
 dba:	f0 01       	movw	r30, r0
 dbc:	72 9f       	mul	r23, r18
 dbe:	bb 27       	eor	r27, r27
 dc0:	f0 0d       	add	r31, r0
 dc2:	b1 1d       	adc	r27, r1
 dc4:	63 9f       	mul	r22, r19
 dc6:	aa 27       	eor	r26, r26
 dc8:	f0 0d       	add	r31, r0
 dca:	b1 1d       	adc	r27, r1
 dcc:	aa 1f       	adc	r26, r26
 dce:	64 9f       	mul	r22, r20
 dd0:	66 27       	eor	r22, r22
 dd2:	b0 0d       	add	r27, r0
 dd4:	a1 1d       	adc	r26, r1
 dd6:	66 1f       	adc	r22, r22
 dd8:	82 9f       	mul	r24, r18
 dda:	22 27       	eor	r18, r18
 ddc:	b0 0d       	add	r27, r0
 dde:	a1 1d       	adc	r26, r1
 de0:	62 1f       	adc	r22, r18
 de2:	73 9f       	mul	r23, r19
 de4:	b0 0d       	add	r27, r0
 de6:	a1 1d       	adc	r26, r1
 de8:	62 1f       	adc	r22, r18
 dea:	83 9f       	mul	r24, r19
 dec:	a0 0d       	add	r26, r0
 dee:	61 1d       	adc	r22, r1
 df0:	22 1f       	adc	r18, r18
 df2:	74 9f       	mul	r23, r20
 df4:	33 27       	eor	r19, r19
 df6:	a0 0d       	add	r26, r0
 df8:	61 1d       	adc	r22, r1
 dfa:	23 1f       	adc	r18, r19
 dfc:	84 9f       	mul	r24, r20
 dfe:	60 0d       	add	r22, r0
 e00:	21 1d       	adc	r18, r1
 e02:	82 2f       	mov	r24, r18
 e04:	76 2f       	mov	r23, r22
 e06:	6a 2f       	mov	r22, r26
 e08:	11 24       	eor	r1, r1
 e0a:	9f 57       	subi	r25, 0x7F	; 127
 e0c:	50 40       	sbci	r21, 0x00	; 0
 e0e:	9a f0       	brmi	.+38     	; 0xe36 <__mulsf3_pse+0x88>
 e10:	f1 f0       	breq	.+60     	; 0xe4e <__mulsf3_pse+0xa0>
 e12:	88 23       	and	r24, r24
 e14:	4a f0       	brmi	.+18     	; 0xe28 <__mulsf3_pse+0x7a>
 e16:	ee 0f       	add	r30, r30
 e18:	ff 1f       	adc	r31, r31
 e1a:	bb 1f       	adc	r27, r27
 e1c:	66 1f       	adc	r22, r22
 e1e:	77 1f       	adc	r23, r23
 e20:	88 1f       	adc	r24, r24
 e22:	91 50       	subi	r25, 0x01	; 1
 e24:	50 40       	sbci	r21, 0x00	; 0
 e26:	a9 f7       	brne	.-22     	; 0xe12 <__mulsf3_pse+0x64>
 e28:	9e 3f       	cpi	r25, 0xFE	; 254
 e2a:	51 05       	cpc	r21, r1
 e2c:	80 f0       	brcs	.+32     	; 0xe4e <__mulsf3_pse+0xa0>
 e2e:	0c 94 70 06 	jmp	0xce0	; 0xce0 <__fp_inf>
 e32:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>
 e36:	5f 3f       	cpi	r21, 0xFF	; 255
 e38:	e4 f3       	brlt	.-8      	; 0xe32 <__mulsf3_pse+0x84>
 e3a:	98 3e       	cpi	r25, 0xE8	; 232
 e3c:	d4 f3       	brlt	.-12     	; 0xe32 <__mulsf3_pse+0x84>
 e3e:	86 95       	lsr	r24
 e40:	77 95       	ror	r23
 e42:	67 95       	ror	r22
 e44:	b7 95       	ror	r27
 e46:	f7 95       	ror	r31
 e48:	e7 95       	ror	r30
 e4a:	9f 5f       	subi	r25, 0xFF	; 255
 e4c:	c1 f7       	brne	.-16     	; 0xe3e <__mulsf3_pse+0x90>
 e4e:	fe 2b       	or	r31, r30
 e50:	88 0f       	add	r24, r24
 e52:	91 1d       	adc	r25, r1
 e54:	96 95       	lsr	r25
 e56:	87 95       	ror	r24
 e58:	97 f9       	bld	r25, 7
 e5a:	08 95       	ret

00000e5c <round>:
 e5c:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_splitA>
 e60:	e8 f0       	brcs	.+58     	; 0xe9c <round+0x40>
 e62:	9e 37       	cpi	r25, 0x7E	; 126
 e64:	e8 f0       	brcs	.+58     	; 0xea0 <round+0x44>
 e66:	96 39       	cpi	r25, 0x96	; 150
 e68:	b8 f4       	brcc	.+46     	; 0xe98 <round+0x3c>
 e6a:	9e 38       	cpi	r25, 0x8E	; 142
 e6c:	48 f4       	brcc	.+18     	; 0xe80 <round+0x24>
 e6e:	67 2f       	mov	r22, r23
 e70:	78 2f       	mov	r23, r24
 e72:	88 27       	eor	r24, r24
 e74:	98 5f       	subi	r25, 0xF8	; 248
 e76:	f9 cf       	rjmp	.-14     	; 0xe6a <round+0xe>
 e78:	86 95       	lsr	r24
 e7a:	77 95       	ror	r23
 e7c:	67 95       	ror	r22
 e7e:	93 95       	inc	r25
 e80:	95 39       	cpi	r25, 0x95	; 149
 e82:	d0 f3       	brcs	.-12     	; 0xe78 <round+0x1c>
 e84:	b6 2f       	mov	r27, r22
 e86:	b1 70       	andi	r27, 0x01	; 1
 e88:	6b 0f       	add	r22, r27
 e8a:	71 1d       	adc	r23, r1
 e8c:	81 1d       	adc	r24, r1
 e8e:	20 f4       	brcc	.+8      	; 0xe98 <round+0x3c>
 e90:	87 95       	ror	r24
 e92:	77 95       	ror	r23
 e94:	67 95       	ror	r22
 e96:	93 95       	inc	r25
 e98:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_mintl>
 e9c:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_mpack>
 ea0:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_szero>

00000ea4 <__fp_mintl>:
 ea4:	88 23       	and	r24, r24
 ea6:	71 f4       	brne	.+28     	; 0xec4 <__fp_mintl+0x20>
 ea8:	77 23       	and	r23, r23
 eaa:	21 f0       	breq	.+8      	; 0xeb4 <__fp_mintl+0x10>
 eac:	98 50       	subi	r25, 0x08	; 8
 eae:	87 2b       	or	r24, r23
 eb0:	76 2f       	mov	r23, r22
 eb2:	07 c0       	rjmp	.+14     	; 0xec2 <__fp_mintl+0x1e>
 eb4:	66 23       	and	r22, r22
 eb6:	11 f4       	brne	.+4      	; 0xebc <__fp_mintl+0x18>
 eb8:	99 27       	eor	r25, r25
 eba:	0d c0       	rjmp	.+26     	; 0xed6 <__fp_mintl+0x32>
 ebc:	90 51       	subi	r25, 0x10	; 16
 ebe:	86 2b       	or	r24, r22
 ec0:	70 e0       	ldi	r23, 0x00	; 0
 ec2:	60 e0       	ldi	r22, 0x00	; 0
 ec4:	2a f0       	brmi	.+10     	; 0xed0 <__fp_mintl+0x2c>
 ec6:	9a 95       	dec	r25
 ec8:	66 0f       	add	r22, r22
 eca:	77 1f       	adc	r23, r23
 ecc:	88 1f       	adc	r24, r24
 ece:	da f7       	brpl	.-10     	; 0xec6 <__fp_mintl+0x22>
 ed0:	88 0f       	add	r24, r24
 ed2:	96 95       	lsr	r25
 ed4:	87 95       	ror	r24
 ed6:	97 f9       	bld	r25, 7
 ed8:	08 95       	ret

00000eda <__fp_mpack>:
 eda:	9f 3f       	cpi	r25, 0xFF	; 255
 edc:	31 f0       	breq	.+12     	; 0xeea <__fp_mpack_finite+0xc>

00000ede <__fp_mpack_finite>:
 ede:	91 50       	subi	r25, 0x01	; 1
 ee0:	20 f4       	brcc	.+8      	; 0xeea <__fp_mpack_finite+0xc>
 ee2:	87 95       	ror	r24
 ee4:	77 95       	ror	r23
 ee6:	67 95       	ror	r22
 ee8:	b7 95       	ror	r27
 eea:	88 0f       	add	r24, r24
 eec:	91 1d       	adc	r25, r1
 eee:	96 95       	lsr	r25
 ef0:	87 95       	ror	r24
 ef2:	97 f9       	bld	r25, 7
 ef4:	08 95       	ret

00000ef6 <__itoa_ncheck>:
 ef6:	bb 27       	eor	r27, r27
 ef8:	4a 30       	cpi	r20, 0x0A	; 10
 efa:	31 f4       	brne	.+12     	; 0xf08 <__itoa_ncheck+0x12>
 efc:	99 23       	and	r25, r25
 efe:	22 f4       	brpl	.+8      	; 0xf08 <__itoa_ncheck+0x12>
 f00:	bd e2       	ldi	r27, 0x2D	; 45
 f02:	90 95       	com	r25
 f04:	81 95       	neg	r24
 f06:	9f 4f       	sbci	r25, 0xFF	; 255
 f08:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__utoa_common>

00000f0c <__utoa_ncheck>:
 f0c:	bb 27       	eor	r27, r27

00000f0e <__utoa_common>:
 f0e:	fb 01       	movw	r30, r22
 f10:	55 27       	eor	r21, r21
 f12:	aa 27       	eor	r26, r26
 f14:	88 0f       	add	r24, r24
 f16:	99 1f       	adc	r25, r25
 f18:	aa 1f       	adc	r26, r26
 f1a:	a4 17       	cp	r26, r20
 f1c:	10 f0       	brcs	.+4      	; 0xf22 <__utoa_common+0x14>
 f1e:	a4 1b       	sub	r26, r20
 f20:	83 95       	inc	r24
 f22:	50 51       	subi	r21, 0x10	; 16
 f24:	b9 f7       	brne	.-18     	; 0xf14 <__utoa_common+0x6>
 f26:	a0 5d       	subi	r26, 0xD0	; 208
 f28:	aa 33       	cpi	r26, 0x3A	; 58
 f2a:	08 f0       	brcs	.+2      	; 0xf2e <__utoa_common+0x20>
 f2c:	a9 5d       	subi	r26, 0xD9	; 217
 f2e:	a1 93       	st	Z+, r26
 f30:	00 97       	sbiw	r24, 0x00	; 0
 f32:	79 f7       	brne	.-34     	; 0xf12 <__utoa_common+0x4>
 f34:	b1 11       	cpse	r27, r1
 f36:	b1 93       	st	Z+, r27
 f38:	11 92       	st	Z+, r1
 f3a:	cb 01       	movw	r24, r22
 f3c:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <strrev>

00000f40 <strrev>:
 f40:	dc 01       	movw	r26, r24
 f42:	fc 01       	movw	r30, r24
 f44:	67 2f       	mov	r22, r23
 f46:	71 91       	ld	r23, Z+
 f48:	77 23       	and	r23, r23
 f4a:	e1 f7       	brne	.-8      	; 0xf44 <strrev+0x4>
 f4c:	32 97       	sbiw	r30, 0x02	; 2
 f4e:	04 c0       	rjmp	.+8      	; 0xf58 <strrev+0x18>
 f50:	7c 91       	ld	r23, X
 f52:	6d 93       	st	X+, r22
 f54:	70 83       	st	Z, r23
 f56:	62 91       	ld	r22, -Z
 f58:	ae 17       	cp	r26, r30
 f5a:	bf 07       	cpc	r27, r31
 f5c:	c8 f3       	brcs	.-14     	; 0xf50 <strrev+0x10>
 f5e:	08 95       	ret

00000f60 <_exit>:
 f60:	f8 94       	cli

00000f62 <__stop_program>:
 f62:	ff cf       	rjmp	.-2      	; 0xf62 <__stop_program>
