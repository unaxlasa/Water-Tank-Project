
WaterTankTrial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00000ff0  00001084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001aa  008001aa  0000112e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020e4  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de1  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001175  00000000  00000000  00004235  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  000053ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b2  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eb7  00000000  00000000  00005f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_10>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3a       	cpi	r26, 0xAA	; 170
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa ea       	ldi	r26, 0xAA	; 170
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3b       	cpi	r26, 0xB8	; 184
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 04 	call	0x938	; 0x938 <main>
  9e:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <__vector_11>:
int counts;
float dist;
uint16_t us_per_count;

ISR(TIMER1_COMPA_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25

    //Generate a 12us pulse to trigger the HC-SR04
    HCSR_TRIGGER_PORT ^= (1 << HCSR_TRIGGER);
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	98 27       	eor	r25, r24
 104:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	9a 95       	dec	r25
 10a:	f1 f7       	brne	.-4      	; 0x108 <__vector_11+0x18>
    _delay_us(12);
    HCSR_TRIGGER_PORT ^= (1 << HCSR_TRIGGER);
 10c:	95 b1       	in	r25, 0x05	; 5
 10e:	89 27       	eor	r24, r25
 110:	85 b9       	out	0x05, r24	; 5
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31

    if (TCCR1B & (1 << ICES1))
 14e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 152:	86 ff       	sbrs	r24, 6
 154:	0e c0       	rjmp	.+28     	; 0x172 <__vector_10+0x52>
    {

        TCCR1B &= ~(1 << ICES1);
 156:	e1 e8       	ldi	r30, 0x81	; 129
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	80 83       	st	Z, r24
        rising = ICR1;
 160:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 164:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 168:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <rising+0x1>
 16c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <rising>
 170:	40 c0       	rjmp	.+128    	; 0x1f2 <__vector_10+0xd2>
    }
    else
    {
        TCCR1B |= (1 << ICES1);
 172:	e1 e8       	ldi	r30, 0x81	; 129
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
        falling = ICR1;
 17c:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 180:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 184:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <falling+0x1>
 188:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <falling>
        counts = falling - rising;
 18c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <rising>
 190:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <rising+0x1>
 194:	eb 01       	movw	r28, r22
 196:	c8 1b       	sub	r28, r24
 198:	d9 0b       	sbc	r29, r25
 19a:	d0 93 b5 01 	sts	0x01B5, r29	; 0x8001b5 <counts+0x1>
 19e:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <counts>
        dist = (float)us_per_count * counts * 10 / 580;
 1a2:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <us_per_count>
 1a6:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <us_per_count+0x1>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__floatunsisf>
 1b2:	6b 01       	movw	r12, r22
 1b4:	7c 01       	movw	r14, r24
 1b6:	be 01       	movw	r22, r28
 1b8:	dd 0f       	add	r29, r29
 1ba:	88 0b       	sbc	r24, r24
 1bc:	99 0b       	sbc	r25, r25
 1be:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__floatsisf>
 1c2:	a7 01       	movw	r20, r14
 1c4:	96 01       	movw	r18, r12
 1c6:	0e 94 07 07 	call	0xe0e	; 0xe0e <__mulsf3>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	40 e2       	ldi	r20, 0x20	; 32
 1d0:	51 e4       	ldi	r21, 0x41	; 65
 1d2:	0e 94 07 07 	call	0xe0e	; 0xe0e <__mulsf3>
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	41 e1       	ldi	r20, 0x11	; 17
 1dc:	54 e4       	ldi	r21, 0x44	; 68
 1de:	0e 94 d1 05 	call	0xba2	; 0xba2 <__divsf3>
 1e2:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <dist>
 1e6:	70 93 af 01 	sts	0x01AF, r23	; 0x8001af <dist+0x1>
 1ea:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <dist+0x2>
 1ee:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <dist+0x3>
    }
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <init_ultrasonic_sensor>:

void init_ultrasonic_sensor()
{
    // Trigger pin as output, connected to the sensor Pin B3
    HCSR_TRIGGER_DDR |= (1 << HCSR_TRIGGER);
 220:	84 b1       	in	r24, 0x04	; 4
 222:	88 60       	ori	r24, 0x08	; 8
 224:	84 b9       	out	0x04, r24	; 4

    //****TIMER1 INIT****//

    //noice reduction enable
    TCCR1B |= (1 << ICNC1);
 226:	e1 e8       	ldi	r30, 0x81	; 129
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 68       	ori	r24, 0x80	; 128
 22e:	80 83       	st	Z, r24

    //Prescale to 64
    TCCR1B |= (1 << CS10) | (1 << CS11);
 230:	80 81       	ld	r24, Z
 232:	83 60       	ori	r24, 0x03	; 3
 234:	80 83       	st	Z, r24

    //select CTC mode
    TCCR1B |= (1 << WGM12);
 236:	80 81       	ld	r24, Z
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	80 83       	st	Z, r24

    //read Int. at: rising edge, falling edge
    TIMSK1 |= (1 << ICIE1) | (1 << OCIE1A);
 23c:	af e6       	ldi	r26, 0x6F	; 111
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	8c 91       	ld	r24, X
 242:	82 62       	ori	r24, 0x22	; 34
 244:	8c 93       	st	X, r24

    //read Int. at rising edge
    TCCR1B |= (1 << ICES1);
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24

    //calculate TOP (70ms runtime for one cycle): 16MHz/64 = 25000 count/sec. = 25000/1000 = 2500 count/us / 100*70 = 17500 count/70ms
    OCR1A = 17500;
 24c:	8c e5       	ldi	r24, 0x5C	; 92
 24e:	94 e4       	ldi	r25, 0x44	; 68
 250:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 254:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    //CPU-speed / Prescale = cycles/sec. 1sec/ freq./sec. = 4 (t= 4us/cycle)
    us_per_count = 4;
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <us_per_count+0x1>
 260:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <us_per_count>
 264:	08 95       	ret

00000266 <get_dist>:
}

float get_dist()
{
	
    return dist;
 266:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <dist>
 26a:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <dist+0x1>
 26e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <dist+0x2>
 272:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <dist+0x3>
 276:	08 95       	ret

00000278 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	80 68       	ori	r24, 0x80	; 128
 27c:	85 b9       	out	0x05, r24	; 5
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <toggle_e+0x8>
 284:	00 00       	nop
 286:	85 b1       	in	r24, 0x05	; 5
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	85 b9       	out	0x05, r24	; 5
 28c:	08 95       	ret

0000028e <lcd_write>:
 28e:	cf 93       	push	r28
 290:	c8 2f       	mov	r28, r24
 292:	66 23       	and	r22, r22
 294:	21 f0       	breq	.+8      	; 0x29e <lcd_write+0x10>
 296:	85 b1       	in	r24, 0x05	; 5
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <lcd_write+0x16>
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	85 b9       	out	0x05, r24	; 5
 2a4:	8a b1       	in	r24, 0x0a	; 10
 2a6:	80 61       	ori	r24, 0x10	; 16
 2a8:	8a b9       	out	0x0a, r24	; 10
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	8a b9       	out	0x0a, r24	; 10
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	8a b9       	out	0x0a, r24	; 10
 2b6:	8a b1       	in	r24, 0x0a	; 10
 2b8:	80 68       	ori	r24, 0x80	; 128
 2ba:	8a b9       	out	0x0a, r24	; 10
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	8f 77       	andi	r24, 0x7F	; 127
 2c0:	8b b9       	out	0x0b, r24	; 11
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	8f 7b       	andi	r24, 0xBF	; 191
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	8f 7d       	andi	r24, 0xDF	; 223
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	8f 7e       	andi	r24, 0xEF	; 239
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	cc 23       	and	r28, r28
 2d6:	1c f4       	brge	.+6      	; 0x2de <lcd_write+0x50>
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	8b b9       	out	0x0b, r24	; 11
 2de:	c6 ff       	sbrs	r28, 6
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <lcd_write+0x5a>
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	8b b9       	out	0x0b, r24	; 11
 2e8:	c5 ff       	sbrs	r28, 5
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <lcd_write+0x64>
 2ec:	8b b1       	in	r24, 0x0b	; 11
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	8b b9       	out	0x0b, r24	; 11
 2f2:	c4 ff       	sbrs	r28, 4
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <lcd_write+0x6e>
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	8b b9       	out	0x0b, r24	; 11
 2fc:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	8f 77       	andi	r24, 0x7F	; 127
 304:	8b b9       	out	0x0b, r24	; 11
 306:	8b b1       	in	r24, 0x0b	; 11
 308:	8f 7b       	andi	r24, 0xBF	; 191
 30a:	8b b9       	out	0x0b, r24	; 11
 30c:	8b b1       	in	r24, 0x0b	; 11
 30e:	8f 7d       	andi	r24, 0xDF	; 223
 310:	8b b9       	out	0x0b, r24	; 11
 312:	8b b1       	in	r24, 0x0b	; 11
 314:	8f 7e       	andi	r24, 0xEF	; 239
 316:	8b b9       	out	0x0b, r24	; 11
 318:	c3 ff       	sbrs	r28, 3
 31a:	03 c0       	rjmp	.+6      	; 0x322 <lcd_write+0x94>
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	8b b9       	out	0x0b, r24	; 11
 322:	c2 ff       	sbrs	r28, 2
 324:	03 c0       	rjmp	.+6      	; 0x32c <lcd_write+0x9e>
 326:	8b b1       	in	r24, 0x0b	; 11
 328:	80 64       	ori	r24, 0x40	; 64
 32a:	8b b9       	out	0x0b, r24	; 11
 32c:	c1 ff       	sbrs	r28, 1
 32e:	03 c0       	rjmp	.+6      	; 0x336 <lcd_write+0xa8>
 330:	8b b1       	in	r24, 0x0b	; 11
 332:	80 62       	ori	r24, 0x20	; 32
 334:	8b b9       	out	0x0b, r24	; 11
 336:	c0 ff       	sbrs	r28, 0
 338:	03 c0       	rjmp	.+6      	; 0x340 <lcd_write+0xb2>
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	8b b9       	out	0x0b, r24	; 11
 340:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	80 61       	ori	r24, 0x10	; 16
 348:	8b b9       	out	0x0b, r24	; 11
 34a:	8b b1       	in	r24, 0x0b	; 11
 34c:	80 62       	ori	r24, 0x20	; 32
 34e:	8b b9       	out	0x0b, r24	; 11
 350:	8b b1       	in	r24, 0x0b	; 11
 352:	80 64       	ori	r24, 0x40	; 64
 354:	8b b9       	out	0x0b, r24	; 11
 356:	8b b1       	in	r24, 0x0b	; 11
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	8b b9       	out	0x0b, r24	; 11
 35c:	87 eb       	ldi	r24, 0xB7	; 183
 35e:	9b e0       	ldi	r25, 0x0B	; 11
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_write+0xd2>
 364:	00 c0       	rjmp	.+0      	; 0x366 <lcd_write+0xd8>
 366:	00 00       	nop
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <lcd_command>:
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_write>
 372:	08 95       	ret

00000374 <lcd_gotoxy>:
 374:	61 11       	cpse	r22, r1
 376:	04 c0       	rjmp	.+8      	; 0x380 <lcd_gotoxy+0xc>
 378:	80 58       	subi	r24, 0x80	; 128
 37a:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
 37e:	08 95       	ret
 380:	80 54       	subi	r24, 0x40	; 64
 382:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
 386:	08 95       	ret

00000388 <lcd_clrscr>:
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
 38e:	08 95       	ret

00000390 <lcd_putc>:
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_write>
 396:	08 95       	ret

00000398 <lcd_puts>:
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	fc 01       	movw	r30, r24
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <lcd_puts+0xe>
 3a0:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_putc>
 3a4:	fe 01       	movw	r30, r28
 3a6:	ef 01       	movw	r28, r30
 3a8:	21 96       	adiw	r28, 0x01	; 1
 3aa:	80 81       	ld	r24, Z
 3ac:	81 11       	cpse	r24, r1
 3ae:	f8 cf       	rjmp	.-16     	; 0x3a0 <lcd_puts+0x8>
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 3b6:	cf 93       	push	r28
 3b8:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 3ba:	84 b1       	in	r24, 0x04	; 4
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 3c0:	8a b1       	in	r24, 0x0a	; 10
 3c2:	80 62       	ori	r24, 0x20	; 32
 3c4:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 3c6:	84 b1       	in	r24, 0x04	; 4
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 3cc:	8a b1       	in	r24, 0x0a	; 10
 3ce:	80 61       	ori	r24, 0x10	; 16
 3d0:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 3d2:	8a b1       	in	r24, 0x0a	; 10
 3d4:	80 62       	ori	r24, 0x20	; 32
 3d6:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 3d8:	8a b1       	in	r24, 0x0a	; 10
 3da:	80 64       	ori	r24, 0x40	; 64
 3dc:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 3de:	8a b1       	in	r24, 0x0a	; 10
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	8a b9       	out	0x0a, r24	; 10
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	99 ef       	ldi	r25, 0xF9	; 249
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <lcd_init+0x32>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <lcd_init+0x38>
 3ee:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	80 62       	ori	r24, 0x20	; 32
 3f4:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 3f6:	8b b1       	in	r24, 0x0b	; 11
 3f8:	80 61       	ori	r24, 0x10	; 16
 3fa:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 3fc:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 400:	8f e1       	ldi	r24, 0x1F	; 31
 402:	9e e4       	ldi	r25, 0x4E	; 78
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 40c:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 41c:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 420:	8f ef       	ldi	r24, 0xFF	; 255
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 42c:	8b b1       	in	r24, 0x0b	; 11
 42e:	8f 7e       	andi	r24, 0xEF	; 239
 430:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 432:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 442:	88 e2       	ldi	r24, 0x28	; 40
 444:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 44e:	0e 94 c4 01 	call	0x388	; 0x388 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 452:	86 e0       	ldi	r24, 0x06	; 6
 454:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 458:	8c 2f       	mov	r24, r28
 45a:	0e 94 b6 01 	call	0x36c	; 0x36c <lcd_command>
}/* lcd_init */
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <HumidGetValue>:
	}

	return data[3];
}

uint16_t HumidGetValue(){
 462:	cf 93       	push	r28
		uint8_t result;
		//uint8_t result2;
		static uint8_t counter = 0x00;
		//static uint8_t counter1 = 0xFD;			 //Counter for real demostration
		//static uint8_t counter2 = 0xFE;	
		GPIO_write_high(&PORTC,PC3);
 464:	63 e0       	ldi	r22, 0x03	; 3
 466:	88 e2       	ldi	r24, 0x28	; 40
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		if (repeat>20){
 46e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <repeat>
 472:	85 31       	cpi	r24, 0x15	; 21
 474:	d0 f0       	brcs	.+52     	; 0x4aa <HumidGetValue+0x48>
			//Starts i2c with 1st addr-->wanting to write
			twi_start((humidity_addr<<1) + TWI_WRITE);
 476:	8e ee       	ldi	r24, 0xEE	; 238
 478:	0e 94 2f 05 	call	0xa5e	; 0xa5e <twi_start>
			//Writing 0x0 to the sensor with addr
			twi_write(counter);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 4c 05 	call	0xa98	; 0xa98 <twi_write>
			//Nothing else has to be sent
			twi_stop();
 482:	0e 94 60 05 	call	0xac0	; 0xac0 <twi_stop>
			TIM2_overflow_16ms();
 486:	e1 eb       	ldi	r30, 0xB1	; 177
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	87 60       	ori	r24, 0x07	; 7
 48e:	80 83       	st	Z, r24
			//After giving the	order to the slave we want to read
			twi_start((humidity_addr<<1) + TWI_READ);
 490:	8f ee       	ldi	r24, 0xEF	; 239
 492:	0e 94 2f 05 	call	0xa5e	; 0xa5e <twi_start>
			//Read the temperature integer part
			result=twi_read_nack();
 496:	0e 94 56 05 	call	0xaac	; 0xaac <twi_read_nack>
 49a:	c8 2f       	mov	r28, r24
			twi_stop();
 49c:	0e 94 60 05 	call	0xac0	; 0xac0 <twi_stop>
			repeat=0;
 4a0:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <repeat>
			return result;
 4a4:	8c 2f       	mov	r24, r28
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <HumidGetValue+0x56>
			//return result1<<8&result2;				Repeat the same to obtain two results and do a BitShift to sume them for Real Sensor
		}
		else{
			repeat++;
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <repeat>
		}

		return data[4];
 4b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <data+0x8>
 4b4:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <data+0x9>

	}
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <PumpToggle>:
 * Purpose:  Update the values of distance and pressure.
 * Returns:  none
 **********************************************************************/

void PumpToggle(){
	data[2]=!data[2];
 4bc:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <data+0x4>
 4c0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <data+0x5>
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	23 2b       	or	r18, r19
 4ca:	11 f0       	breq	.+4      	; 0x4d0 <PumpToggle+0x14>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <data+0x5>
 4d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <data+0x4>
	if(data[2]==1){
 4d8:	01 97       	sbiw	r24, 0x01	; 1
 4da:	31 f4       	brne	.+12     	; 0x4e8 <PumpToggle+0x2c>
		GPIO_write_high(&PORTD,1);
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	8b e2       	ldi	r24, 0x2B	; 43
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 4e6:	08 95       	ret
	}
	else{
		GPIO_write_low(&PORTD,1);
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	8b e2       	ldi	r24, 0x2B	; 43
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 4f2:	08 95       	ret

000004f4 <ValveSet>:
	}
}

void ValveSet(uint8_t openper){ //Set the opening range of valve % form
	setupServo(openper);
 4f4:	0e 94 04 05 	call	0xa08	; 0xa08 <setupServo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	87 ea       	ldi	r24, 0xA7	; 167
 4fc:	91 e6       	ldi	r25, 0x61	; 97
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <ValveSet+0xa>
 506:	00 c0       	rjmp	.+0      	; 0x508 <ValveSet+0x14>
 508:	00 00       	nop
	_delay_ms(2000);
	GPIO_write_low(&PORTD,PD0);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	8b e2       	ldi	r24, 0x2B	; 43
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	lcd_init(LCD_DISP_ON);
 514:	8c e0       	ldi	r24, 0x0C	; 12
 516:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_init>
 51a:	08 95       	ret

0000051c <ReadKeys>:
 * Function: Read biutton state
 * Purpose:  Proccess the press of the button, by changing the data when is posible.
 * Returns:  The setting value the user wants to see.
 **********************************************************************/

uint8_t ReadKeys( uint8_t setting, int value){
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	c8 2f       	mov	r28, r24
 526:	8b 01       	movw	r16, r22
	 
	uint8_t newset = setting;	

	if(value>80 && value<120){ //Up
 528:	cb 01       	movw	r24, r22
 52a:	81 55       	subi	r24, 0x51	; 81
 52c:	91 09       	sbc	r25, r1
 52e:	87 97       	sbiw	r24, 0x27	; 39
 530:	70 f4       	brcc	.+28     	; 0x54e <ReadKeys+0x32>
		if(newset<1||newset>50){
 532:	df ef       	ldi	r29, 0xFF	; 255
 534:	dc 0f       	add	r29, r28
 536:	d2 33       	cpi	r29, 0x32	; 50
 538:	08 f0       	brcs	.+2      	; 0x53c <ReadKeys+0x20>
			newset= 4;
 53a:	d4 e0       	ldi	r29, 0x04	; 4
		}
		else{
			newset = newset -1;		//UP is pressed 120. Change the display setting.
		}
		lcd_gotoxy(0,0);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
		lcd_puts("                                                                                                       "); //Resets screen
 544:	8c e0       	ldi	r24, 0x0C	; 12
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
 54c:	01 c0       	rjmp	.+2      	; 0x550 <ReadKeys+0x34>
 * Returns:  The setting value the user wants to see.
 **********************************************************************/

uint8_t ReadKeys( uint8_t setting, int value){
	 
	uint8_t newset = setting;	
 54e:	dc 2f       	mov	r29, r28
		}
		lcd_gotoxy(0,0);
		lcd_puts("                                                                                                       "); //Resets screen
	}
	
	if(value>200 && value< 300){ //DOWN
 550:	c8 01       	movw	r24, r16
 552:	89 5c       	subi	r24, 0xC9	; 201
 554:	91 09       	sbc	r25, r1
 556:	83 36       	cpi	r24, 0x63	; 99
 558:	91 05       	cpc	r25, r1
 55a:	70 f4       	brcc	.+28     	; 0x578 <ReadKeys+0x5c>
		if(newset>3){
 55c:	d4 30       	cpi	r29, 0x04	; 4
 55e:	18 f4       	brcc	.+6      	; 0x566 <ReadKeys+0x4a>
			newset = 0;
		}
		else{
			newset= setting + 1;
 560:	d1 e0       	ldi	r29, 0x01	; 1
 562:	dc 0f       	add	r29, r28
 564:	01 c0       	rjmp	.+2      	; 0x568 <ReadKeys+0x4c>
		lcd_puts("                                                                                                       "); //Resets screen
	}
	
	if(value>200 && value< 300){ //DOWN
		if(newset>3){
			newset = 0;
 566:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else{
			newset= setting + 1;
		}
		lcd_gotoxy(0,0);
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
		lcd_puts("                                                                                                       "); //Resets screen
 570:	8c e0       	ldi	r24, 0x0C	; 12
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
	}
	
	if(value>390 && value<430){ //LEFT //When left button is pressed 410.
 578:	c8 01       	movw	r24, r16
 57a:	87 58       	subi	r24, 0x87	; 135
 57c:	91 40       	sbci	r25, 0x01	; 1
 57e:	87 97       	sbiw	r24, 0x27	; 39
 580:	d8 f4       	brcc	.+54     	; 0x5b8 <ReadKeys+0x9c>
		if (setting==1 && data[setting] != 0 ){
 582:	c1 30       	cpi	r28, 0x01	; 1
 584:	a9 f4       	brne	.+42     	; 0x5b0 <ReadKeys+0x94>
 586:	2c 2f       	mov	r18, r28
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	f9 01       	movw	r30, r18
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	ef 5f       	subi	r30, 0xFF	; 255
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	80 81       	ld	r24, Z
 596:	91 81       	ldd	r25, Z+1	; 0x01
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	51 f0       	breq	.+20     	; 0x5b0 <ReadKeys+0x94>
			data[setting]=data[setting]-5;	//If it is possible to effit the number is bigger than 5 decrease the value in jumps of 5
 59c:	05 97       	sbiw	r24, 0x05	; 5
 59e:	22 0f       	add	r18, r18
 5a0:	33 1f       	adc	r19, r19
 5a2:	f9 01       	movw	r30, r18
 5a4:	ef 5f       	subi	r30, 0xFF	; 255
 5a6:	fe 4f       	sbci	r31, 0xFE	; 254
 5a8:	91 83       	std	Z+1, r25	; 0x01
 5aa:	80 83       	st	Z, r24
			ValveSet(data[setting]);
 5ac:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ValveSet>
		}
		if(setting==2){
 5b0:	c2 30       	cpi	r28, 0x02	; 2
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <ReadKeys+0x9c>
			PumpToggle();
 5b4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <PumpToggle>
		}
	}
	
	if(value < 80){ //Right
 5b8:	00 35       	cpi	r16, 0x50	; 80
 5ba:	11 05       	cpc	r17, r1
 5bc:	e4 f4       	brge	.+56     	; 0x5f6 <ReadKeys+0xda>
		if(data[setting] != 100 && setting==1){
 5be:	2c 2f       	mov	r18, r28
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	f9 01       	movw	r30, r18
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	ef 5f       	subi	r30, 0xFF	; 255
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	80 81       	ld	r24, Z
 5ce:	91 81       	ldd	r25, Z+1	; 0x01
 5d0:	84 36       	cpi	r24, 0x64	; 100
 5d2:	91 05       	cpc	r25, r1
 5d4:	61 f0       	breq	.+24     	; 0x5ee <ReadKeys+0xd2>
 5d6:	c1 30       	cpi	r28, 0x01	; 1
 5d8:	51 f4       	brne	.+20     	; 0x5ee <ReadKeys+0xd2>
			data[setting]=data[setting]+5;	//If it is possible to edit increase the value
 5da:	05 96       	adiw	r24, 0x05	; 5
 5dc:	22 0f       	add	r18, r18
 5de:	33 1f       	adc	r19, r19
 5e0:	f9 01       	movw	r30, r18
 5e2:	ef 5f       	subi	r30, 0xFF	; 255
 5e4:	fe 4f       	sbci	r31, 0xFE	; 254
 5e6:	91 83       	std	Z+1, r25	; 0x01
 5e8:	80 83       	st	Z, r24
			ValveSet(data[setting]);
 5ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <ValveSet>
		}
		if(setting==2){
 5ee:	c2 30       	cpi	r28, 0x02	; 2
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <ReadKeys+0xda>
			PumpToggle();
 5f2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <PumpToggle>
		}
	}
	return newset;
	
}
 5f6:	8d 2f       	mov	r24, r29
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	08 95       	ret

00000602 <DistanceSensorValue>:
 * Purpose:  Update the values of distance and pressure.
 * Returns:  none
 **********************************************************************/


int8_t DistanceSensorValue(uint8_t full){
 602:	cf 92       	push	r12
 604:	df 92       	push	r13
 606:	ef 92       	push	r14
 608:	ff 92       	push	r15
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
	if (repeat>10){
 610:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <repeat>
 614:	9b 30       	cpi	r25, 0x0B	; 11
 616:	50 f1       	brcs	.+84     	; 0x66c <DistanceSensorValue+0x6a>
 618:	18 2f       	mov	r17, r24
		repeat=0;
 61a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <repeat>
		TIM1_stop();
 61e:	c1 e8       	ldi	r28, 0x81	; 129
 620:	d0 e0       	ldi	r29, 0x00	; 0
 622:	88 81       	ld	r24, Y
 624:	88 7f       	andi	r24, 0xF8	; 248
 626:	88 83       	st	Y, r24
		init_ultrasonic_sensor();
 628:	0e 94 10 01 	call	0x220	; 0x220 <init_ultrasonic_sensor>
		float distance = get_dist();
 62c:	0e 94 33 01 	call	0x266	; 0x266 <get_dist>
 630:	6b 01       	movw	r12, r22
 632:	7c 01       	movw	r14, r24
		TIM1_stop();
 634:	88 81       	ld	r24, Y
 636:	88 7f       	andi	r24, 0xF8	; 248
 638:	88 83       	st	Y, r24
		lcd_init(LCD_DISP_ON);
 63a:	8c e0       	ldi	r24, 0x0C	; 12
 63c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_init>
		return round((full -distance)/10);
 640:	61 2f       	mov	r22, r17
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__floatsisf>
 64c:	a7 01       	movw	r20, r14
 64e:	96 01       	movw	r18, r12
 650:	0e 94 64 05 	call	0xac8	; 0xac8 <__subsf3>
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	40 e2       	ldi	r20, 0x20	; 32
 65a:	51 e4       	ldi	r21, 0x41	; 65
 65c:	0e 94 d1 05 	call	0xba2	; 0xba2 <__divsf3>
 660:	0e 94 74 07 	call	0xee8	; 0xee8 <round>
 664:	0e 94 43 06 	call	0xc86	; 0xc86 <__fixsfsi>
 668:	86 2f       	mov	r24, r22
 66a:	05 c0       	rjmp	.+10     	; 0x676 <DistanceSensorValue+0x74>
		
	}
	else{
		repeat++;
 66c:	9f 5f       	subi	r25, 0xFF	; 255
 66e:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <repeat>
	}
	return data[0];
 672:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <data>
}
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	1f 91       	pop	r17
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	08 95       	ret

00000686 <PressureGetValue>:
 * Function: Get the value of the Pressure
 * Purpose:  Read the pressure at the bottom of the tank. Taking into account the water level
 * Returns:  The pressure at the bottom of the tank
 **********************************************************************/

uint16_t PressureGetValue(){
 686:	cf 92       	push	r12
 688:	df 92       	push	r13
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	cf 93       	push	r28
	uint8_t result;
	//uint8_t result2;
	static uint8_t adress = 0x01;
	//static uint8_t counter1 = 0xFD;			 //Counter for moving through I2C RAM registers
	//static uint8_t counter2 = 0xFE;
	GPIO_write_high(&PORTC,PC3);
 690:	63 e0       	ldi	r22, 0x03	; 3
 692:	88 e2       	ldi	r24, 0x28	; 40
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
	if (repeat>20){
 69a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <repeat>
 69e:	85 31       	cpi	r24, 0x15	; 21
 6a0:	08 f4       	brcc	.+2      	; 0x6a4 <PressureGetValue+0x1e>
 6a2:	3f c0       	rjmp	.+126    	; 0x722 <PressureGetValue+0x9c>
		//Starts i2c with 1st addr-->wanting to write
		twi_start((preassure_addr<<1) + TWI_WRITE);
 6a4:	8e ee       	ldi	r24, 0xEE	; 238
 6a6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <twi_start>
		//Writing 0x0 to the sensor with addr
		twi_write(adress);
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 4c 05 	call	0xa98	; 0xa98 <twi_write>
		//Nothing else has to be sent
		twi_stop();
 6b0:	0e 94 60 05 	call	0xac0	; 0xac0 <twi_stop>
		TIM2_overflow_16ms();
 6b4:	e1 eb       	ldi	r30, 0xB1	; 177
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	87 60       	ori	r24, 0x07	; 7
 6bc:	80 83       	st	Z, r24
		//After giving the	order to the slave we want to read
		twi_start((preassure_addr<<1) + TWI_READ);
 6be:	8f ee       	ldi	r24, 0xEF	; 239
 6c0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <twi_start>
		//Read the temperature integer part
		result=twi_read_nack();
 6c4:	0e 94 56 05 	call	0xaac	; 0xaac <twi_read_nack>
 6c8:	c8 2f       	mov	r28, r24
		twi_stop();
 6ca:	0e 94 60 05 	call	0xac0	; 0xac0 <twi_stop>
		repeat=0;
 6ce:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <repeat>
		uint8_t distance = DistanceSensorValue(full);
 6d2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <full>
 6d6:	0e 94 01 03 	call	0x602	; 0x602 <DistanceSensorValue>
		return round(result+distance*9.8/100);
 6da:	68 2f       	mov	r22, r24
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__floatsisf>
 6e6:	2d ec       	ldi	r18, 0xCD	; 205
 6e8:	3c ec       	ldi	r19, 0xCC	; 204
 6ea:	4c e1       	ldi	r20, 0x1C	; 28
 6ec:	51 e4       	ldi	r21, 0x41	; 65
 6ee:	0e 94 07 07 	call	0xe0e	; 0xe0e <__mulsf3>
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	48 ec       	ldi	r20, 0xC8	; 200
 6f8:	52 e4       	ldi	r21, 0x42	; 66
 6fa:	0e 94 d1 05 	call	0xba2	; 0xba2 <__divsf3>
 6fe:	6b 01       	movw	r12, r22
 700:	7c 01       	movw	r14, r24
 702:	6c 2f       	mov	r22, r28
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__floatsisf>
 70e:	a7 01       	movw	r20, r14
 710:	96 01       	movw	r18, r12
 712:	0e 94 65 05 	call	0xaca	; 0xaca <__addsf3>
 716:	0e 94 74 07 	call	0xee8	; 0xee8 <round>
 71a:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fixunssfsi>
 71e:	cb 01       	movw	r24, r22
 720:	07 c0       	rjmp	.+14     	; 0x730 <PressureGetValue+0xaa>
		//return result1<<8&result2;
	}
	else{
		repeat++;
 722:	8f 5f       	subi	r24, 0xFF	; 255
 724:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <repeat>
	}

	return data[3];
 728:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <data+0x6>
 72c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <data+0x7>
}
 730:	cf 91       	pop	r28
 732:	ff 90       	pop	r15
 734:	ef 90       	pop	r14
 736:	df 90       	pop	r13
 738:	cf 90       	pop	r12
 73a:	08 95       	ret

0000073c <Display>:
/**********************************************************************
 * Function: LCD Display
 * Purpose:  Shows the data the user wants.
 * Returns:  none
 **********************************************************************/
 void Display(uint8_t setting){
 73c:	0f 93       	push	r16
 73e:	1f 93       	push	r17
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	00 d0       	rcall	.+0      	; 0x746 <Display+0xa>
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	08 2f       	mov	r16, r24
 
	 char lcd_string[2] = " ";
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	9a 83       	std	Y+2, r25	; 0x02
 752:	89 83       	std	Y+1, r24	; 0x01
	 lcd_gotoxy(0,1);
 754:	61 e0       	ldi	r22, 0x01	; 1
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
	 
	 switch (setting)					//Defines the display of each setting
 75c:	02 30       	cpi	r16, 0x02	; 2
 75e:	09 f4       	brne	.+2      	; 0x762 <Display+0x26>
 760:	66 c0       	rjmp	.+204    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 762:	28 f4       	brcc	.+10     	; 0x76e <Display+0x32>
 764:	00 23       	and	r16, r16
 766:	51 f0       	breq	.+20     	; 0x77c <Display+0x40>
 768:	01 30       	cpi	r16, 0x01	; 1
 76a:	b1 f1       	breq	.+108    	; 0x7d8 <Display+0x9c>
 76c:	de c0       	rjmp	.+444    	; 0x92a <__stack+0x2b>
 76e:	03 30       	cpi	r16, 0x03	; 3
 770:	09 f4       	brne	.+2      	; 0x774 <Display+0x38>
 772:	82 c0       	rjmp	.+260    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 774:	04 30       	cpi	r16, 0x04	; 4
 776:	09 f4       	brne	.+2      	; 0x77a <Display+0x3e>
 778:	a8 c0       	rjmp	.+336    	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 77a:	d7 c0       	rjmp	.+430    	; 0x92a <__stack+0x2b>
	 {
		 case 0:		//Depth
			 data[0] = DistanceSensorValue(full);		//Update the water level
 77c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <full>
 780:	0e 94 01 03 	call	0x602	; 0x602 <DistanceSensorValue>
 784:	08 2e       	mov	r0, r24
 786:	00 0c       	add	r0, r0
 788:	99 0b       	sbc	r25, r25
 78a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <data+0x1>
 78e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <data>
			 itoa(data[setting],lcd_string,10);
 792:	e0 2f       	mov	r30, r16
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ee 0f       	add	r30, r30
 798:	ff 1f       	adc	r31, r31
 79a:	ef 5f       	subi	r30, 0xFF	; 255
 79c:	fe 4f       	sbci	r31, 0xFE	; 254
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 79e:	4a e0       	ldi	r20, 0x0A	; 10
 7a0:	be 01       	movw	r22, r28
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	80 81       	ld	r24, Z
 7a8:	91 81       	ldd	r25, Z+1	; 0x01
 7aa:	0e 94 c1 07 	call	0xf82	; 0xf82 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(0,0);
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("Depth:");
 7be:	84 e7       	ldi	r24, 0x74	; 116
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(5,1);
 7c6:	61 e0       	ldi	r22, 0x01	; 1
 7c8:	85 e0       	ldi	r24, 0x05	; 5
 7ca:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("cm");
 7ce:	8b e7       	ldi	r24, 0x7B	; 123
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 break;
 7d6:	a9 c0       	rjmp	.+338    	; 0x92a <__stack+0x2b>
		 case 1:		//Valve open ratio
			 itoa(data[setting],lcd_string,10);
 7d8:	e0 2f       	mov	r30, r16
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	ee 0f       	add	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	ef 5f       	subi	r30, 0xFF	; 255
 7e2:	fe 4f       	sbci	r31, 0xFE	; 254
 7e4:	4a e0       	ldi	r20, 0x0A	; 10
 7e6:	be 01       	movw	r22, r28
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
 7ea:	7f 4f       	sbci	r23, 0xFF	; 255
 7ec:	80 81       	ld	r24, Z
 7ee:	91 81       	ldd	r25, Z+1	; 0x01
 7f0:	0e 94 c1 07 	call	0xf82	; 0xf82 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 7f4:	ce 01       	movw	r24, r28
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(2,1);
 7fc:	61 e0       	ldi	r22, 0x01	; 1
 7fe:	82 e0       	ldi	r24, 0x02	; 2
 800:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts(" ");
 804:	82 e7       	ldi	r24, 0x72	; 114
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(0,0);
 80c:	60 e0       	ldi	r22, 0x00	; 0
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("Valve:");
 814:	8e e7       	ldi	r24, 0x7E	; 126
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(5,1);
 81c:	61 e0       	ldi	r22, 0x01	; 1
 81e:	85 e0       	ldi	r24, 0x05	; 5
 820:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("%");
 824:	85 e8       	ldi	r24, 0x85	; 133
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 break;
 82c:	7e c0       	rjmp	.+252    	; 0x92a <__stack+0x2b>
		 case 2:		//Pump state
			 itoa(data[setting],lcd_string,10);
 82e:	10 e0       	ldi	r17, 0x00	; 0
 830:	00 0f       	add	r16, r16
 832:	11 1f       	adc	r17, r17
 834:	0f 5f       	subi	r16, 0xFF	; 255
 836:	1e 4f       	sbci	r17, 0xFE	; 254
 838:	4a e0       	ldi	r20, 0x0A	; 10
 83a:	be 01       	movw	r22, r28
 83c:	6f 5f       	subi	r22, 0xFF	; 255
 83e:	7f 4f       	sbci	r23, 0xFF	; 255
 840:	f8 01       	movw	r30, r16
 842:	80 81       	ld	r24, Z
 844:	91 81       	ldd	r25, Z+1	; 0x01
 846:	0e 94 c1 07 	call	0xf82	; 0xf82 <__itoa_ncheck>
			 if(data[setting]==1){
 84a:	f8 01       	movw	r30, r16
 84c:	80 81       	ld	r24, Z
 84e:	91 81       	ldd	r25, Z+1	; 0x01
 850:	01 97       	sbiw	r24, 0x01	; 1
 852:	29 f4       	brne	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
				 lcd_puts("On ");
 854:	87 e8       	ldi	r24, 0x87	; 135
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
 85c:	04 c0       	rjmp	.+8      	; 0x866 <__DATA_REGION_LENGTH__+0x66>

			 }
			 else{
				 lcd_puts("Off");
 85e:	8b e8       	ldi	r24, 0x8B	; 139
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 }
			 lcd_gotoxy(0,0);
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("Pump:");
 86e:	8f e8       	ldi	r24, 0x8F	; 143
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 break;
 876:	59 c0       	rjmp	.+178    	; 0x92a <__stack+0x2b>
		 case 3:		//Pressure
			 data[3] = PressureGetValue();		//Update the pressure at the bottom of the tank
 878:	0e 94 43 03 	call	0x686	; 0x686 <PressureGetValue>
 87c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <data+0x7>
 880:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <data+0x6>
			 itoa(data[setting],lcd_string,10);
 884:	e0 2f       	mov	r30, r16
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	ef 5f       	subi	r30, 0xFF	; 255
 88e:	fe 4f       	sbci	r31, 0xFE	; 254
 890:	4a e0       	ldi	r20, 0x0A	; 10
 892:	be 01       	movw	r22, r28
 894:	6f 5f       	subi	r22, 0xFF	; 255
 896:	7f 4f       	sbci	r23, 0xFF	; 255
 898:	80 81       	ld	r24, Z
 89a:	91 81       	ldd	r25, Z+1	; 0x01
 89c:	0e 94 c1 07 	call	0xf82	; 0xf82 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 8a0:	ce 01       	movw	r24, r28
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(0,0);
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("Pressure:");
 8b0:	85 e9       	ldi	r24, 0x95	; 149
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(5,1);
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	85 e0       	ldi	r24, 0x05	; 5
 8bc:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("Pa");
 8c0:	8f e9       	ldi	r24, 0x9F	; 159
 8c2:	91 e0       	ldi	r25, 0x01	; 1
 8c4:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 break;
 8c8:	30 c0       	rjmp	.+96     	; 0x92a <__stack+0x2b>
		 case 4:

			 data[4] = HumidGetValue();
 8ca:	0e 94 31 02 	call	0x462	; 0x462 <HumidGetValue>
 8ce:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <data+0x9>
 8d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <data+0x8>
			 itoa(data[setting],lcd_string,10);
 8d6:	e0 2f       	mov	r30, r16
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	ef 5f       	subi	r30, 0xFF	; 255
 8e0:	fe 4f       	sbci	r31, 0xFE	; 254
 8e2:	4a e0       	ldi	r20, 0x0A	; 10
 8e4:	be 01       	movw	r22, r28
 8e6:	6f 5f       	subi	r22, 0xFF	; 255
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	80 81       	ld	r24, Z
 8ec:	91 81       	ldd	r25, Z+1	; 0x01
 8ee:	0e 94 c1 07 	call	0xf82	; 0xf82 <__itoa_ncheck>
			 lcd_puts(lcd_string);
 8f2:	ce 01       	movw	r24, r28
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(2,1);
 8fa:	61 e0       	ldi	r22, 0x01	; 1
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts(" ");
 902:	82 e7       	ldi	r24, 0x72	; 114
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(0,0);
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("Humid:");
 912:	82 ea       	ldi	r24, 0xA2	; 162
 914:	91 e0       	ldi	r25, 0x01	; 1
 916:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 lcd_gotoxy(5,1);
 91a:	61 e0       	ldi	r22, 0x01	; 1
 91c:	85 e0       	ldi	r24, 0x05	; 5
 91e:	0e 94 ba 01 	call	0x374	; 0x374 <lcd_gotoxy>
			 lcd_puts("%");
 922:	85 e8       	ldi	r24, 0x85	; 133
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_puts>
			 break;
		 
	 } 
 }
 92a:	0f 90       	pop	r0
 92c:	0f 90       	pop	r0
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	08 95       	ret

00000938 <main>:
 * Function: Main function where the program execution begins
 * Purpose:  Update the values of distance and pressure.
 * Returns:  none
 **********************************************************************/
void main(void){
	GPIO_config_output(&DDRC,PC3);
 938:	63 e0       	ldi	r22, 0x03	; 3
 93a:	87 e2       	ldi	r24, 0x27	; 39
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	init_ultrasonic_sensor();
 942:	0e 94 10 01 	call	0x220	; 0x220 <init_ultrasonic_sensor>
	lcd_init(LCD_DISP_ON);
 946:	8c e0       	ldi	r24, 0x0C	; 12
 948:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_init>
	GPIO_config_output(&DDRD, PUMP_PIN);
 94c:	61 e0       	ldi	r22, 0x01	; 1
 94e:	8a e2       	ldi	r24, 0x2A	; 42
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD0);
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	8a e2       	ldi	r24, 0x2A	; 42
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	twi_init();
 960:	0e 94 20 05 	call	0xa40	; 0xa40 <twi_init>
	// Configure ADC to convert PC0[A0] analog value
	
	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
 964:	ec e7       	ldi	r30, 0x7C	; 124
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	80 64       	ori	r24, 0x40	; 64
 96c:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
 96e:	80 81       	ld	r24, Z
 970:	8f 77       	andi	r24, 0x7F	; 127
 972:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~(1<<MUX3|1<<MUX2|1<<MUX1|1<<MUX0);
 974:	80 81       	ld	r24, Z
 976:	80 7f       	andi	r24, 0xF0	; 240
 978:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
 97a:	ea e7       	ldi	r30, 0x7A	; 122
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	80 68       	ori	r24, 0x80	; 128
 982:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	sei();
 984:	78 94       	sei

	
	while(1){
		ADCSRA |= (1<<ADSC);
 986:	ea e7       	ldi	r30, 0x7A	; 122
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	80 64       	ori	r24, 0x40	; 64
 98e:	80 83       	st	Z, r24
		setting=ReadKeys(setting, ADC);
 990:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 994:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 998:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 99c:	0e 94 8e 02 	call	0x51c	; 0x51c <ReadKeys>
 9a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 9a4:	2f ef       	ldi	r18, 0xFF	; 255
 9a6:	83 ec       	ldi	r24, 0xC3	; 195
 9a8:	99 e0       	ldi	r25, 0x09	; 9
 9aa:	21 50       	subi	r18, 0x01	; 1
 9ac:	80 40       	sbci	r24, 0x00	; 0
 9ae:	90 40       	sbci	r25, 0x00	; 0
 9b0:	e1 f7       	brne	.-8      	; 0x9aa <main+0x72>
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <main+0x7c>
 9b4:	00 00       	nop
		_delay_ms(200);
		Display(setting);			//Update the displayz
 9b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9ba:	0e 94 9e 03 	call	0x73c	; 0x73c <Display>
        GPIO_write_low(&PORTC,PC3);
 9be:	63 e0       	ldi	r22, 0x03	; 3
 9c0:	88 e2       	ldi	r24, 0x28	; 40
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		if(check_period > 6){					//Even if the setting is not meassure all values in backgraunds every 40 loops (6*20/3)
 9c8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 9cc:	87 30       	cpi	r24, 0x07	; 7
 9ce:	c8 f0       	brcs	.+50     	; 0xa02 <main+0xca>
			data[0]= DistanceSensorValue(full);
 9d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <full>
 9d4:	0e 94 01 03 	call	0x602	; 0x602 <DistanceSensorValue>
 9d8:	c1 e0       	ldi	r28, 0x01	; 1
 9da:	d1 e0       	ldi	r29, 0x01	; 1
 9dc:	08 2e       	mov	r0, r24
 9de:	00 0c       	add	r0, r0
 9e0:	99 0b       	sbc	r25, r25
 9e2:	99 83       	std	Y+1, r25	; 0x01
 9e4:	88 83       	st	Y, r24
			data[3]= PressureGetValue();
 9e6:	0e 94 43 03 	call	0x686	; 0x686 <PressureGetValue>
 9ea:	9f 83       	std	Y+7, r25	; 0x07
 9ec:	8e 83       	std	Y+6, r24	; 0x06
			data[4]= HumidGetValue();
 9ee:	0e 94 31 02 	call	0x462	; 0x462 <HumidGetValue>
 9f2:	99 87       	std	Y+9, r25	; 0x09
 9f4:	88 87       	std	Y+8, r24	; 0x08
			check_period++;
 9f6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 9fa:	8f 5f       	subi	r24, 0xFF	; 255
 9fc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
 a00:	c2 cf       	rjmp	.-124    	; 0x986 <main+0x4e>
		}
		else{
			check_period=0;
 a02:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 a06:	bf cf       	rjmp	.-130    	; 0x986 <main+0x4e>

00000a08 <setupServo>:
uint16_t cicle_ON;


void setupServo( uint8_t porcentage)
{
	TCNT1 = 0;		/* Set timer1 count zero */
 a08:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 a0c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 39999;		/* Set TOP count for timer1 in ICR1 register */
 a10:	8f e3       	ldi	r24, 0x3F	; 63
 a12:	9c e9       	ldi	r25, 0x9C	; 156
 a14:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 a18:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR2A =  (1 << COM1A1) | (0 << COM1A0) ; // When the compare match is the same we set it low
 a1c:	e0 eb       	ldi	r30, 0xB0	; 176
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	80 e8       	ldi	r24, 0x80	; 128
 a22:	80 83       	st	Z, r24
	TCCR2A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM: TOP: ICR1
 a24:	80 81       	ld	r24, Z
 a26:	82 60       	ori	r24, 0x02	; 2
 a28:	80 83       	st	Z, r24
	TCCR2B = (1 << WGM13) | (1 << WGM12); // // Fast PWM: TOP: ICR1
 a2a:	e1 eb       	ldi	r30, 0xB1	; 177
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	88 e1       	ldi	r24, 0x18	; 24
 a30:	80 83       	st	Z, r24
	TCCR2B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Preesc = 8
 a32:	80 81       	ld	r24, Z
 a34:	82 60       	ori	r24, 0x02	; 2
 a36:	80 83       	st	Z, r24
	OCR2B=2000;
 a38:	80 ed       	ldi	r24, 0xD0	; 208
 a3a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 a3e:	08 95       	ret

00000a40 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 a40:	87 b1       	in	r24, 0x07	; 7
 a42:	8f 7c       	andi	r24, 0xCF	; 207
 a44:	87 b9       	out	0x07, r24	; 7
 a46:	88 b1       	in	r24, 0x08	; 8
 a48:	80 63       	ori	r24, 0x30	; 48
 a4a:	88 b9       	out	0x08, r24	; 8
 a4c:	e9 eb       	ldi	r30, 0xB9	; 185
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	8c 7f       	andi	r24, 0xFC	; 252
 a54:	80 83       	st	Z, r24
 a56:	88 e9       	ldi	r24, 0x98	; 152
 a58:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 a5c:	08 95       	ret

00000a5e <twi_start>:
 a5e:	94 ea       	ldi	r25, 0xA4	; 164
 a60:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a64:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a68:	99 23       	and	r25, r25
 a6a:	e4 f7       	brge	.-8      	; 0xa64 <twi_start+0x6>
 a6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 a70:	84 e8       	ldi	r24, 0x84	; 132
 a72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 a7a:	88 23       	and	r24, r24
 a7c:	e4 f7       	brge	.-8      	; 0xa76 <twi_start+0x18>
 a7e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 a82:	88 7f       	andi	r24, 0xF8	; 248
 a84:	88 31       	cpi	r24, 0x18	; 24
 a86:	21 f0       	breq	.+8      	; 0xa90 <twi_start+0x32>
 a88:	80 34       	cpi	r24, 0x40	; 64
 a8a:	21 f4       	brne	.+8      	; 0xa94 <twi_start+0x36>
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	08 95       	ret
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	08 95       	ret
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	08 95       	ret

00000a98 <twi_write>:
 a98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 a9c:	84 e8       	ldi	r24, 0x84	; 132
 a9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 aa2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 aa6:	88 23       	and	r24, r24
 aa8:	e4 f7       	brge	.-8      	; 0xaa2 <twi_write+0xa>
 aaa:	08 95       	ret

00000aac <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 aac:	84 e8       	ldi	r24, 0x84	; 132
 aae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 ab2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 ab6:	88 23       	and	r24, r24
 ab8:	e4 f7       	brge	.-8      	; 0xab2 <twi_read_nack+0x6>
    return (TWDR);
 aba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 abe:	08 95       	ret

00000ac0 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 ac0:	84 e9       	ldi	r24, 0x94	; 148
 ac2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 ac6:	08 95       	ret

00000ac8 <__subsf3>:
 ac8:	50 58       	subi	r21, 0x80	; 128

00000aca <__addsf3>:
 aca:	bb 27       	eor	r27, r27
 acc:	aa 27       	eor	r26, r26
 ace:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__addsf3x>
 ad2:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_round>
 ad6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_pscA>
 ada:	38 f0       	brcs	.+14     	; 0xaea <__addsf3+0x20>
 adc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_pscB>
 ae0:	20 f0       	brcs	.+8      	; 0xaea <__addsf3+0x20>
 ae2:	39 f4       	brne	.+14     	; 0xaf2 <__addsf3+0x28>
 ae4:	9f 3f       	cpi	r25, 0xFF	; 255
 ae6:	19 f4       	brne	.+6      	; 0xaee <__addsf3+0x24>
 ae8:	26 f4       	brtc	.+8      	; 0xaf2 <__addsf3+0x28>
 aea:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_nan>
 aee:	0e f4       	brtc	.+2      	; 0xaf2 <__addsf3+0x28>
 af0:	e0 95       	com	r30
 af2:	e7 fb       	bst	r30, 7
 af4:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_inf>

00000af8 <__addsf3x>:
 af8:	e9 2f       	mov	r30, r25
 afa:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_split3>
 afe:	58 f3       	brcs	.-42     	; 0xad6 <__addsf3+0xc>
 b00:	ba 17       	cp	r27, r26
 b02:	62 07       	cpc	r22, r18
 b04:	73 07       	cpc	r23, r19
 b06:	84 07       	cpc	r24, r20
 b08:	95 07       	cpc	r25, r21
 b0a:	20 f0       	brcs	.+8      	; 0xb14 <__addsf3x+0x1c>
 b0c:	79 f4       	brne	.+30     	; 0xb2c <__addsf3x+0x34>
 b0e:	a6 f5       	brtc	.+104    	; 0xb78 <__addsf3x+0x80>
 b10:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_zero>
 b14:	0e f4       	brtc	.+2      	; 0xb18 <__addsf3x+0x20>
 b16:	e0 95       	com	r30
 b18:	0b 2e       	mov	r0, r27
 b1a:	ba 2f       	mov	r27, r26
 b1c:	a0 2d       	mov	r26, r0
 b1e:	0b 01       	movw	r0, r22
 b20:	b9 01       	movw	r22, r18
 b22:	90 01       	movw	r18, r0
 b24:	0c 01       	movw	r0, r24
 b26:	ca 01       	movw	r24, r20
 b28:	a0 01       	movw	r20, r0
 b2a:	11 24       	eor	r1, r1
 b2c:	ff 27       	eor	r31, r31
 b2e:	59 1b       	sub	r21, r25
 b30:	99 f0       	breq	.+38     	; 0xb58 <__addsf3x+0x60>
 b32:	59 3f       	cpi	r21, 0xF9	; 249
 b34:	50 f4       	brcc	.+20     	; 0xb4a <__addsf3x+0x52>
 b36:	50 3e       	cpi	r21, 0xE0	; 224
 b38:	68 f1       	brcs	.+90     	; 0xb94 <__addsf3x+0x9c>
 b3a:	1a 16       	cp	r1, r26
 b3c:	f0 40       	sbci	r31, 0x00	; 0
 b3e:	a2 2f       	mov	r26, r18
 b40:	23 2f       	mov	r18, r19
 b42:	34 2f       	mov	r19, r20
 b44:	44 27       	eor	r20, r20
 b46:	58 5f       	subi	r21, 0xF8	; 248
 b48:	f3 cf       	rjmp	.-26     	; 0xb30 <__addsf3x+0x38>
 b4a:	46 95       	lsr	r20
 b4c:	37 95       	ror	r19
 b4e:	27 95       	ror	r18
 b50:	a7 95       	ror	r26
 b52:	f0 40       	sbci	r31, 0x00	; 0
 b54:	53 95       	inc	r21
 b56:	c9 f7       	brne	.-14     	; 0xb4a <__addsf3x+0x52>
 b58:	7e f4       	brtc	.+30     	; 0xb78 <__addsf3x+0x80>
 b5a:	1f 16       	cp	r1, r31
 b5c:	ba 0b       	sbc	r27, r26
 b5e:	62 0b       	sbc	r22, r18
 b60:	73 0b       	sbc	r23, r19
 b62:	84 0b       	sbc	r24, r20
 b64:	ba f0       	brmi	.+46     	; 0xb94 <__addsf3x+0x9c>
 b66:	91 50       	subi	r25, 0x01	; 1
 b68:	a1 f0       	breq	.+40     	; 0xb92 <__addsf3x+0x9a>
 b6a:	ff 0f       	add	r31, r31
 b6c:	bb 1f       	adc	r27, r27
 b6e:	66 1f       	adc	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	c2 f7       	brpl	.-16     	; 0xb66 <__addsf3x+0x6e>
 b76:	0e c0       	rjmp	.+28     	; 0xb94 <__addsf3x+0x9c>
 b78:	ba 0f       	add	r27, r26
 b7a:	62 1f       	adc	r22, r18
 b7c:	73 1f       	adc	r23, r19
 b7e:	84 1f       	adc	r24, r20
 b80:	48 f4       	brcc	.+18     	; 0xb94 <__addsf3x+0x9c>
 b82:	87 95       	ror	r24
 b84:	77 95       	ror	r23
 b86:	67 95       	ror	r22
 b88:	b7 95       	ror	r27
 b8a:	f7 95       	ror	r31
 b8c:	9e 3f       	cpi	r25, 0xFE	; 254
 b8e:	08 f0       	brcs	.+2      	; 0xb92 <__addsf3x+0x9a>
 b90:	b0 cf       	rjmp	.-160    	; 0xaf2 <__addsf3+0x28>
 b92:	93 95       	inc	r25
 b94:	88 0f       	add	r24, r24
 b96:	08 f0       	brcs	.+2      	; 0xb9a <__addsf3x+0xa2>
 b98:	99 27       	eor	r25, r25
 b9a:	ee 0f       	add	r30, r30
 b9c:	97 95       	ror	r25
 b9e:	87 95       	ror	r24
 ba0:	08 95       	ret

00000ba2 <__divsf3>:
 ba2:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3x>
 ba6:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_round>
 baa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_pscB>
 bae:	58 f0       	brcs	.+22     	; 0xbc6 <__divsf3+0x24>
 bb0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_pscA>
 bb4:	40 f0       	brcs	.+16     	; 0xbc6 <__divsf3+0x24>
 bb6:	29 f4       	brne	.+10     	; 0xbc2 <__divsf3+0x20>
 bb8:	5f 3f       	cpi	r21, 0xFF	; 255
 bba:	29 f0       	breq	.+10     	; 0xbc6 <__divsf3+0x24>
 bbc:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_inf>
 bc0:	51 11       	cpse	r21, r1
 bc2:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>
 bc6:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_nan>

00000bca <__divsf3x>:
 bca:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_split3>
 bce:	68 f3       	brcs	.-38     	; 0xbaa <__divsf3+0x8>

00000bd0 <__divsf3_pse>:
 bd0:	99 23       	and	r25, r25
 bd2:	b1 f3       	breq	.-20     	; 0xbc0 <__divsf3+0x1e>
 bd4:	55 23       	and	r21, r21
 bd6:	91 f3       	breq	.-28     	; 0xbbc <__divsf3+0x1a>
 bd8:	95 1b       	sub	r25, r21
 bda:	55 0b       	sbc	r21, r21
 bdc:	bb 27       	eor	r27, r27
 bde:	aa 27       	eor	r26, r26
 be0:	62 17       	cp	r22, r18
 be2:	73 07       	cpc	r23, r19
 be4:	84 07       	cpc	r24, r20
 be6:	38 f0       	brcs	.+14     	; 0xbf6 <__divsf3_pse+0x26>
 be8:	9f 5f       	subi	r25, 0xFF	; 255
 bea:	5f 4f       	sbci	r21, 0xFF	; 255
 bec:	22 0f       	add	r18, r18
 bee:	33 1f       	adc	r19, r19
 bf0:	44 1f       	adc	r20, r20
 bf2:	aa 1f       	adc	r26, r26
 bf4:	a9 f3       	breq	.-22     	; 0xbe0 <__divsf3_pse+0x10>
 bf6:	35 d0       	rcall	.+106    	; 0xc62 <__divsf3_pse+0x92>
 bf8:	0e 2e       	mov	r0, r30
 bfa:	3a f0       	brmi	.+14     	; 0xc0a <__divsf3_pse+0x3a>
 bfc:	e0 e8       	ldi	r30, 0x80	; 128
 bfe:	32 d0       	rcall	.+100    	; 0xc64 <__divsf3_pse+0x94>
 c00:	91 50       	subi	r25, 0x01	; 1
 c02:	50 40       	sbci	r21, 0x00	; 0
 c04:	e6 95       	lsr	r30
 c06:	00 1c       	adc	r0, r0
 c08:	ca f7       	brpl	.-14     	; 0xbfc <__divsf3_pse+0x2c>
 c0a:	2b d0       	rcall	.+86     	; 0xc62 <__divsf3_pse+0x92>
 c0c:	fe 2f       	mov	r31, r30
 c0e:	29 d0       	rcall	.+82     	; 0xc62 <__divsf3_pse+0x92>
 c10:	66 0f       	add	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	bb 1f       	adc	r27, r27
 c18:	26 17       	cp	r18, r22
 c1a:	37 07       	cpc	r19, r23
 c1c:	48 07       	cpc	r20, r24
 c1e:	ab 07       	cpc	r26, r27
 c20:	b0 e8       	ldi	r27, 0x80	; 128
 c22:	09 f0       	breq	.+2      	; 0xc26 <__divsf3_pse+0x56>
 c24:	bb 0b       	sbc	r27, r27
 c26:	80 2d       	mov	r24, r0
 c28:	bf 01       	movw	r22, r30
 c2a:	ff 27       	eor	r31, r31
 c2c:	93 58       	subi	r25, 0x83	; 131
 c2e:	5f 4f       	sbci	r21, 0xFF	; 255
 c30:	3a f0       	brmi	.+14     	; 0xc40 <__divsf3_pse+0x70>
 c32:	9e 3f       	cpi	r25, 0xFE	; 254
 c34:	51 05       	cpc	r21, r1
 c36:	78 f0       	brcs	.+30     	; 0xc56 <__divsf3_pse+0x86>
 c38:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_inf>
 c3c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>
 c40:	5f 3f       	cpi	r21, 0xFF	; 255
 c42:	e4 f3       	brlt	.-8      	; 0xc3c <__divsf3_pse+0x6c>
 c44:	98 3e       	cpi	r25, 0xE8	; 232
 c46:	d4 f3       	brlt	.-12     	; 0xc3c <__divsf3_pse+0x6c>
 c48:	86 95       	lsr	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	b7 95       	ror	r27
 c50:	f7 95       	ror	r31
 c52:	9f 5f       	subi	r25, 0xFF	; 255
 c54:	c9 f7       	brne	.-14     	; 0xc48 <__divsf3_pse+0x78>
 c56:	88 0f       	add	r24, r24
 c58:	91 1d       	adc	r25, r1
 c5a:	96 95       	lsr	r25
 c5c:	87 95       	ror	r24
 c5e:	97 f9       	bld	r25, 7
 c60:	08 95       	ret
 c62:	e1 e0       	ldi	r30, 0x01	; 1
 c64:	66 0f       	add	r22, r22
 c66:	77 1f       	adc	r23, r23
 c68:	88 1f       	adc	r24, r24
 c6a:	bb 1f       	adc	r27, r27
 c6c:	62 17       	cp	r22, r18
 c6e:	73 07       	cpc	r23, r19
 c70:	84 07       	cpc	r24, r20
 c72:	ba 07       	cpc	r27, r26
 c74:	20 f0       	brcs	.+8      	; 0xc7e <__divsf3_pse+0xae>
 c76:	62 1b       	sub	r22, r18
 c78:	73 0b       	sbc	r23, r19
 c7a:	84 0b       	sbc	r24, r20
 c7c:	ba 0b       	sbc	r27, r26
 c7e:	ee 1f       	adc	r30, r30
 c80:	88 f7       	brcc	.-30     	; 0xc64 <__divsf3_pse+0x94>
 c82:	e0 95       	com	r30
 c84:	08 95       	ret

00000c86 <__fixsfsi>:
 c86:	0e 94 4a 06 	call	0xc94	; 0xc94 <__fixunssfsi>
 c8a:	68 94       	set
 c8c:	b1 11       	cpse	r27, r1
 c8e:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>
 c92:	08 95       	ret

00000c94 <__fixunssfsi>:
 c94:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_splitA>
 c98:	88 f0       	brcs	.+34     	; 0xcbc <__fixunssfsi+0x28>
 c9a:	9f 57       	subi	r25, 0x7F	; 127
 c9c:	98 f0       	brcs	.+38     	; 0xcc4 <__fixunssfsi+0x30>
 c9e:	b9 2f       	mov	r27, r25
 ca0:	99 27       	eor	r25, r25
 ca2:	b7 51       	subi	r27, 0x17	; 23
 ca4:	b0 f0       	brcs	.+44     	; 0xcd2 <__fixunssfsi+0x3e>
 ca6:	e1 f0       	breq	.+56     	; 0xce0 <__fixunssfsi+0x4c>
 ca8:	66 0f       	add	r22, r22
 caa:	77 1f       	adc	r23, r23
 cac:	88 1f       	adc	r24, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	1a f0       	brmi	.+6      	; 0xcb8 <__fixunssfsi+0x24>
 cb2:	ba 95       	dec	r27
 cb4:	c9 f7       	brne	.-14     	; 0xca8 <__fixunssfsi+0x14>
 cb6:	14 c0       	rjmp	.+40     	; 0xce0 <__fixunssfsi+0x4c>
 cb8:	b1 30       	cpi	r27, 0x01	; 1
 cba:	91 f0       	breq	.+36     	; 0xce0 <__fixunssfsi+0x4c>
 cbc:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_zero>
 cc0:	b1 e0       	ldi	r27, 0x01	; 1
 cc2:	08 95       	ret
 cc4:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_zero>
 cc8:	67 2f       	mov	r22, r23
 cca:	78 2f       	mov	r23, r24
 ccc:	88 27       	eor	r24, r24
 cce:	b8 5f       	subi	r27, 0xF8	; 248
 cd0:	39 f0       	breq	.+14     	; 0xce0 <__fixunssfsi+0x4c>
 cd2:	b9 3f       	cpi	r27, 0xF9	; 249
 cd4:	cc f3       	brlt	.-14     	; 0xcc8 <__fixunssfsi+0x34>
 cd6:	86 95       	lsr	r24
 cd8:	77 95       	ror	r23
 cda:	67 95       	ror	r22
 cdc:	b3 95       	inc	r27
 cde:	d9 f7       	brne	.-10     	; 0xcd6 <__fixunssfsi+0x42>
 ce0:	3e f4       	brtc	.+14     	; 0xcf0 <__fixunssfsi+0x5c>
 ce2:	90 95       	com	r25
 ce4:	80 95       	com	r24
 ce6:	70 95       	com	r23
 ce8:	61 95       	neg	r22
 cea:	7f 4f       	sbci	r23, 0xFF	; 255
 cec:	8f 4f       	sbci	r24, 0xFF	; 255
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	08 95       	ret

00000cf2 <__floatunsisf>:
 cf2:	e8 94       	clt
 cf4:	09 c0       	rjmp	.+18     	; 0xd08 <__floatsisf+0x12>

00000cf6 <__floatsisf>:
 cf6:	97 fb       	bst	r25, 7
 cf8:	3e f4       	brtc	.+14     	; 0xd08 <__floatsisf+0x12>
 cfa:	90 95       	com	r25
 cfc:	80 95       	com	r24
 cfe:	70 95       	com	r23
 d00:	61 95       	neg	r22
 d02:	7f 4f       	sbci	r23, 0xFF	; 255
 d04:	8f 4f       	sbci	r24, 0xFF	; 255
 d06:	9f 4f       	sbci	r25, 0xFF	; 255
 d08:	99 23       	and	r25, r25
 d0a:	a9 f0       	breq	.+42     	; 0xd36 <__floatsisf+0x40>
 d0c:	f9 2f       	mov	r31, r25
 d0e:	96 e9       	ldi	r25, 0x96	; 150
 d10:	bb 27       	eor	r27, r27
 d12:	93 95       	inc	r25
 d14:	f6 95       	lsr	r31
 d16:	87 95       	ror	r24
 d18:	77 95       	ror	r23
 d1a:	67 95       	ror	r22
 d1c:	b7 95       	ror	r27
 d1e:	f1 11       	cpse	r31, r1
 d20:	f8 cf       	rjmp	.-16     	; 0xd12 <__floatsisf+0x1c>
 d22:	fa f4       	brpl	.+62     	; 0xd62 <__floatsisf+0x6c>
 d24:	bb 0f       	add	r27, r27
 d26:	11 f4       	brne	.+4      	; 0xd2c <__floatsisf+0x36>
 d28:	60 ff       	sbrs	r22, 0
 d2a:	1b c0       	rjmp	.+54     	; 0xd62 <__floatsisf+0x6c>
 d2c:	6f 5f       	subi	r22, 0xFF	; 255
 d2e:	7f 4f       	sbci	r23, 0xFF	; 255
 d30:	8f 4f       	sbci	r24, 0xFF	; 255
 d32:	9f 4f       	sbci	r25, 0xFF	; 255
 d34:	16 c0       	rjmp	.+44     	; 0xd62 <__floatsisf+0x6c>
 d36:	88 23       	and	r24, r24
 d38:	11 f0       	breq	.+4      	; 0xd3e <__floatsisf+0x48>
 d3a:	96 e9       	ldi	r25, 0x96	; 150
 d3c:	11 c0       	rjmp	.+34     	; 0xd60 <__floatsisf+0x6a>
 d3e:	77 23       	and	r23, r23
 d40:	21 f0       	breq	.+8      	; 0xd4a <__floatsisf+0x54>
 d42:	9e e8       	ldi	r25, 0x8E	; 142
 d44:	87 2f       	mov	r24, r23
 d46:	76 2f       	mov	r23, r22
 d48:	05 c0       	rjmp	.+10     	; 0xd54 <__floatsisf+0x5e>
 d4a:	66 23       	and	r22, r22
 d4c:	71 f0       	breq	.+28     	; 0xd6a <__floatsisf+0x74>
 d4e:	96 e8       	ldi	r25, 0x86	; 134
 d50:	86 2f       	mov	r24, r22
 d52:	70 e0       	ldi	r23, 0x00	; 0
 d54:	60 e0       	ldi	r22, 0x00	; 0
 d56:	2a f0       	brmi	.+10     	; 0xd62 <__floatsisf+0x6c>
 d58:	9a 95       	dec	r25
 d5a:	66 0f       	add	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	da f7       	brpl	.-10     	; 0xd58 <__floatsisf+0x62>
 d62:	88 0f       	add	r24, r24
 d64:	96 95       	lsr	r25
 d66:	87 95       	ror	r24
 d68:	97 f9       	bld	r25, 7
 d6a:	08 95       	ret

00000d6c <__fp_inf>:
 d6c:	97 f9       	bld	r25, 7
 d6e:	9f 67       	ori	r25, 0x7F	; 127
 d70:	80 e8       	ldi	r24, 0x80	; 128
 d72:	70 e0       	ldi	r23, 0x00	; 0
 d74:	60 e0       	ldi	r22, 0x00	; 0
 d76:	08 95       	ret

00000d78 <__fp_nan>:
 d78:	9f ef       	ldi	r25, 0xFF	; 255
 d7a:	80 ec       	ldi	r24, 0xC0	; 192
 d7c:	08 95       	ret

00000d7e <__fp_pscA>:
 d7e:	00 24       	eor	r0, r0
 d80:	0a 94       	dec	r0
 d82:	16 16       	cp	r1, r22
 d84:	17 06       	cpc	r1, r23
 d86:	18 06       	cpc	r1, r24
 d88:	09 06       	cpc	r0, r25
 d8a:	08 95       	ret

00000d8c <__fp_pscB>:
 d8c:	00 24       	eor	r0, r0
 d8e:	0a 94       	dec	r0
 d90:	12 16       	cp	r1, r18
 d92:	13 06       	cpc	r1, r19
 d94:	14 06       	cpc	r1, r20
 d96:	05 06       	cpc	r0, r21
 d98:	08 95       	ret

00000d9a <__fp_round>:
 d9a:	09 2e       	mov	r0, r25
 d9c:	03 94       	inc	r0
 d9e:	00 0c       	add	r0, r0
 da0:	11 f4       	brne	.+4      	; 0xda6 <__fp_round+0xc>
 da2:	88 23       	and	r24, r24
 da4:	52 f0       	brmi	.+20     	; 0xdba <__fp_round+0x20>
 da6:	bb 0f       	add	r27, r27
 da8:	40 f4       	brcc	.+16     	; 0xdba <__fp_round+0x20>
 daa:	bf 2b       	or	r27, r31
 dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0x18>
 dae:	60 ff       	sbrs	r22, 0
 db0:	04 c0       	rjmp	.+8      	; 0xdba <__fp_round+0x20>
 db2:	6f 5f       	subi	r22, 0xFF	; 255
 db4:	7f 4f       	sbci	r23, 0xFF	; 255
 db6:	8f 4f       	sbci	r24, 0xFF	; 255
 db8:	9f 4f       	sbci	r25, 0xFF	; 255
 dba:	08 95       	ret

00000dbc <__fp_split3>:
 dbc:	57 fd       	sbrc	r21, 7
 dbe:	90 58       	subi	r25, 0x80	; 128
 dc0:	44 0f       	add	r20, r20
 dc2:	55 1f       	adc	r21, r21
 dc4:	59 f0       	breq	.+22     	; 0xddc <__fp_splitA+0x10>
 dc6:	5f 3f       	cpi	r21, 0xFF	; 255
 dc8:	71 f0       	breq	.+28     	; 0xde6 <__fp_splitA+0x1a>
 dca:	47 95       	ror	r20

00000dcc <__fp_splitA>:
 dcc:	88 0f       	add	r24, r24
 dce:	97 fb       	bst	r25, 7
 dd0:	99 1f       	adc	r25, r25
 dd2:	61 f0       	breq	.+24     	; 0xdec <__fp_splitA+0x20>
 dd4:	9f 3f       	cpi	r25, 0xFF	; 255
 dd6:	79 f0       	breq	.+30     	; 0xdf6 <__fp_splitA+0x2a>
 dd8:	87 95       	ror	r24
 dda:	08 95       	ret
 ddc:	12 16       	cp	r1, r18
 dde:	13 06       	cpc	r1, r19
 de0:	14 06       	cpc	r1, r20
 de2:	55 1f       	adc	r21, r21
 de4:	f2 cf       	rjmp	.-28     	; 0xdca <__fp_split3+0xe>
 de6:	46 95       	lsr	r20
 de8:	f1 df       	rcall	.-30     	; 0xdcc <__fp_splitA>
 dea:	08 c0       	rjmp	.+16     	; 0xdfc <__fp_splitA+0x30>
 dec:	16 16       	cp	r1, r22
 dee:	17 06       	cpc	r1, r23
 df0:	18 06       	cpc	r1, r24
 df2:	99 1f       	adc	r25, r25
 df4:	f1 cf       	rjmp	.-30     	; 0xdd8 <__fp_splitA+0xc>
 df6:	86 95       	lsr	r24
 df8:	71 05       	cpc	r23, r1
 dfa:	61 05       	cpc	r22, r1
 dfc:	08 94       	sec
 dfe:	08 95       	ret

00000e00 <__fp_zero>:
 e00:	e8 94       	clt

00000e02 <__fp_szero>:
 e02:	bb 27       	eor	r27, r27
 e04:	66 27       	eor	r22, r22
 e06:	77 27       	eor	r23, r23
 e08:	cb 01       	movw	r24, r22
 e0a:	97 f9       	bld	r25, 7
 e0c:	08 95       	ret

00000e0e <__mulsf3>:
 e0e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__mulsf3x>
 e12:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_round>
 e16:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fp_pscA>
 e1a:	38 f0       	brcs	.+14     	; 0xe2a <__mulsf3+0x1c>
 e1c:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_pscB>
 e20:	20 f0       	brcs	.+8      	; 0xe2a <__mulsf3+0x1c>
 e22:	95 23       	and	r25, r21
 e24:	11 f0       	breq	.+4      	; 0xe2a <__mulsf3+0x1c>
 e26:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_inf>
 e2a:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_nan>
 e2e:	11 24       	eor	r1, r1
 e30:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>

00000e34 <__mulsf3x>:
 e34:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_split3>
 e38:	70 f3       	brcs	.-36     	; 0xe16 <__mulsf3+0x8>

00000e3a <__mulsf3_pse>:
 e3a:	95 9f       	mul	r25, r21
 e3c:	c1 f3       	breq	.-16     	; 0xe2e <__mulsf3+0x20>
 e3e:	95 0f       	add	r25, r21
 e40:	50 e0       	ldi	r21, 0x00	; 0
 e42:	55 1f       	adc	r21, r21
 e44:	62 9f       	mul	r22, r18
 e46:	f0 01       	movw	r30, r0
 e48:	72 9f       	mul	r23, r18
 e4a:	bb 27       	eor	r27, r27
 e4c:	f0 0d       	add	r31, r0
 e4e:	b1 1d       	adc	r27, r1
 e50:	63 9f       	mul	r22, r19
 e52:	aa 27       	eor	r26, r26
 e54:	f0 0d       	add	r31, r0
 e56:	b1 1d       	adc	r27, r1
 e58:	aa 1f       	adc	r26, r26
 e5a:	64 9f       	mul	r22, r20
 e5c:	66 27       	eor	r22, r22
 e5e:	b0 0d       	add	r27, r0
 e60:	a1 1d       	adc	r26, r1
 e62:	66 1f       	adc	r22, r22
 e64:	82 9f       	mul	r24, r18
 e66:	22 27       	eor	r18, r18
 e68:	b0 0d       	add	r27, r0
 e6a:	a1 1d       	adc	r26, r1
 e6c:	62 1f       	adc	r22, r18
 e6e:	73 9f       	mul	r23, r19
 e70:	b0 0d       	add	r27, r0
 e72:	a1 1d       	adc	r26, r1
 e74:	62 1f       	adc	r22, r18
 e76:	83 9f       	mul	r24, r19
 e78:	a0 0d       	add	r26, r0
 e7a:	61 1d       	adc	r22, r1
 e7c:	22 1f       	adc	r18, r18
 e7e:	74 9f       	mul	r23, r20
 e80:	33 27       	eor	r19, r19
 e82:	a0 0d       	add	r26, r0
 e84:	61 1d       	adc	r22, r1
 e86:	23 1f       	adc	r18, r19
 e88:	84 9f       	mul	r24, r20
 e8a:	60 0d       	add	r22, r0
 e8c:	21 1d       	adc	r18, r1
 e8e:	82 2f       	mov	r24, r18
 e90:	76 2f       	mov	r23, r22
 e92:	6a 2f       	mov	r22, r26
 e94:	11 24       	eor	r1, r1
 e96:	9f 57       	subi	r25, 0x7F	; 127
 e98:	50 40       	sbci	r21, 0x00	; 0
 e9a:	9a f0       	brmi	.+38     	; 0xec2 <__mulsf3_pse+0x88>
 e9c:	f1 f0       	breq	.+60     	; 0xeda <__mulsf3_pse+0xa0>
 e9e:	88 23       	and	r24, r24
 ea0:	4a f0       	brmi	.+18     	; 0xeb4 <__mulsf3_pse+0x7a>
 ea2:	ee 0f       	add	r30, r30
 ea4:	ff 1f       	adc	r31, r31
 ea6:	bb 1f       	adc	r27, r27
 ea8:	66 1f       	adc	r22, r22
 eaa:	77 1f       	adc	r23, r23
 eac:	88 1f       	adc	r24, r24
 eae:	91 50       	subi	r25, 0x01	; 1
 eb0:	50 40       	sbci	r21, 0x00	; 0
 eb2:	a9 f7       	brne	.-22     	; 0xe9e <__mulsf3_pse+0x64>
 eb4:	9e 3f       	cpi	r25, 0xFE	; 254
 eb6:	51 05       	cpc	r21, r1
 eb8:	80 f0       	brcs	.+32     	; 0xeda <__mulsf3_pse+0xa0>
 eba:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_inf>
 ebe:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>
 ec2:	5f 3f       	cpi	r21, 0xFF	; 255
 ec4:	e4 f3       	brlt	.-8      	; 0xebe <__mulsf3_pse+0x84>
 ec6:	98 3e       	cpi	r25, 0xE8	; 232
 ec8:	d4 f3       	brlt	.-12     	; 0xebe <__mulsf3_pse+0x84>
 eca:	86 95       	lsr	r24
 ecc:	77 95       	ror	r23
 ece:	67 95       	ror	r22
 ed0:	b7 95       	ror	r27
 ed2:	f7 95       	ror	r31
 ed4:	e7 95       	ror	r30
 ed6:	9f 5f       	subi	r25, 0xFF	; 255
 ed8:	c1 f7       	brne	.-16     	; 0xeca <__mulsf3_pse+0x90>
 eda:	fe 2b       	or	r31, r30
 edc:	88 0f       	add	r24, r24
 ede:	91 1d       	adc	r25, r1
 ee0:	96 95       	lsr	r25
 ee2:	87 95       	ror	r24
 ee4:	97 f9       	bld	r25, 7
 ee6:	08 95       	ret

00000ee8 <round>:
 ee8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_splitA>
 eec:	e8 f0       	brcs	.+58     	; 0xf28 <round+0x40>
 eee:	9e 37       	cpi	r25, 0x7E	; 126
 ef0:	e8 f0       	brcs	.+58     	; 0xf2c <round+0x44>
 ef2:	96 39       	cpi	r25, 0x96	; 150
 ef4:	b8 f4       	brcc	.+46     	; 0xf24 <round+0x3c>
 ef6:	9e 38       	cpi	r25, 0x8E	; 142
 ef8:	48 f4       	brcc	.+18     	; 0xf0c <round+0x24>
 efa:	67 2f       	mov	r22, r23
 efc:	78 2f       	mov	r23, r24
 efe:	88 27       	eor	r24, r24
 f00:	98 5f       	subi	r25, 0xF8	; 248
 f02:	f9 cf       	rjmp	.-14     	; 0xef6 <round+0xe>
 f04:	86 95       	lsr	r24
 f06:	77 95       	ror	r23
 f08:	67 95       	ror	r22
 f0a:	93 95       	inc	r25
 f0c:	95 39       	cpi	r25, 0x95	; 149
 f0e:	d0 f3       	brcs	.-12     	; 0xf04 <round+0x1c>
 f10:	b6 2f       	mov	r27, r22
 f12:	b1 70       	andi	r27, 0x01	; 1
 f14:	6b 0f       	add	r22, r27
 f16:	71 1d       	adc	r23, r1
 f18:	81 1d       	adc	r24, r1
 f1a:	20 f4       	brcc	.+8      	; 0xf24 <round+0x3c>
 f1c:	87 95       	ror	r24
 f1e:	77 95       	ror	r23
 f20:	67 95       	ror	r22
 f22:	93 95       	inc	r25
 f24:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__fp_mintl>
 f28:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__fp_mpack>
 f2c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>

00000f30 <__fp_mintl>:
 f30:	88 23       	and	r24, r24
 f32:	71 f4       	brne	.+28     	; 0xf50 <__fp_mintl+0x20>
 f34:	77 23       	and	r23, r23
 f36:	21 f0       	breq	.+8      	; 0xf40 <__fp_mintl+0x10>
 f38:	98 50       	subi	r25, 0x08	; 8
 f3a:	87 2b       	or	r24, r23
 f3c:	76 2f       	mov	r23, r22
 f3e:	07 c0       	rjmp	.+14     	; 0xf4e <__fp_mintl+0x1e>
 f40:	66 23       	and	r22, r22
 f42:	11 f4       	brne	.+4      	; 0xf48 <__fp_mintl+0x18>
 f44:	99 27       	eor	r25, r25
 f46:	0d c0       	rjmp	.+26     	; 0xf62 <__fp_mintl+0x32>
 f48:	90 51       	subi	r25, 0x10	; 16
 f4a:	86 2b       	or	r24, r22
 f4c:	70 e0       	ldi	r23, 0x00	; 0
 f4e:	60 e0       	ldi	r22, 0x00	; 0
 f50:	2a f0       	brmi	.+10     	; 0xf5c <__fp_mintl+0x2c>
 f52:	9a 95       	dec	r25
 f54:	66 0f       	add	r22, r22
 f56:	77 1f       	adc	r23, r23
 f58:	88 1f       	adc	r24, r24
 f5a:	da f7       	brpl	.-10     	; 0xf52 <__fp_mintl+0x22>
 f5c:	88 0f       	add	r24, r24
 f5e:	96 95       	lsr	r25
 f60:	87 95       	ror	r24
 f62:	97 f9       	bld	r25, 7
 f64:	08 95       	ret

00000f66 <__fp_mpack>:
 f66:	9f 3f       	cpi	r25, 0xFF	; 255
 f68:	31 f0       	breq	.+12     	; 0xf76 <__fp_mpack_finite+0xc>

00000f6a <__fp_mpack_finite>:
 f6a:	91 50       	subi	r25, 0x01	; 1
 f6c:	20 f4       	brcc	.+8      	; 0xf76 <__fp_mpack_finite+0xc>
 f6e:	87 95       	ror	r24
 f70:	77 95       	ror	r23
 f72:	67 95       	ror	r22
 f74:	b7 95       	ror	r27
 f76:	88 0f       	add	r24, r24
 f78:	91 1d       	adc	r25, r1
 f7a:	96 95       	lsr	r25
 f7c:	87 95       	ror	r24
 f7e:	97 f9       	bld	r25, 7
 f80:	08 95       	ret

00000f82 <__itoa_ncheck>:
 f82:	bb 27       	eor	r27, r27
 f84:	4a 30       	cpi	r20, 0x0A	; 10
 f86:	31 f4       	brne	.+12     	; 0xf94 <__itoa_ncheck+0x12>
 f88:	99 23       	and	r25, r25
 f8a:	22 f4       	brpl	.+8      	; 0xf94 <__itoa_ncheck+0x12>
 f8c:	bd e2       	ldi	r27, 0x2D	; 45
 f8e:	90 95       	com	r25
 f90:	81 95       	neg	r24
 f92:	9f 4f       	sbci	r25, 0xFF	; 255
 f94:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__utoa_common>

00000f98 <__utoa_ncheck>:
 f98:	bb 27       	eor	r27, r27

00000f9a <__utoa_common>:
 f9a:	fb 01       	movw	r30, r22
 f9c:	55 27       	eor	r21, r21
 f9e:	aa 27       	eor	r26, r26
 fa0:	88 0f       	add	r24, r24
 fa2:	99 1f       	adc	r25, r25
 fa4:	aa 1f       	adc	r26, r26
 fa6:	a4 17       	cp	r26, r20
 fa8:	10 f0       	brcs	.+4      	; 0xfae <__utoa_common+0x14>
 faa:	a4 1b       	sub	r26, r20
 fac:	83 95       	inc	r24
 fae:	50 51       	subi	r21, 0x10	; 16
 fb0:	b9 f7       	brne	.-18     	; 0xfa0 <__utoa_common+0x6>
 fb2:	a0 5d       	subi	r26, 0xD0	; 208
 fb4:	aa 33       	cpi	r26, 0x3A	; 58
 fb6:	08 f0       	brcs	.+2      	; 0xfba <__utoa_common+0x20>
 fb8:	a9 5d       	subi	r26, 0xD9	; 217
 fba:	a1 93       	st	Z+, r26
 fbc:	00 97       	sbiw	r24, 0x00	; 0
 fbe:	79 f7       	brne	.-34     	; 0xf9e <__utoa_common+0x4>
 fc0:	b1 11       	cpse	r27, r1
 fc2:	b1 93       	st	Z+, r27
 fc4:	11 92       	st	Z+, r1
 fc6:	cb 01       	movw	r24, r22
 fc8:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <strrev>

00000fcc <strrev>:
 fcc:	dc 01       	movw	r26, r24
 fce:	fc 01       	movw	r30, r24
 fd0:	67 2f       	mov	r22, r23
 fd2:	71 91       	ld	r23, Z+
 fd4:	77 23       	and	r23, r23
 fd6:	e1 f7       	brne	.-8      	; 0xfd0 <strrev+0x4>
 fd8:	32 97       	sbiw	r30, 0x02	; 2
 fda:	04 c0       	rjmp	.+8      	; 0xfe4 <strrev+0x18>
 fdc:	7c 91       	ld	r23, X
 fde:	6d 93       	st	X+, r22
 fe0:	70 83       	st	Z, r23
 fe2:	62 91       	ld	r22, -Z
 fe4:	ae 17       	cp	r26, r30
 fe6:	bf 07       	cpc	r27, r31
 fe8:	c8 f3       	brcs	.-14     	; 0xfdc <strrev+0x10>
 fea:	08 95       	ret

00000fec <_exit>:
 fec:	f8 94       	cli

00000fee <__stop_program>:
 fee:	ff cf       	rjmp	.-2      	; 0xfee <__stop_program>
